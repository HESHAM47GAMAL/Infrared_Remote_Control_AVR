
RemoteControl_Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00004b8e  00004c22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004f  0080007c  0080007c  00004c3e  2**0
                  ALLOC
  3 .stab         00003318  00000000  00000000  00004c40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d23  00000000  00000000  00007f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d0  00000000  00000000  00009e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000020a2  00000000  00000000  00009feb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000119f  00000000  00000000  0000c08d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000101a  00000000  00000000  0000d22c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e248  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ec  00000000  00000000  0000e408  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009e8  00000000  00000000  0000e6f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f0dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3c       	cpi	r26, 0xCB	; 203
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <main>
      8a:	0c 94 c5 25 	jmp	0x4b8a	; 0x4b8a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__lshrdi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__lshrdi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__lshrdi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__lshrdi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	4d 81       	ldd	r20, Y+5	; 0x05
      e4:	5e 81       	ldd	r21, Y+6	; 0x06
      e6:	6f 81       	ldd	r22, Y+7	; 0x07
      e8:	78 85       	ldd	r23, Y+8	; 0x08
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__lshrdi3+0x7c>
      ee:	1d 86       	std	Y+13, r1	; 0x0d
      f0:	1e 86       	std	Y+14, r1	; 0x0e
      f2:	1f 86       	std	Y+15, r1	; 0x0f
      f4:	18 8a       	std	Y+16, r1	; 0x10
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__lshrdi3+0x76>
     100:	76 95       	lsr	r23
     102:	67 95       	ror	r22
     104:	57 95       	ror	r21
     106:	47 95       	ror	r20
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__lshrdi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__lshrdi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__lshrdi3+0x94>
     11e:	b6 95       	lsr	r27
     120:	a7 95       	ror	r26
     122:	97 95       	ror	r25
     124:	87 95       	ror	r24
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__lshrdi3+0x8c>
     12a:	8d 87       	std	Y+13, r24	; 0x0d
     12c:	9e 87       	std	Y+14, r25	; 0x0e
     12e:	af 87       	std	Y+15, r26	; 0x0f
     130:	b8 8b       	std	Y+16, r27	; 0x10
     132:	04 c0       	rjmp	.+8      	; 0x13c <__lshrdi3+0xaa>
     134:	44 0f       	add	r20, r20
     136:	55 1f       	adc	r21, r21
     138:	66 1f       	adc	r22, r22
     13a:	77 1f       	adc	r23, r23
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__lshrdi3+0xa2>
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	9a 81       	ldd	r25, Y+2	; 0x02
     144:	ab 81       	ldd	r26, Y+3	; 0x03
     146:	bc 81       	ldd	r27, Y+4	; 0x04
     148:	04 c0       	rjmp	.+8      	; 0x152 <__lshrdi3+0xc0>
     14a:	b6 95       	lsr	r27
     14c:	a7 95       	ror	r26
     14e:	97 95       	ror	r25
     150:	87 95       	ror	r24
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__lshrdi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	49 87       	std	Y+9, r20	; 0x09
     160:	5a 87       	std	Y+10, r21	; 0x0a
     162:	6b 87       	std	Y+11, r22	; 0x0b
     164:	7c 87       	std	Y+12, r23	; 0x0c
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__ashldi3>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	df 93       	push	r29
     198:	cf 93       	push	r28
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
     19e:	60 97       	sbiw	r28, 0x10	; 16
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	f8 94       	cli
     1a4:	de bf       	out	0x3e, r29	; 62
     1a6:	0f be       	out	0x3f, r0	; 63
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	a8 2f       	mov	r26, r24
     1ac:	00 23       	and	r16, r16
     1ae:	09 f4       	brne	.+2      	; 0x1b2 <__ashldi3+0x22>
     1b0:	61 c0       	rjmp	.+194    	; 0x274 <__ashldi3+0xe4>
     1b2:	7e 01       	movw	r14, r28
     1b4:	08 94       	sec
     1b6:	e1 1c       	adc	r14, r1
     1b8:	f1 1c       	adc	r15, r1
     1ba:	88 e0       	ldi	r24, 0x08	; 8
     1bc:	f7 01       	movw	r30, r14
     1be:	11 92       	st	Z+, r1
     1c0:	8a 95       	dec	r24
     1c2:	e9 f7       	brne	.-6      	; 0x1be <__ashldi3+0x2e>
     1c4:	29 83       	std	Y+1, r18	; 0x01
     1c6:	3a 83       	std	Y+2, r19	; 0x02
     1c8:	4b 83       	std	Y+3, r20	; 0x03
     1ca:	5c 83       	std	Y+4, r21	; 0x04
     1cc:	6d 83       	std	Y+5, r22	; 0x05
     1ce:	7e 83       	std	Y+6, r23	; 0x06
     1d0:	af 83       	std	Y+7, r26	; 0x07
     1d2:	98 87       	std	Y+8, r25	; 0x08
     1d4:	80 e2       	ldi	r24, 0x20	; 32
     1d6:	80 1b       	sub	r24, r16
     1d8:	e8 2f       	mov	r30, r24
     1da:	ff 27       	eor	r31, r31
     1dc:	e7 fd       	sbrc	r30, 7
     1de:	f0 95       	com	r31
     1e0:	49 81       	ldd	r20, Y+1	; 0x01
     1e2:	5a 81       	ldd	r21, Y+2	; 0x02
     1e4:	6b 81       	ldd	r22, Y+3	; 0x03
     1e6:	7c 81       	ldd	r23, Y+4	; 0x04
     1e8:	18 16       	cp	r1, r24
     1ea:	84 f0       	brlt	.+32     	; 0x20c <__ashldi3+0x7c>
     1ec:	19 86       	std	Y+9, r1	; 0x09
     1ee:	1a 86       	std	Y+10, r1	; 0x0a
     1f0:	1b 86       	std	Y+11, r1	; 0x0b
     1f2:	1c 86       	std	Y+12, r1	; 0x0c
     1f4:	88 27       	eor	r24, r24
     1f6:	99 27       	eor	r25, r25
     1f8:	8e 1b       	sub	r24, r30
     1fa:	9f 0b       	sbc	r25, r31
     1fc:	04 c0       	rjmp	.+8      	; 0x206 <__ashldi3+0x76>
     1fe:	44 0f       	add	r20, r20
     200:	55 1f       	adc	r21, r21
     202:	66 1f       	adc	r22, r22
     204:	77 1f       	adc	r23, r23
     206:	8a 95       	dec	r24
     208:	d2 f7       	brpl	.-12     	; 0x1fe <__ashldi3+0x6e>
     20a:	28 c0       	rjmp	.+80     	; 0x25c <__ashldi3+0xcc>
     20c:	20 2f       	mov	r18, r16
     20e:	33 27       	eor	r19, r19
     210:	27 fd       	sbrc	r18, 7
     212:	30 95       	com	r19
     214:	db 01       	movw	r26, r22
     216:	ca 01       	movw	r24, r20
     218:	02 2e       	mov	r0, r18
     21a:	04 c0       	rjmp	.+8      	; 0x224 <__ashldi3+0x94>
     21c:	88 0f       	add	r24, r24
     21e:	99 1f       	adc	r25, r25
     220:	aa 1f       	adc	r26, r26
     222:	bb 1f       	adc	r27, r27
     224:	0a 94       	dec	r0
     226:	d2 f7       	brpl	.-12     	; 0x21c <__ashldi3+0x8c>
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	9a 87       	std	Y+10, r25	; 0x0a
     22c:	ab 87       	std	Y+11, r26	; 0x0b
     22e:	bc 87       	std	Y+12, r27	; 0x0c
     230:	04 c0       	rjmp	.+8      	; 0x23a <__ashldi3+0xaa>
     232:	76 95       	lsr	r23
     234:	67 95       	ror	r22
     236:	57 95       	ror	r21
     238:	47 95       	ror	r20
     23a:	ea 95       	dec	r30
     23c:	d2 f7       	brpl	.-12     	; 0x232 <__ashldi3+0xa2>
     23e:	8d 81       	ldd	r24, Y+5	; 0x05
     240:	9e 81       	ldd	r25, Y+6	; 0x06
     242:	af 81       	ldd	r26, Y+7	; 0x07
     244:	b8 85       	ldd	r27, Y+8	; 0x08
     246:	04 c0       	rjmp	.+8      	; 0x250 <__ashldi3+0xc0>
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	aa 1f       	adc	r26, r26
     24e:	bb 1f       	adc	r27, r27
     250:	2a 95       	dec	r18
     252:	d2 f7       	brpl	.-12     	; 0x248 <__ashldi3+0xb8>
     254:	48 2b       	or	r20, r24
     256:	59 2b       	or	r21, r25
     258:	6a 2b       	or	r22, r26
     25a:	7b 2b       	or	r23, r27
     25c:	4d 87       	std	Y+13, r20	; 0x0d
     25e:	5e 87       	std	Y+14, r21	; 0x0e
     260:	6f 87       	std	Y+15, r22	; 0x0f
     262:	78 8b       	std	Y+16, r23	; 0x10
     264:	29 85       	ldd	r18, Y+9	; 0x09
     266:	3a 85       	ldd	r19, Y+10	; 0x0a
     268:	4b 85       	ldd	r20, Y+11	; 0x0b
     26a:	5c 85       	ldd	r21, Y+12	; 0x0c
     26c:	6d 85       	ldd	r22, Y+13	; 0x0d
     26e:	7e 85       	ldd	r23, Y+14	; 0x0e
     270:	af 85       	ldd	r26, Y+15	; 0x0f
     272:	98 89       	ldd	r25, Y+16	; 0x10
     274:	8a 2f       	mov	r24, r26
     276:	60 96       	adiw	r28, 0x10	; 16
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	cf 91       	pop	r28
     284:	df 91       	pop	r29
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	08 95       	ret

0000028e <__ucmpdi2>:
     28e:	a0 e1       	ldi	r26, 0x10	; 16
     290:	b0 e0       	ldi	r27, 0x00	; 0
     292:	ed e4       	ldi	r30, 0x4D	; 77
     294:	f1 e0       	ldi	r31, 0x01	; 1
     296:	0c 94 4f 25 	jmp	0x4a9e	; 0x4a9e <__prologue_saves__+0xc>
     29a:	a8 e0       	ldi	r26, 0x08	; 8
     29c:	4e 01       	movw	r8, r28
     29e:	08 94       	sec
     2a0:	81 1c       	adc	r8, r1
     2a2:	91 1c       	adc	r9, r1
     2a4:	f4 01       	movw	r30, r8
     2a6:	ba 2f       	mov	r27, r26
     2a8:	11 92       	st	Z+, r1
     2aa:	ba 95       	dec	r27
     2ac:	e9 f7       	brne	.-6      	; 0x2a8 <__ucmpdi2+0x1a>
     2ae:	29 83       	std	Y+1, r18	; 0x01
     2b0:	3a 83       	std	Y+2, r19	; 0x02
     2b2:	4b 83       	std	Y+3, r20	; 0x03
     2b4:	5c 83       	std	Y+4, r21	; 0x04
     2b6:	6d 83       	std	Y+5, r22	; 0x05
     2b8:	7e 83       	std	Y+6, r23	; 0x06
     2ba:	8f 83       	std	Y+7, r24	; 0x07
     2bc:	98 87       	std	Y+8, r25	; 0x08
     2be:	ce 01       	movw	r24, r28
     2c0:	09 96       	adiw	r24, 0x09	; 9
     2c2:	fc 01       	movw	r30, r24
     2c4:	11 92       	st	Z+, r1
     2c6:	aa 95       	dec	r26
     2c8:	e9 f7       	brne	.-6      	; 0x2c4 <__ucmpdi2+0x36>
     2ca:	a9 86       	std	Y+9, r10	; 0x09
     2cc:	ba 86       	std	Y+10, r11	; 0x0a
     2ce:	cb 86       	std	Y+11, r12	; 0x0b
     2d0:	dc 86       	std	Y+12, r13	; 0x0c
     2d2:	ed 86       	std	Y+13, r14	; 0x0d
     2d4:	fe 86       	std	Y+14, r15	; 0x0e
     2d6:	0f 87       	std	Y+15, r16	; 0x0f
     2d8:	18 8b       	std	Y+16, r17	; 0x10
     2da:	2d 81       	ldd	r18, Y+5	; 0x05
     2dc:	3e 81       	ldd	r19, Y+6	; 0x06
     2de:	4f 81       	ldd	r20, Y+7	; 0x07
     2e0:	58 85       	ldd	r21, Y+8	; 0x08
     2e2:	8d 85       	ldd	r24, Y+13	; 0x0d
     2e4:	9e 85       	ldd	r25, Y+14	; 0x0e
     2e6:	af 85       	ldd	r26, Y+15	; 0x0f
     2e8:	b8 89       	ldd	r27, Y+16	; 0x10
     2ea:	28 17       	cp	r18, r24
     2ec:	39 07       	cpc	r19, r25
     2ee:	4a 07       	cpc	r20, r26
     2f0:	5b 07       	cpc	r21, r27
     2f2:	c8 f0       	brcs	.+50     	; 0x326 <__ucmpdi2+0x98>
     2f4:	82 17       	cp	r24, r18
     2f6:	93 07       	cpc	r25, r19
     2f8:	a4 07       	cpc	r26, r20
     2fa:	b5 07       	cpc	r27, r21
     2fc:	b0 f0       	brcs	.+44     	; 0x32a <__ucmpdi2+0x9c>
     2fe:	29 81       	ldd	r18, Y+1	; 0x01
     300:	3a 81       	ldd	r19, Y+2	; 0x02
     302:	4b 81       	ldd	r20, Y+3	; 0x03
     304:	5c 81       	ldd	r21, Y+4	; 0x04
     306:	89 85       	ldd	r24, Y+9	; 0x09
     308:	9a 85       	ldd	r25, Y+10	; 0x0a
     30a:	ab 85       	ldd	r26, Y+11	; 0x0b
     30c:	bc 85       	ldd	r27, Y+12	; 0x0c
     30e:	28 17       	cp	r18, r24
     310:	39 07       	cpc	r19, r25
     312:	4a 07       	cpc	r20, r26
     314:	5b 07       	cpc	r21, r27
     316:	38 f0       	brcs	.+14     	; 0x326 <__ucmpdi2+0x98>
     318:	82 17       	cp	r24, r18
     31a:	93 07       	cpc	r25, r19
     31c:	a4 07       	cpc	r26, r20
     31e:	b5 07       	cpc	r27, r21
     320:	20 f0       	brcs	.+8      	; 0x32a <__ucmpdi2+0x9c>
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	03 c0       	rjmp	.+6      	; 0x32c <__ucmpdi2+0x9e>
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	01 c0       	rjmp	.+2      	; 0x32c <__ucmpdi2+0x9e>
     32a:	82 e0       	ldi	r24, 0x02	; 2
     32c:	60 96       	adiw	r28, 0x10	; 16
     32e:	ec e0       	ldi	r30, 0x0C	; 12
     330:	0c 94 6b 25 	jmp	0x4ad6	; 0x4ad6 <__epilogue_restores__+0xc>

00000334 <__fixunssfsi>:
     334:	ef 92       	push	r14
     336:	ff 92       	push	r15
     338:	0f 93       	push	r16
     33a:	1f 93       	push	r17
     33c:	7b 01       	movw	r14, r22
     33e:	8c 01       	movw	r16, r24
     340:	20 e0       	ldi	r18, 0x00	; 0
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	40 e0       	ldi	r20, 0x00	; 0
     346:	5f e4       	ldi	r21, 0x4F	; 79
     348:	0e 94 9a 04 	call	0x934	; 0x934 <__gesf2>
     34c:	88 23       	and	r24, r24
     34e:	8c f0       	brlt	.+34     	; 0x372 <__fixunssfsi+0x3e>
     350:	c8 01       	movw	r24, r16
     352:	b7 01       	movw	r22, r14
     354:	20 e0       	ldi	r18, 0x00	; 0
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	40 e0       	ldi	r20, 0x00	; 0
     35a:	5f e4       	ldi	r21, 0x4F	; 79
     35c:	0e 94 12 03 	call	0x624	; 0x624 <__subsf3>
     360:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__fixsfsi>
     364:	9b 01       	movw	r18, r22
     366:	ac 01       	movw	r20, r24
     368:	20 50       	subi	r18, 0x00	; 0
     36a:	30 40       	sbci	r19, 0x00	; 0
     36c:	40 40       	sbci	r20, 0x00	; 0
     36e:	50 48       	sbci	r21, 0x80	; 128
     370:	06 c0       	rjmp	.+12     	; 0x37e <__fixunssfsi+0x4a>
     372:	c8 01       	movw	r24, r16
     374:	b7 01       	movw	r22, r14
     376:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__fixsfsi>
     37a:	9b 01       	movw	r18, r22
     37c:	ac 01       	movw	r20, r24
     37e:	b9 01       	movw	r22, r18
     380:	ca 01       	movw	r24, r20
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	ff 90       	pop	r15
     388:	ef 90       	pop	r14
     38a:	08 95       	ret

0000038c <_fpadd_parts>:
     38c:	a0 e0       	ldi	r26, 0x00	; 0
     38e:	b0 e0       	ldi	r27, 0x00	; 0
     390:	ec ec       	ldi	r30, 0xCC	; 204
     392:	f1 e0       	ldi	r31, 0x01	; 1
     394:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__prologue_saves__>
     398:	dc 01       	movw	r26, r24
     39a:	2b 01       	movw	r4, r22
     39c:	fa 01       	movw	r30, r20
     39e:	9c 91       	ld	r25, X
     3a0:	92 30       	cpi	r25, 0x02	; 2
     3a2:	08 f4       	brcc	.+2      	; 0x3a6 <_fpadd_parts+0x1a>
     3a4:	39 c1       	rjmp	.+626    	; 0x618 <__stack+0x1b9>
     3a6:	eb 01       	movw	r28, r22
     3a8:	88 81       	ld	r24, Y
     3aa:	82 30       	cpi	r24, 0x02	; 2
     3ac:	08 f4       	brcc	.+2      	; 0x3b0 <_fpadd_parts+0x24>
     3ae:	33 c1       	rjmp	.+614    	; 0x616 <__stack+0x1b7>
     3b0:	94 30       	cpi	r25, 0x04	; 4
     3b2:	69 f4       	brne	.+26     	; 0x3ce <_fpadd_parts+0x42>
     3b4:	84 30       	cpi	r24, 0x04	; 4
     3b6:	09 f0       	breq	.+2      	; 0x3ba <_fpadd_parts+0x2e>
     3b8:	2f c1       	rjmp	.+606    	; 0x618 <__stack+0x1b9>
     3ba:	11 96       	adiw	r26, 0x01	; 1
     3bc:	9c 91       	ld	r25, X
     3be:	11 97       	sbiw	r26, 0x01	; 1
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	98 17       	cp	r25, r24
     3c4:	09 f4       	brne	.+2      	; 0x3c8 <_fpadd_parts+0x3c>
     3c6:	28 c1       	rjmp	.+592    	; 0x618 <__stack+0x1b9>
     3c8:	a0 e6       	ldi	r26, 0x60	; 96
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	25 c1       	rjmp	.+586    	; 0x618 <__stack+0x1b9>
     3ce:	84 30       	cpi	r24, 0x04	; 4
     3d0:	09 f4       	brne	.+2      	; 0x3d4 <_fpadd_parts+0x48>
     3d2:	21 c1       	rjmp	.+578    	; 0x616 <__stack+0x1b7>
     3d4:	82 30       	cpi	r24, 0x02	; 2
     3d6:	a9 f4       	brne	.+42     	; 0x402 <_fpadd_parts+0x76>
     3d8:	92 30       	cpi	r25, 0x02	; 2
     3da:	09 f0       	breq	.+2      	; 0x3de <_fpadd_parts+0x52>
     3dc:	1d c1       	rjmp	.+570    	; 0x618 <__stack+0x1b9>
     3de:	9a 01       	movw	r18, r20
     3e0:	ad 01       	movw	r20, r26
     3e2:	88 e0       	ldi	r24, 0x08	; 8
     3e4:	ea 01       	movw	r28, r20
     3e6:	09 90       	ld	r0, Y+
     3e8:	ae 01       	movw	r20, r28
     3ea:	e9 01       	movw	r28, r18
     3ec:	09 92       	st	Y+, r0
     3ee:	9e 01       	movw	r18, r28
     3f0:	81 50       	subi	r24, 0x01	; 1
     3f2:	c1 f7       	brne	.-16     	; 0x3e4 <_fpadd_parts+0x58>
     3f4:	e2 01       	movw	r28, r4
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	11 96       	adiw	r26, 0x01	; 1
     3fa:	9c 91       	ld	r25, X
     3fc:	89 23       	and	r24, r25
     3fe:	81 83       	std	Z+1, r24	; 0x01
     400:	08 c1       	rjmp	.+528    	; 0x612 <__stack+0x1b3>
     402:	92 30       	cpi	r25, 0x02	; 2
     404:	09 f4       	brne	.+2      	; 0x408 <_fpadd_parts+0x7c>
     406:	07 c1       	rjmp	.+526    	; 0x616 <__stack+0x1b7>
     408:	12 96       	adiw	r26, 0x02	; 2
     40a:	2d 90       	ld	r2, X+
     40c:	3c 90       	ld	r3, X
     40e:	13 97       	sbiw	r26, 0x03	; 3
     410:	eb 01       	movw	r28, r22
     412:	8a 81       	ldd	r24, Y+2	; 0x02
     414:	9b 81       	ldd	r25, Y+3	; 0x03
     416:	14 96       	adiw	r26, 0x04	; 4
     418:	ad 90       	ld	r10, X+
     41a:	bd 90       	ld	r11, X+
     41c:	cd 90       	ld	r12, X+
     41e:	dc 90       	ld	r13, X
     420:	17 97       	sbiw	r26, 0x07	; 7
     422:	ec 80       	ldd	r14, Y+4	; 0x04
     424:	fd 80       	ldd	r15, Y+5	; 0x05
     426:	0e 81       	ldd	r16, Y+6	; 0x06
     428:	1f 81       	ldd	r17, Y+7	; 0x07
     42a:	91 01       	movw	r18, r2
     42c:	28 1b       	sub	r18, r24
     42e:	39 0b       	sbc	r19, r25
     430:	b9 01       	movw	r22, r18
     432:	37 ff       	sbrs	r19, 7
     434:	04 c0       	rjmp	.+8      	; 0x43e <_fpadd_parts+0xb2>
     436:	66 27       	eor	r22, r22
     438:	77 27       	eor	r23, r23
     43a:	62 1b       	sub	r22, r18
     43c:	73 0b       	sbc	r23, r19
     43e:	60 32       	cpi	r22, 0x20	; 32
     440:	71 05       	cpc	r23, r1
     442:	0c f0       	brlt	.+2      	; 0x446 <_fpadd_parts+0xba>
     444:	61 c0       	rjmp	.+194    	; 0x508 <__stack+0xa9>
     446:	12 16       	cp	r1, r18
     448:	13 06       	cpc	r1, r19
     44a:	6c f5       	brge	.+90     	; 0x4a6 <__stack+0x47>
     44c:	37 01       	movw	r6, r14
     44e:	48 01       	movw	r8, r16
     450:	06 2e       	mov	r0, r22
     452:	04 c0       	rjmp	.+8      	; 0x45c <_fpadd_parts+0xd0>
     454:	96 94       	lsr	r9
     456:	87 94       	ror	r8
     458:	77 94       	ror	r7
     45a:	67 94       	ror	r6
     45c:	0a 94       	dec	r0
     45e:	d2 f7       	brpl	.-12     	; 0x454 <_fpadd_parts+0xc8>
     460:	21 e0       	ldi	r18, 0x01	; 1
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	04 c0       	rjmp	.+8      	; 0x472 <__stack+0x13>
     46a:	22 0f       	add	r18, r18
     46c:	33 1f       	adc	r19, r19
     46e:	44 1f       	adc	r20, r20
     470:	55 1f       	adc	r21, r21
     472:	6a 95       	dec	r22
     474:	d2 f7       	brpl	.-12     	; 0x46a <__stack+0xb>
     476:	21 50       	subi	r18, 0x01	; 1
     478:	30 40       	sbci	r19, 0x00	; 0
     47a:	40 40       	sbci	r20, 0x00	; 0
     47c:	50 40       	sbci	r21, 0x00	; 0
     47e:	2e 21       	and	r18, r14
     480:	3f 21       	and	r19, r15
     482:	40 23       	and	r20, r16
     484:	51 23       	and	r21, r17
     486:	21 15       	cp	r18, r1
     488:	31 05       	cpc	r19, r1
     48a:	41 05       	cpc	r20, r1
     48c:	51 05       	cpc	r21, r1
     48e:	21 f0       	breq	.+8      	; 0x498 <__stack+0x39>
     490:	21 e0       	ldi	r18, 0x01	; 1
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	40 e0       	ldi	r20, 0x00	; 0
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	79 01       	movw	r14, r18
     49a:	8a 01       	movw	r16, r20
     49c:	e6 28       	or	r14, r6
     49e:	f7 28       	or	r15, r7
     4a0:	08 29       	or	r16, r8
     4a2:	19 29       	or	r17, r9
     4a4:	3c c0       	rjmp	.+120    	; 0x51e <__stack+0xbf>
     4a6:	23 2b       	or	r18, r19
     4a8:	d1 f1       	breq	.+116    	; 0x51e <__stack+0xbf>
     4aa:	26 0e       	add	r2, r22
     4ac:	37 1e       	adc	r3, r23
     4ae:	35 01       	movw	r6, r10
     4b0:	46 01       	movw	r8, r12
     4b2:	06 2e       	mov	r0, r22
     4b4:	04 c0       	rjmp	.+8      	; 0x4be <__stack+0x5f>
     4b6:	96 94       	lsr	r9
     4b8:	87 94       	ror	r8
     4ba:	77 94       	ror	r7
     4bc:	67 94       	ror	r6
     4be:	0a 94       	dec	r0
     4c0:	d2 f7       	brpl	.-12     	; 0x4b6 <__stack+0x57>
     4c2:	21 e0       	ldi	r18, 0x01	; 1
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	40 e0       	ldi	r20, 0x00	; 0
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	04 c0       	rjmp	.+8      	; 0x4d4 <__stack+0x75>
     4cc:	22 0f       	add	r18, r18
     4ce:	33 1f       	adc	r19, r19
     4d0:	44 1f       	adc	r20, r20
     4d2:	55 1f       	adc	r21, r21
     4d4:	6a 95       	dec	r22
     4d6:	d2 f7       	brpl	.-12     	; 0x4cc <__stack+0x6d>
     4d8:	21 50       	subi	r18, 0x01	; 1
     4da:	30 40       	sbci	r19, 0x00	; 0
     4dc:	40 40       	sbci	r20, 0x00	; 0
     4de:	50 40       	sbci	r21, 0x00	; 0
     4e0:	2a 21       	and	r18, r10
     4e2:	3b 21       	and	r19, r11
     4e4:	4c 21       	and	r20, r12
     4e6:	5d 21       	and	r21, r13
     4e8:	21 15       	cp	r18, r1
     4ea:	31 05       	cpc	r19, r1
     4ec:	41 05       	cpc	r20, r1
     4ee:	51 05       	cpc	r21, r1
     4f0:	21 f0       	breq	.+8      	; 0x4fa <__stack+0x9b>
     4f2:	21 e0       	ldi	r18, 0x01	; 1
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	59 01       	movw	r10, r18
     4fc:	6a 01       	movw	r12, r20
     4fe:	a6 28       	or	r10, r6
     500:	b7 28       	or	r11, r7
     502:	c8 28       	or	r12, r8
     504:	d9 28       	or	r13, r9
     506:	0b c0       	rjmp	.+22     	; 0x51e <__stack+0xbf>
     508:	82 15       	cp	r24, r2
     50a:	93 05       	cpc	r25, r3
     50c:	2c f0       	brlt	.+10     	; 0x518 <__stack+0xb9>
     50e:	1c 01       	movw	r2, r24
     510:	aa 24       	eor	r10, r10
     512:	bb 24       	eor	r11, r11
     514:	65 01       	movw	r12, r10
     516:	03 c0       	rjmp	.+6      	; 0x51e <__stack+0xbf>
     518:	ee 24       	eor	r14, r14
     51a:	ff 24       	eor	r15, r15
     51c:	87 01       	movw	r16, r14
     51e:	11 96       	adiw	r26, 0x01	; 1
     520:	9c 91       	ld	r25, X
     522:	d2 01       	movw	r26, r4
     524:	11 96       	adiw	r26, 0x01	; 1
     526:	8c 91       	ld	r24, X
     528:	98 17       	cp	r25, r24
     52a:	09 f4       	brne	.+2      	; 0x52e <__stack+0xcf>
     52c:	45 c0       	rjmp	.+138    	; 0x5b8 <__stack+0x159>
     52e:	99 23       	and	r25, r25
     530:	39 f0       	breq	.+14     	; 0x540 <__stack+0xe1>
     532:	a8 01       	movw	r20, r16
     534:	97 01       	movw	r18, r14
     536:	2a 19       	sub	r18, r10
     538:	3b 09       	sbc	r19, r11
     53a:	4c 09       	sbc	r20, r12
     53c:	5d 09       	sbc	r21, r13
     53e:	06 c0       	rjmp	.+12     	; 0x54c <__stack+0xed>
     540:	a6 01       	movw	r20, r12
     542:	95 01       	movw	r18, r10
     544:	2e 19       	sub	r18, r14
     546:	3f 09       	sbc	r19, r15
     548:	40 0b       	sbc	r20, r16
     54a:	51 0b       	sbc	r21, r17
     54c:	57 fd       	sbrc	r21, 7
     54e:	08 c0       	rjmp	.+16     	; 0x560 <__stack+0x101>
     550:	11 82       	std	Z+1, r1	; 0x01
     552:	33 82       	std	Z+3, r3	; 0x03
     554:	22 82       	std	Z+2, r2	; 0x02
     556:	24 83       	std	Z+4, r18	; 0x04
     558:	35 83       	std	Z+5, r19	; 0x05
     55a:	46 83       	std	Z+6, r20	; 0x06
     55c:	57 83       	std	Z+7, r21	; 0x07
     55e:	1d c0       	rjmp	.+58     	; 0x59a <__stack+0x13b>
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	81 83       	std	Z+1, r24	; 0x01
     564:	33 82       	std	Z+3, r3	; 0x03
     566:	22 82       	std	Z+2, r2	; 0x02
     568:	88 27       	eor	r24, r24
     56a:	99 27       	eor	r25, r25
     56c:	dc 01       	movw	r26, r24
     56e:	82 1b       	sub	r24, r18
     570:	93 0b       	sbc	r25, r19
     572:	a4 0b       	sbc	r26, r20
     574:	b5 0b       	sbc	r27, r21
     576:	84 83       	std	Z+4, r24	; 0x04
     578:	95 83       	std	Z+5, r25	; 0x05
     57a:	a6 83       	std	Z+6, r26	; 0x06
     57c:	b7 83       	std	Z+7, r27	; 0x07
     57e:	0d c0       	rjmp	.+26     	; 0x59a <__stack+0x13b>
     580:	22 0f       	add	r18, r18
     582:	33 1f       	adc	r19, r19
     584:	44 1f       	adc	r20, r20
     586:	55 1f       	adc	r21, r21
     588:	24 83       	std	Z+4, r18	; 0x04
     58a:	35 83       	std	Z+5, r19	; 0x05
     58c:	46 83       	std	Z+6, r20	; 0x06
     58e:	57 83       	std	Z+7, r21	; 0x07
     590:	82 81       	ldd	r24, Z+2	; 0x02
     592:	93 81       	ldd	r25, Z+3	; 0x03
     594:	01 97       	sbiw	r24, 0x01	; 1
     596:	93 83       	std	Z+3, r25	; 0x03
     598:	82 83       	std	Z+2, r24	; 0x02
     59a:	24 81       	ldd	r18, Z+4	; 0x04
     59c:	35 81       	ldd	r19, Z+5	; 0x05
     59e:	46 81       	ldd	r20, Z+6	; 0x06
     5a0:	57 81       	ldd	r21, Z+7	; 0x07
     5a2:	da 01       	movw	r26, r20
     5a4:	c9 01       	movw	r24, r18
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	a1 09       	sbc	r26, r1
     5aa:	b1 09       	sbc	r27, r1
     5ac:	8f 5f       	subi	r24, 0xFF	; 255
     5ae:	9f 4f       	sbci	r25, 0xFF	; 255
     5b0:	af 4f       	sbci	r26, 0xFF	; 255
     5b2:	bf 43       	sbci	r27, 0x3F	; 63
     5b4:	28 f3       	brcs	.-54     	; 0x580 <__stack+0x121>
     5b6:	0b c0       	rjmp	.+22     	; 0x5ce <__stack+0x16f>
     5b8:	91 83       	std	Z+1, r25	; 0x01
     5ba:	33 82       	std	Z+3, r3	; 0x03
     5bc:	22 82       	std	Z+2, r2	; 0x02
     5be:	ea 0c       	add	r14, r10
     5c0:	fb 1c       	adc	r15, r11
     5c2:	0c 1d       	adc	r16, r12
     5c4:	1d 1d       	adc	r17, r13
     5c6:	e4 82       	std	Z+4, r14	; 0x04
     5c8:	f5 82       	std	Z+5, r15	; 0x05
     5ca:	06 83       	std	Z+6, r16	; 0x06
     5cc:	17 83       	std	Z+7, r17	; 0x07
     5ce:	83 e0       	ldi	r24, 0x03	; 3
     5d0:	80 83       	st	Z, r24
     5d2:	24 81       	ldd	r18, Z+4	; 0x04
     5d4:	35 81       	ldd	r19, Z+5	; 0x05
     5d6:	46 81       	ldd	r20, Z+6	; 0x06
     5d8:	57 81       	ldd	r21, Z+7	; 0x07
     5da:	57 ff       	sbrs	r21, 7
     5dc:	1a c0       	rjmp	.+52     	; 0x612 <__stack+0x1b3>
     5de:	c9 01       	movw	r24, r18
     5e0:	aa 27       	eor	r26, r26
     5e2:	97 fd       	sbrc	r25, 7
     5e4:	a0 95       	com	r26
     5e6:	ba 2f       	mov	r27, r26
     5e8:	81 70       	andi	r24, 0x01	; 1
     5ea:	90 70       	andi	r25, 0x00	; 0
     5ec:	a0 70       	andi	r26, 0x00	; 0
     5ee:	b0 70       	andi	r27, 0x00	; 0
     5f0:	56 95       	lsr	r21
     5f2:	47 95       	ror	r20
     5f4:	37 95       	ror	r19
     5f6:	27 95       	ror	r18
     5f8:	82 2b       	or	r24, r18
     5fa:	93 2b       	or	r25, r19
     5fc:	a4 2b       	or	r26, r20
     5fe:	b5 2b       	or	r27, r21
     600:	84 83       	std	Z+4, r24	; 0x04
     602:	95 83       	std	Z+5, r25	; 0x05
     604:	a6 83       	std	Z+6, r26	; 0x06
     606:	b7 83       	std	Z+7, r27	; 0x07
     608:	82 81       	ldd	r24, Z+2	; 0x02
     60a:	93 81       	ldd	r25, Z+3	; 0x03
     60c:	01 96       	adiw	r24, 0x01	; 1
     60e:	93 83       	std	Z+3, r25	; 0x03
     610:	82 83       	std	Z+2, r24	; 0x02
     612:	df 01       	movw	r26, r30
     614:	01 c0       	rjmp	.+2      	; 0x618 <__stack+0x1b9>
     616:	d2 01       	movw	r26, r4
     618:	cd 01       	movw	r24, r26
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	e2 e1       	ldi	r30, 0x12	; 18
     620:	0c 94 65 25 	jmp	0x4aca	; 0x4aca <__epilogue_restores__>

00000624 <__subsf3>:
     624:	a0 e2       	ldi	r26, 0x20	; 32
     626:	b0 e0       	ldi	r27, 0x00	; 0
     628:	e8 e1       	ldi	r30, 0x18	; 24
     62a:	f3 e0       	ldi	r31, 0x03	; 3
     62c:	0c 94 55 25 	jmp	0x4aaa	; 0x4aaa <__prologue_saves__+0x18>
     630:	69 83       	std	Y+1, r22	; 0x01
     632:	7a 83       	std	Y+2, r23	; 0x02
     634:	8b 83       	std	Y+3, r24	; 0x03
     636:	9c 83       	std	Y+4, r25	; 0x04
     638:	2d 83       	std	Y+5, r18	; 0x05
     63a:	3e 83       	std	Y+6, r19	; 0x06
     63c:	4f 83       	std	Y+7, r20	; 0x07
     63e:	58 87       	std	Y+8, r21	; 0x08
     640:	e9 e0       	ldi	r30, 0x09	; 9
     642:	ee 2e       	mov	r14, r30
     644:	f1 2c       	mov	r15, r1
     646:	ec 0e       	add	r14, r28
     648:	fd 1e       	adc	r15, r29
     64a:	ce 01       	movw	r24, r28
     64c:	01 96       	adiw	r24, 0x01	; 1
     64e:	b7 01       	movw	r22, r14
     650:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     654:	8e 01       	movw	r16, r28
     656:	0f 5e       	subi	r16, 0xEF	; 239
     658:	1f 4f       	sbci	r17, 0xFF	; 255
     65a:	ce 01       	movw	r24, r28
     65c:	05 96       	adiw	r24, 0x05	; 5
     65e:	b8 01       	movw	r22, r16
     660:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     664:	8a 89       	ldd	r24, Y+18	; 0x12
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	89 27       	eor	r24, r25
     66a:	8a 8b       	std	Y+18, r24	; 0x12
     66c:	c7 01       	movw	r24, r14
     66e:	b8 01       	movw	r22, r16
     670:	ae 01       	movw	r20, r28
     672:	47 5e       	subi	r20, 0xE7	; 231
     674:	5f 4f       	sbci	r21, 0xFF	; 255
     676:	0e 94 c6 01 	call	0x38c	; 0x38c <_fpadd_parts>
     67a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     67e:	a0 96       	adiw	r28, 0x20	; 32
     680:	e6 e0       	ldi	r30, 0x06	; 6
     682:	0c 94 71 25 	jmp	0x4ae2	; 0x4ae2 <__epilogue_restores__+0x18>

00000686 <__addsf3>:
     686:	a0 e2       	ldi	r26, 0x20	; 32
     688:	b0 e0       	ldi	r27, 0x00	; 0
     68a:	e9 e4       	ldi	r30, 0x49	; 73
     68c:	f3 e0       	ldi	r31, 0x03	; 3
     68e:	0c 94 55 25 	jmp	0x4aaa	; 0x4aaa <__prologue_saves__+0x18>
     692:	69 83       	std	Y+1, r22	; 0x01
     694:	7a 83       	std	Y+2, r23	; 0x02
     696:	8b 83       	std	Y+3, r24	; 0x03
     698:	9c 83       	std	Y+4, r25	; 0x04
     69a:	2d 83       	std	Y+5, r18	; 0x05
     69c:	3e 83       	std	Y+6, r19	; 0x06
     69e:	4f 83       	std	Y+7, r20	; 0x07
     6a0:	58 87       	std	Y+8, r21	; 0x08
     6a2:	f9 e0       	ldi	r31, 0x09	; 9
     6a4:	ef 2e       	mov	r14, r31
     6a6:	f1 2c       	mov	r15, r1
     6a8:	ec 0e       	add	r14, r28
     6aa:	fd 1e       	adc	r15, r29
     6ac:	ce 01       	movw	r24, r28
     6ae:	01 96       	adiw	r24, 0x01	; 1
     6b0:	b7 01       	movw	r22, r14
     6b2:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     6b6:	8e 01       	movw	r16, r28
     6b8:	0f 5e       	subi	r16, 0xEF	; 239
     6ba:	1f 4f       	sbci	r17, 0xFF	; 255
     6bc:	ce 01       	movw	r24, r28
     6be:	05 96       	adiw	r24, 0x05	; 5
     6c0:	b8 01       	movw	r22, r16
     6c2:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     6c6:	c7 01       	movw	r24, r14
     6c8:	b8 01       	movw	r22, r16
     6ca:	ae 01       	movw	r20, r28
     6cc:	47 5e       	subi	r20, 0xE7	; 231
     6ce:	5f 4f       	sbci	r21, 0xFF	; 255
     6d0:	0e 94 c6 01 	call	0x38c	; 0x38c <_fpadd_parts>
     6d4:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     6d8:	a0 96       	adiw	r28, 0x20	; 32
     6da:	e6 e0       	ldi	r30, 0x06	; 6
     6dc:	0c 94 71 25 	jmp	0x4ae2	; 0x4ae2 <__epilogue_restores__+0x18>

000006e0 <__mulsf3>:
     6e0:	a0 e2       	ldi	r26, 0x20	; 32
     6e2:	b0 e0       	ldi	r27, 0x00	; 0
     6e4:	e6 e7       	ldi	r30, 0x76	; 118
     6e6:	f3 e0       	ldi	r31, 0x03	; 3
     6e8:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__prologue_saves__>
     6ec:	69 83       	std	Y+1, r22	; 0x01
     6ee:	7a 83       	std	Y+2, r23	; 0x02
     6f0:	8b 83       	std	Y+3, r24	; 0x03
     6f2:	9c 83       	std	Y+4, r25	; 0x04
     6f4:	2d 83       	std	Y+5, r18	; 0x05
     6f6:	3e 83       	std	Y+6, r19	; 0x06
     6f8:	4f 83       	std	Y+7, r20	; 0x07
     6fa:	58 87       	std	Y+8, r21	; 0x08
     6fc:	ce 01       	movw	r24, r28
     6fe:	01 96       	adiw	r24, 0x01	; 1
     700:	be 01       	movw	r22, r28
     702:	67 5f       	subi	r22, 0xF7	; 247
     704:	7f 4f       	sbci	r23, 0xFF	; 255
     706:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     70a:	ce 01       	movw	r24, r28
     70c:	05 96       	adiw	r24, 0x05	; 5
     70e:	be 01       	movw	r22, r28
     710:	6f 5e       	subi	r22, 0xEF	; 239
     712:	7f 4f       	sbci	r23, 0xFF	; 255
     714:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     718:	99 85       	ldd	r25, Y+9	; 0x09
     71a:	92 30       	cpi	r25, 0x02	; 2
     71c:	88 f0       	brcs	.+34     	; 0x740 <__mulsf3+0x60>
     71e:	89 89       	ldd	r24, Y+17	; 0x11
     720:	82 30       	cpi	r24, 0x02	; 2
     722:	c8 f0       	brcs	.+50     	; 0x756 <__mulsf3+0x76>
     724:	94 30       	cpi	r25, 0x04	; 4
     726:	19 f4       	brne	.+6      	; 0x72e <__mulsf3+0x4e>
     728:	82 30       	cpi	r24, 0x02	; 2
     72a:	51 f4       	brne	.+20     	; 0x740 <__mulsf3+0x60>
     72c:	04 c0       	rjmp	.+8      	; 0x736 <__mulsf3+0x56>
     72e:	84 30       	cpi	r24, 0x04	; 4
     730:	29 f4       	brne	.+10     	; 0x73c <__mulsf3+0x5c>
     732:	92 30       	cpi	r25, 0x02	; 2
     734:	81 f4       	brne	.+32     	; 0x756 <__mulsf3+0x76>
     736:	80 e6       	ldi	r24, 0x60	; 96
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	c6 c0       	rjmp	.+396    	; 0x8c8 <__mulsf3+0x1e8>
     73c:	92 30       	cpi	r25, 0x02	; 2
     73e:	49 f4       	brne	.+18     	; 0x752 <__mulsf3+0x72>
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	9a 85       	ldd	r25, Y+10	; 0x0a
     744:	8a 89       	ldd	r24, Y+18	; 0x12
     746:	98 13       	cpse	r25, r24
     748:	21 e0       	ldi	r18, 0x01	; 1
     74a:	2a 87       	std	Y+10, r18	; 0x0a
     74c:	ce 01       	movw	r24, r28
     74e:	09 96       	adiw	r24, 0x09	; 9
     750:	bb c0       	rjmp	.+374    	; 0x8c8 <__mulsf3+0x1e8>
     752:	82 30       	cpi	r24, 0x02	; 2
     754:	49 f4       	brne	.+18     	; 0x768 <__mulsf3+0x88>
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	9a 85       	ldd	r25, Y+10	; 0x0a
     75a:	8a 89       	ldd	r24, Y+18	; 0x12
     75c:	98 13       	cpse	r25, r24
     75e:	21 e0       	ldi	r18, 0x01	; 1
     760:	2a 8b       	std	Y+18, r18	; 0x12
     762:	ce 01       	movw	r24, r28
     764:	41 96       	adiw	r24, 0x11	; 17
     766:	b0 c0       	rjmp	.+352    	; 0x8c8 <__mulsf3+0x1e8>
     768:	2d 84       	ldd	r2, Y+13	; 0x0d
     76a:	3e 84       	ldd	r3, Y+14	; 0x0e
     76c:	4f 84       	ldd	r4, Y+15	; 0x0f
     76e:	58 88       	ldd	r5, Y+16	; 0x10
     770:	6d 88       	ldd	r6, Y+21	; 0x15
     772:	7e 88       	ldd	r7, Y+22	; 0x16
     774:	8f 88       	ldd	r8, Y+23	; 0x17
     776:	98 8c       	ldd	r9, Y+24	; 0x18
     778:	ee 24       	eor	r14, r14
     77a:	ff 24       	eor	r15, r15
     77c:	87 01       	movw	r16, r14
     77e:	aa 24       	eor	r10, r10
     780:	bb 24       	eor	r11, r11
     782:	65 01       	movw	r12, r10
     784:	40 e0       	ldi	r20, 0x00	; 0
     786:	50 e0       	ldi	r21, 0x00	; 0
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	e0 e0       	ldi	r30, 0x00	; 0
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	c1 01       	movw	r24, r2
     792:	81 70       	andi	r24, 0x01	; 1
     794:	90 70       	andi	r25, 0x00	; 0
     796:	89 2b       	or	r24, r25
     798:	e9 f0       	breq	.+58     	; 0x7d4 <__mulsf3+0xf4>
     79a:	e6 0c       	add	r14, r6
     79c:	f7 1c       	adc	r15, r7
     79e:	08 1d       	adc	r16, r8
     7a0:	19 1d       	adc	r17, r9
     7a2:	9a 01       	movw	r18, r20
     7a4:	ab 01       	movw	r20, r22
     7a6:	2a 0d       	add	r18, r10
     7a8:	3b 1d       	adc	r19, r11
     7aa:	4c 1d       	adc	r20, r12
     7ac:	5d 1d       	adc	r21, r13
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	a0 e0       	ldi	r26, 0x00	; 0
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	e6 14       	cp	r14, r6
     7b8:	f7 04       	cpc	r15, r7
     7ba:	08 05       	cpc	r16, r8
     7bc:	19 05       	cpc	r17, r9
     7be:	20 f4       	brcc	.+8      	; 0x7c8 <__mulsf3+0xe8>
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	a0 e0       	ldi	r26, 0x00	; 0
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
     7c8:	ba 01       	movw	r22, r20
     7ca:	a9 01       	movw	r20, r18
     7cc:	48 0f       	add	r20, r24
     7ce:	59 1f       	adc	r21, r25
     7d0:	6a 1f       	adc	r22, r26
     7d2:	7b 1f       	adc	r23, r27
     7d4:	aa 0c       	add	r10, r10
     7d6:	bb 1c       	adc	r11, r11
     7d8:	cc 1c       	adc	r12, r12
     7da:	dd 1c       	adc	r13, r13
     7dc:	97 fe       	sbrs	r9, 7
     7de:	08 c0       	rjmp	.+16     	; 0x7f0 <__mulsf3+0x110>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	a0 e0       	ldi	r26, 0x00	; 0
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	a8 2a       	or	r10, r24
     7ea:	b9 2a       	or	r11, r25
     7ec:	ca 2a       	or	r12, r26
     7ee:	db 2a       	or	r13, r27
     7f0:	31 96       	adiw	r30, 0x01	; 1
     7f2:	e0 32       	cpi	r30, 0x20	; 32
     7f4:	f1 05       	cpc	r31, r1
     7f6:	49 f0       	breq	.+18     	; 0x80a <__mulsf3+0x12a>
     7f8:	66 0c       	add	r6, r6
     7fa:	77 1c       	adc	r7, r7
     7fc:	88 1c       	adc	r8, r8
     7fe:	99 1c       	adc	r9, r9
     800:	56 94       	lsr	r5
     802:	47 94       	ror	r4
     804:	37 94       	ror	r3
     806:	27 94       	ror	r2
     808:	c3 cf       	rjmp	.-122    	; 0x790 <__mulsf3+0xb0>
     80a:	fa 85       	ldd	r31, Y+10	; 0x0a
     80c:	ea 89       	ldd	r30, Y+18	; 0x12
     80e:	2b 89       	ldd	r18, Y+19	; 0x13
     810:	3c 89       	ldd	r19, Y+20	; 0x14
     812:	8b 85       	ldd	r24, Y+11	; 0x0b
     814:	9c 85       	ldd	r25, Y+12	; 0x0c
     816:	28 0f       	add	r18, r24
     818:	39 1f       	adc	r19, r25
     81a:	2e 5f       	subi	r18, 0xFE	; 254
     81c:	3f 4f       	sbci	r19, 0xFF	; 255
     81e:	17 c0       	rjmp	.+46     	; 0x84e <__mulsf3+0x16e>
     820:	ca 01       	movw	r24, r20
     822:	81 70       	andi	r24, 0x01	; 1
     824:	90 70       	andi	r25, 0x00	; 0
     826:	89 2b       	or	r24, r25
     828:	61 f0       	breq	.+24     	; 0x842 <__mulsf3+0x162>
     82a:	16 95       	lsr	r17
     82c:	07 95       	ror	r16
     82e:	f7 94       	ror	r15
     830:	e7 94       	ror	r14
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	a0 e0       	ldi	r26, 0x00	; 0
     838:	b0 e8       	ldi	r27, 0x80	; 128
     83a:	e8 2a       	or	r14, r24
     83c:	f9 2a       	or	r15, r25
     83e:	0a 2b       	or	r16, r26
     840:	1b 2b       	or	r17, r27
     842:	76 95       	lsr	r23
     844:	67 95       	ror	r22
     846:	57 95       	ror	r21
     848:	47 95       	ror	r20
     84a:	2f 5f       	subi	r18, 0xFF	; 255
     84c:	3f 4f       	sbci	r19, 0xFF	; 255
     84e:	77 fd       	sbrc	r23, 7
     850:	e7 cf       	rjmp	.-50     	; 0x820 <__mulsf3+0x140>
     852:	0c c0       	rjmp	.+24     	; 0x86c <__mulsf3+0x18c>
     854:	44 0f       	add	r20, r20
     856:	55 1f       	adc	r21, r21
     858:	66 1f       	adc	r22, r22
     85a:	77 1f       	adc	r23, r23
     85c:	17 fd       	sbrc	r17, 7
     85e:	41 60       	ori	r20, 0x01	; 1
     860:	ee 0c       	add	r14, r14
     862:	ff 1c       	adc	r15, r15
     864:	00 1f       	adc	r16, r16
     866:	11 1f       	adc	r17, r17
     868:	21 50       	subi	r18, 0x01	; 1
     86a:	30 40       	sbci	r19, 0x00	; 0
     86c:	40 30       	cpi	r20, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	59 07       	cpc	r21, r25
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	69 07       	cpc	r22, r25
     876:	90 e4       	ldi	r25, 0x40	; 64
     878:	79 07       	cpc	r23, r25
     87a:	60 f3       	brcs	.-40     	; 0x854 <__mulsf3+0x174>
     87c:	2b 8f       	std	Y+27, r18	; 0x1b
     87e:	3c 8f       	std	Y+28, r19	; 0x1c
     880:	db 01       	movw	r26, r22
     882:	ca 01       	movw	r24, r20
     884:	8f 77       	andi	r24, 0x7F	; 127
     886:	90 70       	andi	r25, 0x00	; 0
     888:	a0 70       	andi	r26, 0x00	; 0
     88a:	b0 70       	andi	r27, 0x00	; 0
     88c:	80 34       	cpi	r24, 0x40	; 64
     88e:	91 05       	cpc	r25, r1
     890:	a1 05       	cpc	r26, r1
     892:	b1 05       	cpc	r27, r1
     894:	61 f4       	brne	.+24     	; 0x8ae <__mulsf3+0x1ce>
     896:	47 fd       	sbrc	r20, 7
     898:	0a c0       	rjmp	.+20     	; 0x8ae <__mulsf3+0x1ce>
     89a:	e1 14       	cp	r14, r1
     89c:	f1 04       	cpc	r15, r1
     89e:	01 05       	cpc	r16, r1
     8a0:	11 05       	cpc	r17, r1
     8a2:	29 f0       	breq	.+10     	; 0x8ae <__mulsf3+0x1ce>
     8a4:	40 5c       	subi	r20, 0xC0	; 192
     8a6:	5f 4f       	sbci	r21, 0xFF	; 255
     8a8:	6f 4f       	sbci	r22, 0xFF	; 255
     8aa:	7f 4f       	sbci	r23, 0xFF	; 255
     8ac:	40 78       	andi	r20, 0x80	; 128
     8ae:	1a 8e       	std	Y+26, r1	; 0x1a
     8b0:	fe 17       	cp	r31, r30
     8b2:	11 f0       	breq	.+4      	; 0x8b8 <__mulsf3+0x1d8>
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	8a 8f       	std	Y+26, r24	; 0x1a
     8b8:	4d 8f       	std	Y+29, r20	; 0x1d
     8ba:	5e 8f       	std	Y+30, r21	; 0x1e
     8bc:	6f 8f       	std	Y+31, r22	; 0x1f
     8be:	78 a3       	std	Y+32, r23	; 0x20
     8c0:	83 e0       	ldi	r24, 0x03	; 3
     8c2:	89 8f       	std	Y+25, r24	; 0x19
     8c4:	ce 01       	movw	r24, r28
     8c6:	49 96       	adiw	r24, 0x19	; 25
     8c8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__pack_f>
     8cc:	a0 96       	adiw	r28, 0x20	; 32
     8ce:	e2 e1       	ldi	r30, 0x12	; 18
     8d0:	0c 94 65 25 	jmp	0x4aca	; 0x4aca <__epilogue_restores__>

000008d4 <__gtsf2>:
     8d4:	a8 e1       	ldi	r26, 0x18	; 24
     8d6:	b0 e0       	ldi	r27, 0x00	; 0
     8d8:	e0 e7       	ldi	r30, 0x70	; 112
     8da:	f4 e0       	ldi	r31, 0x04	; 4
     8dc:	0c 94 55 25 	jmp	0x4aaa	; 0x4aaa <__prologue_saves__+0x18>
     8e0:	69 83       	std	Y+1, r22	; 0x01
     8e2:	7a 83       	std	Y+2, r23	; 0x02
     8e4:	8b 83       	std	Y+3, r24	; 0x03
     8e6:	9c 83       	std	Y+4, r25	; 0x04
     8e8:	2d 83       	std	Y+5, r18	; 0x05
     8ea:	3e 83       	std	Y+6, r19	; 0x06
     8ec:	4f 83       	std	Y+7, r20	; 0x07
     8ee:	58 87       	std	Y+8, r21	; 0x08
     8f0:	89 e0       	ldi	r24, 0x09	; 9
     8f2:	e8 2e       	mov	r14, r24
     8f4:	f1 2c       	mov	r15, r1
     8f6:	ec 0e       	add	r14, r28
     8f8:	fd 1e       	adc	r15, r29
     8fa:	ce 01       	movw	r24, r28
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	b7 01       	movw	r22, r14
     900:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     904:	8e 01       	movw	r16, r28
     906:	0f 5e       	subi	r16, 0xEF	; 239
     908:	1f 4f       	sbci	r17, 0xFF	; 255
     90a:	ce 01       	movw	r24, r28
     90c:	05 96       	adiw	r24, 0x05	; 5
     90e:	b8 01       	movw	r22, r16
     910:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     914:	89 85       	ldd	r24, Y+9	; 0x09
     916:	82 30       	cpi	r24, 0x02	; 2
     918:	40 f0       	brcs	.+16     	; 0x92a <__gtsf2+0x56>
     91a:	89 89       	ldd	r24, Y+17	; 0x11
     91c:	82 30       	cpi	r24, 0x02	; 2
     91e:	28 f0       	brcs	.+10     	; 0x92a <__gtsf2+0x56>
     920:	c7 01       	movw	r24, r14
     922:	b8 01       	movw	r22, r16
     924:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     928:	01 c0       	rjmp	.+2      	; 0x92c <__gtsf2+0x58>
     92a:	8f ef       	ldi	r24, 0xFF	; 255
     92c:	68 96       	adiw	r28, 0x18	; 24
     92e:	e6 e0       	ldi	r30, 0x06	; 6
     930:	0c 94 71 25 	jmp	0x4ae2	; 0x4ae2 <__epilogue_restores__+0x18>

00000934 <__gesf2>:
     934:	a8 e1       	ldi	r26, 0x18	; 24
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	e0 ea       	ldi	r30, 0xA0	; 160
     93a:	f4 e0       	ldi	r31, 0x04	; 4
     93c:	0c 94 55 25 	jmp	0x4aaa	; 0x4aaa <__prologue_saves__+0x18>
     940:	69 83       	std	Y+1, r22	; 0x01
     942:	7a 83       	std	Y+2, r23	; 0x02
     944:	8b 83       	std	Y+3, r24	; 0x03
     946:	9c 83       	std	Y+4, r25	; 0x04
     948:	2d 83       	std	Y+5, r18	; 0x05
     94a:	3e 83       	std	Y+6, r19	; 0x06
     94c:	4f 83       	std	Y+7, r20	; 0x07
     94e:	58 87       	std	Y+8, r21	; 0x08
     950:	89 e0       	ldi	r24, 0x09	; 9
     952:	e8 2e       	mov	r14, r24
     954:	f1 2c       	mov	r15, r1
     956:	ec 0e       	add	r14, r28
     958:	fd 1e       	adc	r15, r29
     95a:	ce 01       	movw	r24, r28
     95c:	01 96       	adiw	r24, 0x01	; 1
     95e:	b7 01       	movw	r22, r14
     960:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     964:	8e 01       	movw	r16, r28
     966:	0f 5e       	subi	r16, 0xEF	; 239
     968:	1f 4f       	sbci	r17, 0xFF	; 255
     96a:	ce 01       	movw	r24, r28
     96c:	05 96       	adiw	r24, 0x05	; 5
     96e:	b8 01       	movw	r22, r16
     970:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     974:	89 85       	ldd	r24, Y+9	; 0x09
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	40 f0       	brcs	.+16     	; 0x98a <__gesf2+0x56>
     97a:	89 89       	ldd	r24, Y+17	; 0x11
     97c:	82 30       	cpi	r24, 0x02	; 2
     97e:	28 f0       	brcs	.+10     	; 0x98a <__gesf2+0x56>
     980:	c7 01       	movw	r24, r14
     982:	b8 01       	movw	r22, r16
     984:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     988:	01 c0       	rjmp	.+2      	; 0x98c <__gesf2+0x58>
     98a:	8f ef       	ldi	r24, 0xFF	; 255
     98c:	68 96       	adiw	r28, 0x18	; 24
     98e:	e6 e0       	ldi	r30, 0x06	; 6
     990:	0c 94 71 25 	jmp	0x4ae2	; 0x4ae2 <__epilogue_restores__+0x18>

00000994 <__ltsf2>:
     994:	a8 e1       	ldi	r26, 0x18	; 24
     996:	b0 e0       	ldi	r27, 0x00	; 0
     998:	e0 ed       	ldi	r30, 0xD0	; 208
     99a:	f4 e0       	ldi	r31, 0x04	; 4
     99c:	0c 94 55 25 	jmp	0x4aaa	; 0x4aaa <__prologue_saves__+0x18>
     9a0:	69 83       	std	Y+1, r22	; 0x01
     9a2:	7a 83       	std	Y+2, r23	; 0x02
     9a4:	8b 83       	std	Y+3, r24	; 0x03
     9a6:	9c 83       	std	Y+4, r25	; 0x04
     9a8:	2d 83       	std	Y+5, r18	; 0x05
     9aa:	3e 83       	std	Y+6, r19	; 0x06
     9ac:	4f 83       	std	Y+7, r20	; 0x07
     9ae:	58 87       	std	Y+8, r21	; 0x08
     9b0:	89 e0       	ldi	r24, 0x09	; 9
     9b2:	e8 2e       	mov	r14, r24
     9b4:	f1 2c       	mov	r15, r1
     9b6:	ec 0e       	add	r14, r28
     9b8:	fd 1e       	adc	r15, r29
     9ba:	ce 01       	movw	r24, r28
     9bc:	01 96       	adiw	r24, 0x01	; 1
     9be:	b7 01       	movw	r22, r14
     9c0:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     9c4:	8e 01       	movw	r16, r28
     9c6:	0f 5e       	subi	r16, 0xEF	; 239
     9c8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ca:	ce 01       	movw	r24, r28
     9cc:	05 96       	adiw	r24, 0x05	; 5
     9ce:	b8 01       	movw	r22, r16
     9d0:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     9d4:	89 85       	ldd	r24, Y+9	; 0x09
     9d6:	82 30       	cpi	r24, 0x02	; 2
     9d8:	40 f0       	brcs	.+16     	; 0x9ea <__ltsf2+0x56>
     9da:	89 89       	ldd	r24, Y+17	; 0x11
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	28 f0       	brcs	.+10     	; 0x9ea <__ltsf2+0x56>
     9e0:	c7 01       	movw	r24, r14
     9e2:	b8 01       	movw	r22, r16
     9e4:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fpcmp_parts_f>
     9e8:	01 c0       	rjmp	.+2      	; 0x9ec <__ltsf2+0x58>
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	68 96       	adiw	r28, 0x18	; 24
     9ee:	e6 e0       	ldi	r30, 0x06	; 6
     9f0:	0c 94 71 25 	jmp	0x4ae2	; 0x4ae2 <__epilogue_restores__+0x18>

000009f4 <__fixsfsi>:
     9f4:	ac e0       	ldi	r26, 0x0C	; 12
     9f6:	b0 e0       	ldi	r27, 0x00	; 0
     9f8:	e0 e0       	ldi	r30, 0x00	; 0
     9fa:	f5 e0       	ldi	r31, 0x05	; 5
     9fc:	0c 94 59 25 	jmp	0x4ab2	; 0x4ab2 <__prologue_saves__+0x20>
     a00:	69 83       	std	Y+1, r22	; 0x01
     a02:	7a 83       	std	Y+2, r23	; 0x02
     a04:	8b 83       	std	Y+3, r24	; 0x03
     a06:	9c 83       	std	Y+4, r25	; 0x04
     a08:	ce 01       	movw	r24, r28
     a0a:	01 96       	adiw	r24, 0x01	; 1
     a0c:	be 01       	movw	r22, r28
     a0e:	6b 5f       	subi	r22, 0xFB	; 251
     a10:	7f 4f       	sbci	r23, 0xFF	; 255
     a12:	0e 94 23 06 	call	0xc46	; 0xc46 <__unpack_f>
     a16:	8d 81       	ldd	r24, Y+5	; 0x05
     a18:	82 30       	cpi	r24, 0x02	; 2
     a1a:	61 f1       	breq	.+88     	; 0xa74 <__fixsfsi+0x80>
     a1c:	82 30       	cpi	r24, 0x02	; 2
     a1e:	50 f1       	brcs	.+84     	; 0xa74 <__fixsfsi+0x80>
     a20:	84 30       	cpi	r24, 0x04	; 4
     a22:	21 f4       	brne	.+8      	; 0xa2c <__fixsfsi+0x38>
     a24:	8e 81       	ldd	r24, Y+6	; 0x06
     a26:	88 23       	and	r24, r24
     a28:	51 f1       	breq	.+84     	; 0xa7e <__fixsfsi+0x8a>
     a2a:	2e c0       	rjmp	.+92     	; 0xa88 <__fixsfsi+0x94>
     a2c:	2f 81       	ldd	r18, Y+7	; 0x07
     a2e:	38 85       	ldd	r19, Y+8	; 0x08
     a30:	37 fd       	sbrc	r19, 7
     a32:	20 c0       	rjmp	.+64     	; 0xa74 <__fixsfsi+0x80>
     a34:	6e 81       	ldd	r22, Y+6	; 0x06
     a36:	2f 31       	cpi	r18, 0x1F	; 31
     a38:	31 05       	cpc	r19, r1
     a3a:	1c f0       	brlt	.+6      	; 0xa42 <__fixsfsi+0x4e>
     a3c:	66 23       	and	r22, r22
     a3e:	f9 f0       	breq	.+62     	; 0xa7e <__fixsfsi+0x8a>
     a40:	23 c0       	rjmp	.+70     	; 0xa88 <__fixsfsi+0x94>
     a42:	8e e1       	ldi	r24, 0x1E	; 30
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	82 1b       	sub	r24, r18
     a48:	93 0b       	sbc	r25, r19
     a4a:	29 85       	ldd	r18, Y+9	; 0x09
     a4c:	3a 85       	ldd	r19, Y+10	; 0x0a
     a4e:	4b 85       	ldd	r20, Y+11	; 0x0b
     a50:	5c 85       	ldd	r21, Y+12	; 0x0c
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__fixsfsi+0x68>
     a54:	56 95       	lsr	r21
     a56:	47 95       	ror	r20
     a58:	37 95       	ror	r19
     a5a:	27 95       	ror	r18
     a5c:	8a 95       	dec	r24
     a5e:	d2 f7       	brpl	.-12     	; 0xa54 <__fixsfsi+0x60>
     a60:	66 23       	and	r22, r22
     a62:	b1 f0       	breq	.+44     	; 0xa90 <__fixsfsi+0x9c>
     a64:	50 95       	com	r21
     a66:	40 95       	com	r20
     a68:	30 95       	com	r19
     a6a:	21 95       	neg	r18
     a6c:	3f 4f       	sbci	r19, 0xFF	; 255
     a6e:	4f 4f       	sbci	r20, 0xFF	; 255
     a70:	5f 4f       	sbci	r21, 0xFF	; 255
     a72:	0e c0       	rjmp	.+28     	; 0xa90 <__fixsfsi+0x9c>
     a74:	20 e0       	ldi	r18, 0x00	; 0
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	40 e0       	ldi	r20, 0x00	; 0
     a7a:	50 e0       	ldi	r21, 0x00	; 0
     a7c:	09 c0       	rjmp	.+18     	; 0xa90 <__fixsfsi+0x9c>
     a7e:	2f ef       	ldi	r18, 0xFF	; 255
     a80:	3f ef       	ldi	r19, 0xFF	; 255
     a82:	4f ef       	ldi	r20, 0xFF	; 255
     a84:	5f e7       	ldi	r21, 0x7F	; 127
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__fixsfsi+0x9c>
     a88:	20 e0       	ldi	r18, 0x00	; 0
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	40 e0       	ldi	r20, 0x00	; 0
     a8e:	50 e8       	ldi	r21, 0x80	; 128
     a90:	b9 01       	movw	r22, r18
     a92:	ca 01       	movw	r24, r20
     a94:	2c 96       	adiw	r28, 0x0c	; 12
     a96:	e2 e0       	ldi	r30, 0x02	; 2
     a98:	0c 94 75 25 	jmp	0x4aea	; 0x4aea <__epilogue_restores__+0x20>

00000a9c <__pack_f>:
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	fc 01       	movw	r30, r24
     aa8:	e4 80       	ldd	r14, Z+4	; 0x04
     aaa:	f5 80       	ldd	r15, Z+5	; 0x05
     aac:	06 81       	ldd	r16, Z+6	; 0x06
     aae:	17 81       	ldd	r17, Z+7	; 0x07
     ab0:	d1 80       	ldd	r13, Z+1	; 0x01
     ab2:	80 81       	ld	r24, Z
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	48 f4       	brcc	.+18     	; 0xaca <__pack_f+0x2e>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	a0 e1       	ldi	r26, 0x10	; 16
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e8 2a       	or	r14, r24
     ac2:	f9 2a       	or	r15, r25
     ac4:	0a 2b       	or	r16, r26
     ac6:	1b 2b       	or	r17, r27
     ac8:	a5 c0       	rjmp	.+330    	; 0xc14 <__pack_f+0x178>
     aca:	84 30       	cpi	r24, 0x04	; 4
     acc:	09 f4       	brne	.+2      	; 0xad0 <__pack_f+0x34>
     ace:	9f c0       	rjmp	.+318    	; 0xc0e <__pack_f+0x172>
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	21 f4       	brne	.+8      	; 0xadc <__pack_f+0x40>
     ad4:	ee 24       	eor	r14, r14
     ad6:	ff 24       	eor	r15, r15
     ad8:	87 01       	movw	r16, r14
     ada:	05 c0       	rjmp	.+10     	; 0xae6 <__pack_f+0x4a>
     adc:	e1 14       	cp	r14, r1
     ade:	f1 04       	cpc	r15, r1
     ae0:	01 05       	cpc	r16, r1
     ae2:	11 05       	cpc	r17, r1
     ae4:	19 f4       	brne	.+6      	; 0xaec <__pack_f+0x50>
     ae6:	e0 e0       	ldi	r30, 0x00	; 0
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	96 c0       	rjmp	.+300    	; 0xc18 <__pack_f+0x17c>
     aec:	62 81       	ldd	r22, Z+2	; 0x02
     aee:	73 81       	ldd	r23, Z+3	; 0x03
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	62 38       	cpi	r22, 0x82	; 130
     af4:	79 07       	cpc	r23, r25
     af6:	0c f0       	brlt	.+2      	; 0xafa <__pack_f+0x5e>
     af8:	5b c0       	rjmp	.+182    	; 0xbb0 <__pack_f+0x114>
     afa:	22 e8       	ldi	r18, 0x82	; 130
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	26 1b       	sub	r18, r22
     b00:	37 0b       	sbc	r19, r23
     b02:	2a 31       	cpi	r18, 0x1A	; 26
     b04:	31 05       	cpc	r19, r1
     b06:	2c f0       	brlt	.+10     	; 0xb12 <__pack_f+0x76>
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	2a c0       	rjmp	.+84     	; 0xb66 <__pack_f+0xca>
     b12:	b8 01       	movw	r22, r16
     b14:	a7 01       	movw	r20, r14
     b16:	02 2e       	mov	r0, r18
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__pack_f+0x86>
     b1a:	76 95       	lsr	r23
     b1c:	67 95       	ror	r22
     b1e:	57 95       	ror	r21
     b20:	47 95       	ror	r20
     b22:	0a 94       	dec	r0
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__pack_f+0x7e>
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__pack_f+0x9c>
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	aa 1f       	adc	r26, r26
     b36:	bb 1f       	adc	r27, r27
     b38:	2a 95       	dec	r18
     b3a:	d2 f7       	brpl	.-12     	; 0xb30 <__pack_f+0x94>
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	a1 09       	sbc	r26, r1
     b40:	b1 09       	sbc	r27, r1
     b42:	8e 21       	and	r24, r14
     b44:	9f 21       	and	r25, r15
     b46:	a0 23       	and	r26, r16
     b48:	b1 23       	and	r27, r17
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	a1 05       	cpc	r26, r1
     b4e:	b1 05       	cpc	r27, r1
     b50:	21 f0       	breq	.+8      	; 0xb5a <__pack_f+0xbe>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	9a 01       	movw	r18, r20
     b5c:	ab 01       	movw	r20, r22
     b5e:	28 2b       	or	r18, r24
     b60:	39 2b       	or	r19, r25
     b62:	4a 2b       	or	r20, r26
     b64:	5b 2b       	or	r21, r27
     b66:	da 01       	movw	r26, r20
     b68:	c9 01       	movw	r24, r18
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0xee>
     b7c:	27 ff       	sbrs	r18, 7
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <__pack_f+0xf6>
     b80:	20 5c       	subi	r18, 0xC0	; 192
     b82:	3f 4f       	sbci	r19, 0xFF	; 255
     b84:	4f 4f       	sbci	r20, 0xFF	; 255
     b86:	5f 4f       	sbci	r21, 0xFF	; 255
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0xf6>
     b8a:	21 5c       	subi	r18, 0xC1	; 193
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	4f 4f       	sbci	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	e0 e0       	ldi	r30, 0x00	; 0
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	20 30       	cpi	r18, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	3a 07       	cpc	r19, r26
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	4a 07       	cpc	r20, r26
     ba0:	a0 e4       	ldi	r26, 0x40	; 64
     ba2:	5a 07       	cpc	r21, r26
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <__pack_f+0x10e>
     ba6:	e1 e0       	ldi	r30, 0x01	; 1
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	79 01       	movw	r14, r18
     bac:	8a 01       	movw	r16, r20
     bae:	27 c0       	rjmp	.+78     	; 0xbfe <__pack_f+0x162>
     bb0:	60 38       	cpi	r22, 0x80	; 128
     bb2:	71 05       	cpc	r23, r1
     bb4:	64 f5       	brge	.+88     	; 0xc0e <__pack_f+0x172>
     bb6:	fb 01       	movw	r30, r22
     bb8:	e1 58       	subi	r30, 0x81	; 129
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	d8 01       	movw	r26, r16
     bbe:	c7 01       	movw	r24, r14
     bc0:	8f 77       	andi	r24, 0x7F	; 127
     bc2:	90 70       	andi	r25, 0x00	; 0
     bc4:	a0 70       	andi	r26, 0x00	; 0
     bc6:	b0 70       	andi	r27, 0x00	; 0
     bc8:	80 34       	cpi	r24, 0x40	; 64
     bca:	91 05       	cpc	r25, r1
     bcc:	a1 05       	cpc	r26, r1
     bce:	b1 05       	cpc	r27, r1
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <__pack_f+0x144>
     bd2:	e7 fe       	sbrs	r14, 7
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <__pack_f+0x154>
     bd6:	80 e4       	ldi	r24, 0x40	; 64
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <__pack_f+0x14c>
     be0:	8f e3       	ldi	r24, 0x3F	; 63
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e8 0e       	add	r14, r24
     bea:	f9 1e       	adc	r15, r25
     bec:	0a 1f       	adc	r16, r26
     bee:	1b 1f       	adc	r17, r27
     bf0:	17 ff       	sbrs	r17, 7
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x162>
     bf4:	16 95       	lsr	r17
     bf6:	07 95       	ror	r16
     bf8:	f7 94       	ror	r15
     bfa:	e7 94       	ror	r14
     bfc:	31 96       	adiw	r30, 0x01	; 1
     bfe:	87 e0       	ldi	r24, 0x07	; 7
     c00:	16 95       	lsr	r17
     c02:	07 95       	ror	r16
     c04:	f7 94       	ror	r15
     c06:	e7 94       	ror	r14
     c08:	8a 95       	dec	r24
     c0a:	d1 f7       	brne	.-12     	; 0xc00 <__pack_f+0x164>
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <__pack_f+0x17c>
     c0e:	ee 24       	eor	r14, r14
     c10:	ff 24       	eor	r15, r15
     c12:	87 01       	movw	r16, r14
     c14:	ef ef       	ldi	r30, 0xFF	; 255
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	6e 2f       	mov	r22, r30
     c1a:	67 95       	ror	r22
     c1c:	66 27       	eor	r22, r22
     c1e:	67 95       	ror	r22
     c20:	90 2f       	mov	r25, r16
     c22:	9f 77       	andi	r25, 0x7F	; 127
     c24:	d7 94       	ror	r13
     c26:	dd 24       	eor	r13, r13
     c28:	d7 94       	ror	r13
     c2a:	8e 2f       	mov	r24, r30
     c2c:	86 95       	lsr	r24
     c2e:	49 2f       	mov	r20, r25
     c30:	46 2b       	or	r20, r22
     c32:	58 2f       	mov	r21, r24
     c34:	5d 29       	or	r21, r13
     c36:	b7 01       	movw	r22, r14
     c38:	ca 01       	movw	r24, r20
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	08 95       	ret

00000c46 <__unpack_f>:
     c46:	fc 01       	movw	r30, r24
     c48:	db 01       	movw	r26, r22
     c4a:	40 81       	ld	r20, Z
     c4c:	51 81       	ldd	r21, Z+1	; 0x01
     c4e:	22 81       	ldd	r18, Z+2	; 0x02
     c50:	62 2f       	mov	r22, r18
     c52:	6f 77       	andi	r22, 0x7F	; 127
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	22 1f       	adc	r18, r18
     c58:	22 27       	eor	r18, r18
     c5a:	22 1f       	adc	r18, r18
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	89 2f       	mov	r24, r25
     c60:	88 0f       	add	r24, r24
     c62:	82 2b       	or	r24, r18
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	99 1f       	adc	r25, r25
     c6a:	99 27       	eor	r25, r25
     c6c:	99 1f       	adc	r25, r25
     c6e:	11 96       	adiw	r26, 0x01	; 1
     c70:	9c 93       	st	X, r25
     c72:	11 97       	sbiw	r26, 0x01	; 1
     c74:	21 15       	cp	r18, r1
     c76:	31 05       	cpc	r19, r1
     c78:	a9 f5       	brne	.+106    	; 0xce4 <__unpack_f+0x9e>
     c7a:	41 15       	cp	r20, r1
     c7c:	51 05       	cpc	r21, r1
     c7e:	61 05       	cpc	r22, r1
     c80:	71 05       	cpc	r23, r1
     c82:	11 f4       	brne	.+4      	; 0xc88 <__unpack_f+0x42>
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	37 c0       	rjmp	.+110    	; 0xcf6 <__unpack_f+0xb0>
     c88:	82 e8       	ldi	r24, 0x82	; 130
     c8a:	9f ef       	ldi	r25, 0xFF	; 255
     c8c:	13 96       	adiw	r26, 0x03	; 3
     c8e:	9c 93       	st	X, r25
     c90:	8e 93       	st	-X, r24
     c92:	12 97       	sbiw	r26, 0x02	; 2
     c94:	9a 01       	movw	r18, r20
     c96:	ab 01       	movw	r20, r22
     c98:	67 e0       	ldi	r22, 0x07	; 7
     c9a:	22 0f       	add	r18, r18
     c9c:	33 1f       	adc	r19, r19
     c9e:	44 1f       	adc	r20, r20
     ca0:	55 1f       	adc	r21, r21
     ca2:	6a 95       	dec	r22
     ca4:	d1 f7       	brne	.-12     	; 0xc9a <__unpack_f+0x54>
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	8c 93       	st	X, r24
     caa:	0d c0       	rjmp	.+26     	; 0xcc6 <__unpack_f+0x80>
     cac:	22 0f       	add	r18, r18
     cae:	33 1f       	adc	r19, r19
     cb0:	44 1f       	adc	r20, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	12 96       	adiw	r26, 0x02	; 2
     cb6:	8d 91       	ld	r24, X+
     cb8:	9c 91       	ld	r25, X
     cba:	13 97       	sbiw	r26, 0x03	; 3
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	13 96       	adiw	r26, 0x03	; 3
     cc0:	9c 93       	st	X, r25
     cc2:	8e 93       	st	-X, r24
     cc4:	12 97       	sbiw	r26, 0x02	; 2
     cc6:	20 30       	cpi	r18, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	38 07       	cpc	r19, r24
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	48 07       	cpc	r20, r24
     cd0:	80 e4       	ldi	r24, 0x40	; 64
     cd2:	58 07       	cpc	r21, r24
     cd4:	58 f3       	brcs	.-42     	; 0xcac <__unpack_f+0x66>
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	2d 93       	st	X+, r18
     cda:	3d 93       	st	X+, r19
     cdc:	4d 93       	st	X+, r20
     cde:	5c 93       	st	X, r21
     ce0:	17 97       	sbiw	r26, 0x07	; 7
     ce2:	08 95       	ret
     ce4:	2f 3f       	cpi	r18, 0xFF	; 255
     ce6:	31 05       	cpc	r19, r1
     ce8:	79 f4       	brne	.+30     	; 0xd08 <__unpack_f+0xc2>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	19 f4       	brne	.+6      	; 0xcfa <__unpack_f+0xb4>
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	8c 93       	st	X, r24
     cf8:	08 95       	ret
     cfa:	64 ff       	sbrs	r22, 4
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <__unpack_f+0xbe>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	8c 93       	st	X, r24
     d02:	12 c0       	rjmp	.+36     	; 0xd28 <__unpack_f+0xe2>
     d04:	1c 92       	st	X, r1
     d06:	10 c0       	rjmp	.+32     	; 0xd28 <__unpack_f+0xe2>
     d08:	2f 57       	subi	r18, 0x7F	; 127
     d0a:	30 40       	sbci	r19, 0x00	; 0
     d0c:	13 96       	adiw	r26, 0x03	; 3
     d0e:	3c 93       	st	X, r19
     d10:	2e 93       	st	-X, r18
     d12:	12 97       	sbiw	r26, 0x02	; 2
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	8c 93       	st	X, r24
     d18:	87 e0       	ldi	r24, 0x07	; 7
     d1a:	44 0f       	add	r20, r20
     d1c:	55 1f       	adc	r21, r21
     d1e:	66 1f       	adc	r22, r22
     d20:	77 1f       	adc	r23, r23
     d22:	8a 95       	dec	r24
     d24:	d1 f7       	brne	.-12     	; 0xd1a <__unpack_f+0xd4>
     d26:	70 64       	ori	r23, 0x40	; 64
     d28:	14 96       	adiw	r26, 0x04	; 4
     d2a:	4d 93       	st	X+, r20
     d2c:	5d 93       	st	X+, r21
     d2e:	6d 93       	st	X+, r22
     d30:	7c 93       	st	X, r23
     d32:	17 97       	sbiw	r26, 0x07	; 7
     d34:	08 95       	ret

00000d36 <__fpcmp_parts_f>:
     d36:	1f 93       	push	r17
     d38:	dc 01       	movw	r26, r24
     d3a:	fb 01       	movw	r30, r22
     d3c:	9c 91       	ld	r25, X
     d3e:	92 30       	cpi	r25, 0x02	; 2
     d40:	08 f4       	brcc	.+2      	; 0xd44 <__fpcmp_parts_f+0xe>
     d42:	47 c0       	rjmp	.+142    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d44:	80 81       	ld	r24, Z
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	08 f4       	brcc	.+2      	; 0xd4c <__fpcmp_parts_f+0x16>
     d4a:	43 c0       	rjmp	.+134    	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d4c:	94 30       	cpi	r25, 0x04	; 4
     d4e:	51 f4       	brne	.+20     	; 0xd64 <__fpcmp_parts_f+0x2e>
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	1c 91       	ld	r17, X
     d54:	84 30       	cpi	r24, 0x04	; 4
     d56:	99 f5       	brne	.+102    	; 0xdbe <__fpcmp_parts_f+0x88>
     d58:	81 81       	ldd	r24, Z+1	; 0x01
     d5a:	68 2f       	mov	r22, r24
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	61 1b       	sub	r22, r17
     d60:	71 09       	sbc	r23, r1
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <__fpcmp_parts_f+0xac>
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	21 f0       	breq	.+8      	; 0xd70 <__fpcmp_parts_f+0x3a>
     d68:	92 30       	cpi	r25, 0x02	; 2
     d6a:	31 f4       	brne	.+12     	; 0xd78 <__fpcmp_parts_f+0x42>
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	b9 f1       	breq	.+110    	; 0xdde <__fpcmp_parts_f+0xa8>
     d70:	81 81       	ldd	r24, Z+1	; 0x01
     d72:	88 23       	and	r24, r24
     d74:	89 f1       	breq	.+98     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     d76:	2d c0       	rjmp	.+90     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	1c 91       	ld	r17, X
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	f1 f0       	breq	.+60     	; 0xdbe <__fpcmp_parts_f+0x88>
     d82:	81 81       	ldd	r24, Z+1	; 0x01
     d84:	18 17       	cp	r17, r24
     d86:	d9 f4       	brne	.+54     	; 0xdbe <__fpcmp_parts_f+0x88>
     d88:	12 96       	adiw	r26, 0x02	; 2
     d8a:	2d 91       	ld	r18, X+
     d8c:	3c 91       	ld	r19, X
     d8e:	13 97       	sbiw	r26, 0x03	; 3
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	82 17       	cp	r24, r18
     d96:	93 07       	cpc	r25, r19
     d98:	94 f0       	brlt	.+36     	; 0xdbe <__fpcmp_parts_f+0x88>
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	bc f0       	brlt	.+46     	; 0xdce <__fpcmp_parts_f+0x98>
     da0:	14 96       	adiw	r26, 0x04	; 4
     da2:	8d 91       	ld	r24, X+
     da4:	9d 91       	ld	r25, X+
     da6:	0d 90       	ld	r0, X+
     da8:	bc 91       	ld	r27, X
     daa:	a0 2d       	mov	r26, r0
     dac:	24 81       	ldd	r18, Z+4	; 0x04
     dae:	35 81       	ldd	r19, Z+5	; 0x05
     db0:	46 81       	ldd	r20, Z+6	; 0x06
     db2:	57 81       	ldd	r21, Z+7	; 0x07
     db4:	28 17       	cp	r18, r24
     db6:	39 07       	cpc	r19, r25
     db8:	4a 07       	cpc	r20, r26
     dba:	5b 07       	cpc	r21, r27
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <__fpcmp_parts_f+0x8e>
     dbe:	11 23       	and	r17, r17
     dc0:	41 f0       	breq	.+16     	; 0xdd2 <__fpcmp_parts_f+0x9c>
     dc2:	0a c0       	rjmp	.+20     	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dc4:	82 17       	cp	r24, r18
     dc6:	93 07       	cpc	r25, r19
     dc8:	a4 07       	cpc	r26, r20
     dca:	b5 07       	cpc	r27, r21
     dcc:	40 f4       	brcc	.+16     	; 0xdde <__fpcmp_parts_f+0xa8>
     dce:	11 23       	and	r17, r17
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <__fpcmp_parts_f+0xa2>
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	05 c0       	rjmp	.+10     	; 0xde2 <__fpcmp_parts_f+0xac>
     dd8:	6f ef       	ldi	r22, 0xFF	; 255
     dda:	7f ef       	ldi	r23, 0xFF	; 255
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <__fpcmp_parts_f+0xac>
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	cb 01       	movw	r24, r22
     de4:	1f 91       	pop	r17
     de6:	08 95       	ret

00000de8 <Convert_uint64_to_String>:
/**************************                   INCLUDES                   **************************/
#include "STRING_SERVICE_FUN.h"


void Convert_uint64_to_String(uint64 var , uint8 * String)
{
     de8:	8f 92       	push	r8
     dea:	9f 92       	push	r9
     dec:	af 92       	push	r10
     dee:	bf 92       	push	r11
     df0:	cf 92       	push	r12
     df2:	df 92       	push	r13
     df4:	ef 92       	push	r14
     df6:	ff 92       	push	r15
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	c4 55       	subi	r28, 0x54	; 84
     e06:	d0 40       	sbci	r29, 0x00	; 0
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	fe 01       	movw	r30, r28
     e14:	ed 5b       	subi	r30, 0xBD	; 189
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	20 83       	st	Z, r18
     e1a:	31 83       	std	Z+1, r19	; 0x01
     e1c:	42 83       	std	Z+2, r20	; 0x02
     e1e:	53 83       	std	Z+3, r21	; 0x03
     e20:	64 83       	std	Z+4, r22	; 0x04
     e22:	75 83       	std	Z+5, r23	; 0x05
     e24:	86 83       	std	Z+6, r24	; 0x06
     e26:	97 83       	std	Z+7, r25	; 0x07
     e28:	fe 01       	movw	r30, r28
     e2a:	e5 5b       	subi	r30, 0xB5	; 181
     e2c:	ff 4f       	sbci	r31, 0xFF	; 255
     e2e:	11 83       	std	Z+1, r17	; 0x01
     e30:	00 83       	st	Z, r16
    uint8 index = 60 ; /*   As I will take last 4 bytes and convert them to Hexa Decemal  */
     e32:	8c e3       	ldi	r24, 0x3C	; 60
     e34:	8a 83       	std	Y+2, r24	; 0x02
    uint8 String_t[64];
    uint8 it = 0 ;
     e36:	19 82       	std	Y+1, r1	; 0x01
     e38:	ec c1       	rjmp	.+984    	; 0x1212 <Convert_uint64_to_String+0x42a>
    for( ; it < 16; it++)
    {
        switch( (var >> index) & 0x0F ) 
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	a8 2f       	mov	r26, r24
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	fe 01       	movw	r30, r28
     e42:	ed 5b       	subi	r30, 0xBD	; 189
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	20 81       	ld	r18, Z
     e48:	31 81       	ldd	r19, Z+1	; 0x01
     e4a:	42 81       	ldd	r20, Z+2	; 0x02
     e4c:	53 81       	ldd	r21, Z+3	; 0x03
     e4e:	64 81       	ldd	r22, Z+4	; 0x04
     e50:	75 81       	ldd	r23, Z+5	; 0x05
     e52:	86 81       	ldd	r24, Z+6	; 0x06
     e54:	97 81       	ldd	r25, Z+7	; 0x07
     e56:	0a 2f       	mov	r16, r26
     e58:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
     e5c:	a2 2e       	mov	r10, r18
     e5e:	b3 2e       	mov	r11, r19
     e60:	c4 2e       	mov	r12, r20
     e62:	d5 2e       	mov	r13, r21
     e64:	e6 2e       	mov	r14, r22
     e66:	f7 2e       	mov	r15, r23
     e68:	08 2f       	mov	r16, r24
     e6a:	19 2f       	mov	r17, r25
     e6c:	2a 2d       	mov	r18, r10
     e6e:	3b 2d       	mov	r19, r11
     e70:	4c 2d       	mov	r20, r12
     e72:	5d 2d       	mov	r21, r13
     e74:	6e 2d       	mov	r22, r14
     e76:	7f 2d       	mov	r23, r15
     e78:	80 2f       	mov	r24, r16
     e7a:	91 2f       	mov	r25, r17
     e7c:	e2 2f       	mov	r30, r18
     e7e:	ef 70       	andi	r30, 0x0F	; 15
     e80:	2e 96       	adiw	r28, 0x0e	; 14
     e82:	ef af       	std	Y+63, r30	; 0x3f
     e84:	2e 97       	sbiw	r28, 0x0e	; 14
     e86:	e3 2f       	mov	r30, r19
     e88:	e0 70       	andi	r30, 0x00	; 0
     e8a:	2f 96       	adiw	r28, 0x0f	; 15
     e8c:	ef af       	std	Y+63, r30	; 0x3f
     e8e:	2f 97       	sbiw	r28, 0x0f	; 15
     e90:	e4 2f       	mov	r30, r20
     e92:	e0 70       	andi	r30, 0x00	; 0
     e94:	60 96       	adiw	r28, 0x10	; 16
     e96:	ef af       	std	Y+63, r30	; 0x3f
     e98:	60 97       	sbiw	r28, 0x10	; 16
     e9a:	e5 2f       	mov	r30, r21
     e9c:	e0 70       	andi	r30, 0x00	; 0
     e9e:	61 96       	adiw	r28, 0x11	; 17
     ea0:	ef af       	std	Y+63, r30	; 0x3f
     ea2:	61 97       	sbiw	r28, 0x11	; 17
     ea4:	e6 2f       	mov	r30, r22
     ea6:	e0 70       	andi	r30, 0x00	; 0
     ea8:	62 96       	adiw	r28, 0x12	; 18
     eaa:	ef af       	std	Y+63, r30	; 0x3f
     eac:	62 97       	sbiw	r28, 0x12	; 18
     eae:	e7 2f       	mov	r30, r23
     eb0:	e0 70       	andi	r30, 0x00	; 0
     eb2:	63 96       	adiw	r28, 0x13	; 19
     eb4:	ef af       	std	Y+63, r30	; 0x3f
     eb6:	63 97       	sbiw	r28, 0x13	; 19
     eb8:	e8 2f       	mov	r30, r24
     eba:	e0 70       	andi	r30, 0x00	; 0
     ebc:	64 96       	adiw	r28, 0x14	; 20
     ebe:	ef af       	std	Y+63, r30	; 0x3f
     ec0:	64 97       	sbiw	r28, 0x14	; 20
     ec2:	e9 2f       	mov	r30, r25
     ec4:	e0 70       	andi	r30, 0x00	; 0
     ec6:	65 96       	adiw	r28, 0x15	; 21
     ec8:	ef af       	std	Y+63, r30	; 0x3f
     eca:	65 97       	sbiw	r28, 0x15	; 21
     ecc:	2e 96       	adiw	r28, 0x0e	; 14
     ece:	8f ad       	ldd	r24, Y+63	; 0x3f
     ed0:	2e 97       	sbiw	r28, 0x0e	; 14
     ed2:	8c 30       	cpi	r24, 0x0C	; 12
     ed4:	21 f5       	brne	.+72     	; 0xf1e <Convert_uint64_to_String+0x136>
     ed6:	2f 96       	adiw	r28, 0x0f	; 15
     ed8:	ef ad       	ldd	r30, Y+63	; 0x3f
     eda:	2f 97       	sbiw	r28, 0x0f	; 15
     edc:	ee 23       	and	r30, r30
     ede:	f9 f4       	brne	.+62     	; 0xf1e <Convert_uint64_to_String+0x136>
     ee0:	60 96       	adiw	r28, 0x10	; 16
     ee2:	8f ad       	ldd	r24, Y+63	; 0x3f
     ee4:	60 97       	sbiw	r28, 0x10	; 16
     ee6:	88 23       	and	r24, r24
     ee8:	d1 f4       	brne	.+52     	; 0xf1e <Convert_uint64_to_String+0x136>
     eea:	61 96       	adiw	r28, 0x11	; 17
     eec:	ef ad       	ldd	r30, Y+63	; 0x3f
     eee:	61 97       	sbiw	r28, 0x11	; 17
     ef0:	ee 23       	and	r30, r30
     ef2:	a9 f4       	brne	.+42     	; 0xf1e <Convert_uint64_to_String+0x136>
     ef4:	62 96       	adiw	r28, 0x12	; 18
     ef6:	8f ad       	ldd	r24, Y+63	; 0x3f
     ef8:	62 97       	sbiw	r28, 0x12	; 18
     efa:	88 23       	and	r24, r24
     efc:	81 f4       	brne	.+32     	; 0xf1e <Convert_uint64_to_String+0x136>
     efe:	63 96       	adiw	r28, 0x13	; 19
     f00:	ef ad       	ldd	r30, Y+63	; 0x3f
     f02:	63 97       	sbiw	r28, 0x13	; 19
     f04:	ee 23       	and	r30, r30
     f06:	59 f4       	brne	.+22     	; 0xf1e <Convert_uint64_to_String+0x136>
     f08:	64 96       	adiw	r28, 0x14	; 20
     f0a:	8f ad       	ldd	r24, Y+63	; 0x3f
     f0c:	64 97       	sbiw	r28, 0x14	; 20
     f0e:	88 23       	and	r24, r24
     f10:	31 f4       	brne	.+12     	; 0xf1e <Convert_uint64_to_String+0x136>
     f12:	65 96       	adiw	r28, 0x15	; 21
     f14:	ef ad       	ldd	r30, Y+63	; 0x3f
     f16:	65 97       	sbiw	r28, 0x15	; 21
     f18:	ee 23       	and	r30, r30
     f1a:	09 f4       	brne	.+2      	; 0xf1e <Convert_uint64_to_String+0x136>
     f1c:	1a c1       	rjmp	.+564    	; 0x1152 <Convert_uint64_to_String+0x36a>
     f1e:	2e 96       	adiw	r28, 0x0e	; 14
     f20:	2f ad       	ldd	r18, Y+63	; 0x3f
     f22:	2e 97       	sbiw	r28, 0x0e	; 14
     f24:	2f 96       	adiw	r28, 0x0f	; 15
     f26:	3f ad       	ldd	r19, Y+63	; 0x3f
     f28:	2f 97       	sbiw	r28, 0x0f	; 15
     f2a:	60 96       	adiw	r28, 0x10	; 16
     f2c:	4f ad       	ldd	r20, Y+63	; 0x3f
     f2e:	60 97       	sbiw	r28, 0x10	; 16
     f30:	61 96       	adiw	r28, 0x11	; 17
     f32:	5f ad       	ldd	r21, Y+63	; 0x3f
     f34:	61 97       	sbiw	r28, 0x11	; 17
     f36:	62 96       	adiw	r28, 0x12	; 18
     f38:	6f ad       	ldd	r22, Y+63	; 0x3f
     f3a:	62 97       	sbiw	r28, 0x12	; 18
     f3c:	63 96       	adiw	r28, 0x13	; 19
     f3e:	7f ad       	ldd	r23, Y+63	; 0x3f
     f40:	63 97       	sbiw	r28, 0x13	; 19
     f42:	64 96       	adiw	r28, 0x14	; 20
     f44:	8f ad       	ldd	r24, Y+63	; 0x3f
     f46:	64 97       	sbiw	r28, 0x14	; 20
     f48:	65 96       	adiw	r28, 0x15	; 21
     f4a:	9f ad       	ldd	r25, Y+63	; 0x3f
     f4c:	65 97       	sbiw	r28, 0x15	; 21
     f4e:	0f 2e       	mov	r0, r31
     f50:	fc e0       	ldi	r31, 0x0C	; 12
     f52:	af 2e       	mov	r10, r31
     f54:	f0 2d       	mov	r31, r0
     f56:	bb 24       	eor	r11, r11
     f58:	cc 24       	eor	r12, r12
     f5a:	dd 24       	eor	r13, r13
     f5c:	ee 24       	eor	r14, r14
     f5e:	ff 24       	eor	r15, r15
     f60:	00 e0       	ldi	r16, 0x00	; 0
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	0e 94 47 01 	call	0x28e	; 0x28e <__ucmpdi2>
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	08 f0       	brcs	.+2      	; 0xf6e <Convert_uint64_to_String+0x186>
     f6c:	5a c0       	rjmp	.+180    	; 0x1022 <Convert_uint64_to_String+0x23a>
     f6e:	2e 96       	adiw	r28, 0x0e	; 14
     f70:	8f ad       	ldd	r24, Y+63	; 0x3f
     f72:	2e 97       	sbiw	r28, 0x0e	; 14
     f74:	8a 30       	cpi	r24, 0x0A	; 10
     f76:	21 f5       	brne	.+72     	; 0xfc0 <Convert_uint64_to_String+0x1d8>
     f78:	2f 96       	adiw	r28, 0x0f	; 15
     f7a:	ef ad       	ldd	r30, Y+63	; 0x3f
     f7c:	2f 97       	sbiw	r28, 0x0f	; 15
     f7e:	ee 23       	and	r30, r30
     f80:	f9 f4       	brne	.+62     	; 0xfc0 <Convert_uint64_to_String+0x1d8>
     f82:	60 96       	adiw	r28, 0x10	; 16
     f84:	8f ad       	ldd	r24, Y+63	; 0x3f
     f86:	60 97       	sbiw	r28, 0x10	; 16
     f88:	88 23       	and	r24, r24
     f8a:	d1 f4       	brne	.+52     	; 0xfc0 <Convert_uint64_to_String+0x1d8>
     f8c:	61 96       	adiw	r28, 0x11	; 17
     f8e:	ef ad       	ldd	r30, Y+63	; 0x3f
     f90:	61 97       	sbiw	r28, 0x11	; 17
     f92:	ee 23       	and	r30, r30
     f94:	a9 f4       	brne	.+42     	; 0xfc0 <Convert_uint64_to_String+0x1d8>
     f96:	62 96       	adiw	r28, 0x12	; 18
     f98:	8f ad       	ldd	r24, Y+63	; 0x3f
     f9a:	62 97       	sbiw	r28, 0x12	; 18
     f9c:	88 23       	and	r24, r24
     f9e:	81 f4       	brne	.+32     	; 0xfc0 <Convert_uint64_to_String+0x1d8>
     fa0:	63 96       	adiw	r28, 0x13	; 19
     fa2:	ef ad       	ldd	r30, Y+63	; 0x3f
     fa4:	63 97       	sbiw	r28, 0x13	; 19
     fa6:	ee 23       	and	r30, r30
     fa8:	59 f4       	brne	.+22     	; 0xfc0 <Convert_uint64_to_String+0x1d8>
     faa:	64 96       	adiw	r28, 0x14	; 20
     fac:	8f ad       	ldd	r24, Y+63	; 0x3f
     fae:	64 97       	sbiw	r28, 0x14	; 20
     fb0:	88 23       	and	r24, r24
     fb2:	31 f4       	brne	.+12     	; 0xfc0 <Convert_uint64_to_String+0x1d8>
     fb4:	65 96       	adiw	r28, 0x15	; 21
     fb6:	ef ad       	ldd	r30, Y+63	; 0x3f
     fb8:	65 97       	sbiw	r28, 0x15	; 21
     fba:	ee 23       	and	r30, r30
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <Convert_uint64_to_String+0x1d8>
     fbe:	b3 c0       	rjmp	.+358    	; 0x1126 <Convert_uint64_to_String+0x33e>
     fc0:	2e 96       	adiw	r28, 0x0e	; 14
     fc2:	8f ad       	ldd	r24, Y+63	; 0x3f
     fc4:	2e 97       	sbiw	r28, 0x0e	; 14
     fc6:	8b 30       	cpi	r24, 0x0B	; 11
     fc8:	09 f0       	breq	.+2      	; 0xfcc <Convert_uint64_to_String+0x1e4>
     fca:	ef c0       	rjmp	.+478    	; 0x11aa <Convert_uint64_to_String+0x3c2>
     fcc:	2f 96       	adiw	r28, 0x0f	; 15
     fce:	ef ad       	ldd	r30, Y+63	; 0x3f
     fd0:	2f 97       	sbiw	r28, 0x0f	; 15
     fd2:	ee 23       	and	r30, r30
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <Convert_uint64_to_String+0x1f0>
     fd6:	e9 c0       	rjmp	.+466    	; 0x11aa <Convert_uint64_to_String+0x3c2>
     fd8:	60 96       	adiw	r28, 0x10	; 16
     fda:	8f ad       	ldd	r24, Y+63	; 0x3f
     fdc:	60 97       	sbiw	r28, 0x10	; 16
     fde:	88 23       	and	r24, r24
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <Convert_uint64_to_String+0x1fc>
     fe2:	e3 c0       	rjmp	.+454    	; 0x11aa <Convert_uint64_to_String+0x3c2>
     fe4:	61 96       	adiw	r28, 0x11	; 17
     fe6:	ef ad       	ldd	r30, Y+63	; 0x3f
     fe8:	61 97       	sbiw	r28, 0x11	; 17
     fea:	ee 23       	and	r30, r30
     fec:	09 f0       	breq	.+2      	; 0xff0 <Convert_uint64_to_String+0x208>
     fee:	dd c0       	rjmp	.+442    	; 0x11aa <Convert_uint64_to_String+0x3c2>
     ff0:	62 96       	adiw	r28, 0x12	; 18
     ff2:	8f ad       	ldd	r24, Y+63	; 0x3f
     ff4:	62 97       	sbiw	r28, 0x12	; 18
     ff6:	88 23       	and	r24, r24
     ff8:	09 f0       	breq	.+2      	; 0xffc <Convert_uint64_to_String+0x214>
     ffa:	d7 c0       	rjmp	.+430    	; 0x11aa <Convert_uint64_to_String+0x3c2>
     ffc:	63 96       	adiw	r28, 0x13	; 19
     ffe:	ef ad       	ldd	r30, Y+63	; 0x3f
    1000:	63 97       	sbiw	r28, 0x13	; 19
    1002:	ee 23       	and	r30, r30
    1004:	09 f0       	breq	.+2      	; 0x1008 <Convert_uint64_to_String+0x220>
    1006:	d1 c0       	rjmp	.+418    	; 0x11aa <Convert_uint64_to_String+0x3c2>
    1008:	64 96       	adiw	r28, 0x14	; 20
    100a:	8f ad       	ldd	r24, Y+63	; 0x3f
    100c:	64 97       	sbiw	r28, 0x14	; 20
    100e:	88 23       	and	r24, r24
    1010:	09 f0       	breq	.+2      	; 0x1014 <Convert_uint64_to_String+0x22c>
    1012:	cb c0       	rjmp	.+406    	; 0x11aa <Convert_uint64_to_String+0x3c2>
    1014:	65 96       	adiw	r28, 0x15	; 21
    1016:	ef ad       	ldd	r30, Y+63	; 0x3f
    1018:	65 97       	sbiw	r28, 0x15	; 21
    101a:	ee 23       	and	r30, r30
    101c:	09 f0       	breq	.+2      	; 0x1020 <Convert_uint64_to_String+0x238>
    101e:	c5 c0       	rjmp	.+394    	; 0x11aa <Convert_uint64_to_String+0x3c2>
    1020:	8d c0       	rjmp	.+282    	; 0x113c <Convert_uint64_to_String+0x354>
    1022:	2e 96       	adiw	r28, 0x0e	; 14
    1024:	8f ad       	ldd	r24, Y+63	; 0x3f
    1026:	2e 97       	sbiw	r28, 0x0e	; 14
    1028:	8e 30       	cpi	r24, 0x0E	; 14
    102a:	21 f5       	brne	.+72     	; 0x1074 <Convert_uint64_to_String+0x28c>
    102c:	2f 96       	adiw	r28, 0x0f	; 15
    102e:	ef ad       	ldd	r30, Y+63	; 0x3f
    1030:	2f 97       	sbiw	r28, 0x0f	; 15
    1032:	ee 23       	and	r30, r30
    1034:	f9 f4       	brne	.+62     	; 0x1074 <Convert_uint64_to_String+0x28c>
    1036:	60 96       	adiw	r28, 0x10	; 16
    1038:	8f ad       	ldd	r24, Y+63	; 0x3f
    103a:	60 97       	sbiw	r28, 0x10	; 16
    103c:	88 23       	and	r24, r24
    103e:	d1 f4       	brne	.+52     	; 0x1074 <Convert_uint64_to_String+0x28c>
    1040:	61 96       	adiw	r28, 0x11	; 17
    1042:	ef ad       	ldd	r30, Y+63	; 0x3f
    1044:	61 97       	sbiw	r28, 0x11	; 17
    1046:	ee 23       	and	r30, r30
    1048:	a9 f4       	brne	.+42     	; 0x1074 <Convert_uint64_to_String+0x28c>
    104a:	62 96       	adiw	r28, 0x12	; 18
    104c:	8f ad       	ldd	r24, Y+63	; 0x3f
    104e:	62 97       	sbiw	r28, 0x12	; 18
    1050:	88 23       	and	r24, r24
    1052:	81 f4       	brne	.+32     	; 0x1074 <Convert_uint64_to_String+0x28c>
    1054:	63 96       	adiw	r28, 0x13	; 19
    1056:	ef ad       	ldd	r30, Y+63	; 0x3f
    1058:	63 97       	sbiw	r28, 0x13	; 19
    105a:	ee 23       	and	r30, r30
    105c:	59 f4       	brne	.+22     	; 0x1074 <Convert_uint64_to_String+0x28c>
    105e:	64 96       	adiw	r28, 0x14	; 20
    1060:	8f ad       	ldd	r24, Y+63	; 0x3f
    1062:	64 97       	sbiw	r28, 0x14	; 20
    1064:	88 23       	and	r24, r24
    1066:	31 f4       	brne	.+12     	; 0x1074 <Convert_uint64_to_String+0x28c>
    1068:	65 96       	adiw	r28, 0x15	; 21
    106a:	ef ad       	ldd	r30, Y+63	; 0x3f
    106c:	65 97       	sbiw	r28, 0x15	; 21
    106e:	ee 23       	and	r30, r30
    1070:	09 f4       	brne	.+2      	; 0x1074 <Convert_uint64_to_String+0x28c>
    1072:	85 c0       	rjmp	.+266    	; 0x117e <Convert_uint64_to_String+0x396>
    1074:	2e 96       	adiw	r28, 0x0e	; 14
    1076:	2f ad       	ldd	r18, Y+63	; 0x3f
    1078:	2e 97       	sbiw	r28, 0x0e	; 14
    107a:	2f 96       	adiw	r28, 0x0f	; 15
    107c:	3f ad       	ldd	r19, Y+63	; 0x3f
    107e:	2f 97       	sbiw	r28, 0x0f	; 15
    1080:	60 96       	adiw	r28, 0x10	; 16
    1082:	4f ad       	ldd	r20, Y+63	; 0x3f
    1084:	60 97       	sbiw	r28, 0x10	; 16
    1086:	61 96       	adiw	r28, 0x11	; 17
    1088:	5f ad       	ldd	r21, Y+63	; 0x3f
    108a:	61 97       	sbiw	r28, 0x11	; 17
    108c:	62 96       	adiw	r28, 0x12	; 18
    108e:	6f ad       	ldd	r22, Y+63	; 0x3f
    1090:	62 97       	sbiw	r28, 0x12	; 18
    1092:	63 96       	adiw	r28, 0x13	; 19
    1094:	7f ad       	ldd	r23, Y+63	; 0x3f
    1096:	63 97       	sbiw	r28, 0x13	; 19
    1098:	64 96       	adiw	r28, 0x14	; 20
    109a:	8f ad       	ldd	r24, Y+63	; 0x3f
    109c:	64 97       	sbiw	r28, 0x14	; 20
    109e:	65 96       	adiw	r28, 0x15	; 21
    10a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    10a2:	65 97       	sbiw	r28, 0x15	; 21
    10a4:	0f 2e       	mov	r0, r31
    10a6:	fe e0       	ldi	r31, 0x0E	; 14
    10a8:	af 2e       	mov	r10, r31
    10aa:	f0 2d       	mov	r31, r0
    10ac:	bb 24       	eor	r11, r11
    10ae:	cc 24       	eor	r12, r12
    10b0:	dd 24       	eor	r13, r13
    10b2:	ee 24       	eor	r14, r14
    10b4:	ff 24       	eor	r15, r15
    10b6:	00 e0       	ldi	r16, 0x00	; 0
    10b8:	10 e0       	ldi	r17, 0x00	; 0
    10ba:	0e 94 47 01 	call	0x28e	; 0x28e <__ucmpdi2>
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	08 f4       	brcc	.+2      	; 0x10c4 <Convert_uint64_to_String+0x2dc>
    10c2:	52 c0       	rjmp	.+164    	; 0x1168 <Convert_uint64_to_String+0x380>
    10c4:	2e 96       	adiw	r28, 0x0e	; 14
    10c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    10c8:	2e 97       	sbiw	r28, 0x0e	; 14
    10ca:	8f 30       	cpi	r24, 0x0F	; 15
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <Convert_uint64_to_String+0x2e8>
    10ce:	6d c0       	rjmp	.+218    	; 0x11aa <Convert_uint64_to_String+0x3c2>
    10d0:	2f 96       	adiw	r28, 0x0f	; 15
    10d2:	ef ad       	ldd	r30, Y+63	; 0x3f
    10d4:	2f 97       	sbiw	r28, 0x0f	; 15
    10d6:	ee 23       	and	r30, r30
    10d8:	09 f0       	breq	.+2      	; 0x10dc <Convert_uint64_to_String+0x2f4>
    10da:	67 c0       	rjmp	.+206    	; 0x11aa <Convert_uint64_to_String+0x3c2>
    10dc:	60 96       	adiw	r28, 0x10	; 16
    10de:	8f ad       	ldd	r24, Y+63	; 0x3f
    10e0:	60 97       	sbiw	r28, 0x10	; 16
    10e2:	88 23       	and	r24, r24
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <Convert_uint64_to_String+0x300>
    10e6:	61 c0       	rjmp	.+194    	; 0x11aa <Convert_uint64_to_String+0x3c2>
    10e8:	61 96       	adiw	r28, 0x11	; 17
    10ea:	ef ad       	ldd	r30, Y+63	; 0x3f
    10ec:	61 97       	sbiw	r28, 0x11	; 17
    10ee:	ee 23       	and	r30, r30
    10f0:	09 f0       	breq	.+2      	; 0x10f4 <Convert_uint64_to_String+0x30c>
    10f2:	5b c0       	rjmp	.+182    	; 0x11aa <Convert_uint64_to_String+0x3c2>
    10f4:	62 96       	adiw	r28, 0x12	; 18
    10f6:	8f ad       	ldd	r24, Y+63	; 0x3f
    10f8:	62 97       	sbiw	r28, 0x12	; 18
    10fa:	88 23       	and	r24, r24
    10fc:	09 f0       	breq	.+2      	; 0x1100 <Convert_uint64_to_String+0x318>
    10fe:	55 c0       	rjmp	.+170    	; 0x11aa <Convert_uint64_to_String+0x3c2>
    1100:	63 96       	adiw	r28, 0x13	; 19
    1102:	ef ad       	ldd	r30, Y+63	; 0x3f
    1104:	63 97       	sbiw	r28, 0x13	; 19
    1106:	ee 23       	and	r30, r30
    1108:	09 f0       	breq	.+2      	; 0x110c <Convert_uint64_to_String+0x324>
    110a:	4f c0       	rjmp	.+158    	; 0x11aa <Convert_uint64_to_String+0x3c2>
    110c:	64 96       	adiw	r28, 0x14	; 20
    110e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1110:	64 97       	sbiw	r28, 0x14	; 20
    1112:	88 23       	and	r24, r24
    1114:	09 f0       	breq	.+2      	; 0x1118 <Convert_uint64_to_String+0x330>
    1116:	49 c0       	rjmp	.+146    	; 0x11aa <Convert_uint64_to_String+0x3c2>
    1118:	65 96       	adiw	r28, 0x15	; 21
    111a:	ef ad       	ldd	r30, Y+63	; 0x3f
    111c:	65 97       	sbiw	r28, 0x15	; 21
    111e:	ee 23       	and	r30, r30
    1120:	09 f0       	breq	.+2      	; 0x1124 <Convert_uint64_to_String+0x33c>
    1122:	43 c0       	rjmp	.+134    	; 0x11aa <Convert_uint64_to_String+0x3c2>
    1124:	37 c0       	rjmp	.+110    	; 0x1194 <Convert_uint64_to_String+0x3ac>
        {
            case 0x0A : 
                String_t[it] = 'A';
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	ce 01       	movw	r24, r28
    112e:	03 96       	adiw	r24, 0x03	; 3
    1130:	fc 01       	movw	r30, r24
    1132:	e2 0f       	add	r30, r18
    1134:	f3 1f       	adc	r31, r19
    1136:	81 e4       	ldi	r24, 0x41	; 65
    1138:	80 83       	st	Z, r24
    113a:	65 c0       	rjmp	.+202    	; 0x1206 <Convert_uint64_to_String+0x41e>
            break ;

            case 0x0B :
                String_t[it] = 'B';
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	ce 01       	movw	r24, r28
    1144:	03 96       	adiw	r24, 0x03	; 3
    1146:	fc 01       	movw	r30, r24
    1148:	e2 0f       	add	r30, r18
    114a:	f3 1f       	adc	r31, r19
    114c:	82 e4       	ldi	r24, 0x42	; 66
    114e:	80 83       	st	Z, r24
    1150:	5a c0       	rjmp	.+180    	; 0x1206 <Convert_uint64_to_String+0x41e>
            break ;

            case 0x0C :
                String_t[it] = 'C';
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	ce 01       	movw	r24, r28
    115a:	03 96       	adiw	r24, 0x03	; 3
    115c:	fc 01       	movw	r30, r24
    115e:	e2 0f       	add	r30, r18
    1160:	f3 1f       	adc	r31, r19
    1162:	83 e4       	ldi	r24, 0x43	; 67
    1164:	80 83       	st	Z, r24
    1166:	4f c0       	rjmp	.+158    	; 0x1206 <Convert_uint64_to_String+0x41e>
            break ;

            case 0x0D :
                String_t[it] = 'D';
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	ce 01       	movw	r24, r28
    1170:	03 96       	adiw	r24, 0x03	; 3
    1172:	fc 01       	movw	r30, r24
    1174:	e2 0f       	add	r30, r18
    1176:	f3 1f       	adc	r31, r19
    1178:	84 e4       	ldi	r24, 0x44	; 68
    117a:	80 83       	st	Z, r24
    117c:	44 c0       	rjmp	.+136    	; 0x1206 <Convert_uint64_to_String+0x41e>
            break ;

            case 0x0E :
                String_t[it] = 'E';
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	ce 01       	movw	r24, r28
    1186:	03 96       	adiw	r24, 0x03	; 3
    1188:	fc 01       	movw	r30, r24
    118a:	e2 0f       	add	r30, r18
    118c:	f3 1f       	adc	r31, r19
    118e:	85 e4       	ldi	r24, 0x45	; 69
    1190:	80 83       	st	Z, r24
    1192:	39 c0       	rjmp	.+114    	; 0x1206 <Convert_uint64_to_String+0x41e>
            break ;

            case 0x0F :
                String_t[it] = 'F';
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	ce 01       	movw	r24, r28
    119c:	03 96       	adiw	r24, 0x03	; 3
    119e:	fc 01       	movw	r30, r24
    11a0:	e2 0f       	add	r30, r18
    11a2:	f3 1f       	adc	r31, r19
    11a4:	86 e4       	ldi	r24, 0x46	; 70
    11a6:	80 83       	st	Z, r24
    11a8:	2e c0       	rjmp	.+92     	; 0x1206 <Convert_uint64_to_String+0x41e>
            break ;

            default :
                String_t[it] = ( ( (var >> index) & 0x0F ) | 0x30 ); // to convert 0 from decimal to hexa
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	88 2e       	mov	r8, r24
    11ae:	99 24       	eor	r9, r9
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	a8 2f       	mov	r26, r24
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	fe 01       	movw	r30, r28
    11b8:	ed 5b       	subi	r30, 0xBD	; 189
    11ba:	ff 4f       	sbci	r31, 0xFF	; 255
    11bc:	20 81       	ld	r18, Z
    11be:	31 81       	ldd	r19, Z+1	; 0x01
    11c0:	42 81       	ldd	r20, Z+2	; 0x02
    11c2:	53 81       	ldd	r21, Z+3	; 0x03
    11c4:	64 81       	ldd	r22, Z+4	; 0x04
    11c6:	75 81       	ldd	r23, Z+5	; 0x05
    11c8:	86 81       	ldd	r24, Z+6	; 0x06
    11ca:	97 81       	ldd	r25, Z+7	; 0x07
    11cc:	0a 2f       	mov	r16, r26
    11ce:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
    11d2:	a2 2e       	mov	r10, r18
    11d4:	b3 2e       	mov	r11, r19
    11d6:	c4 2e       	mov	r12, r20
    11d8:	d5 2e       	mov	r13, r21
    11da:	e6 2e       	mov	r14, r22
    11dc:	f7 2e       	mov	r15, r23
    11de:	08 2f       	mov	r16, r24
    11e0:	19 2f       	mov	r17, r25
    11e2:	2a 2d       	mov	r18, r10
    11e4:	3b 2d       	mov	r19, r11
    11e6:	4c 2d       	mov	r20, r12
    11e8:	5d 2d       	mov	r21, r13
    11ea:	6e 2d       	mov	r22, r14
    11ec:	7f 2d       	mov	r23, r15
    11ee:	80 2f       	mov	r24, r16
    11f0:	91 2f       	mov	r25, r17
    11f2:	82 2f       	mov	r24, r18
    11f4:	8f 70       	andi	r24, 0x0F	; 15
    11f6:	28 2f       	mov	r18, r24
    11f8:	20 63       	ori	r18, 0x30	; 48
    11fa:	ce 01       	movw	r24, r28
    11fc:	03 96       	adiw	r24, 0x03	; 3
    11fe:	fc 01       	movw	r30, r24
    1200:	e8 0d       	add	r30, r8
    1202:	f9 1d       	adc	r31, r9
    1204:	20 83       	st	Z, r18
            break;
        }

        index -= 4;
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	84 50       	subi	r24, 0x04	; 4
    120a:	8a 83       	std	Y+2, r24	; 0x02
void Convert_uint64_to_String(uint64 var , uint8 * String)
{
    uint8 index = 60 ; /*   As I will take last 4 bytes and convert them to Hexa Decemal  */
    uint8 String_t[64];
    uint8 it = 0 ;
    for( ; it < 16; it++)
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	8f 5f       	subi	r24, 0xFF	; 255
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	80 31       	cpi	r24, 0x10	; 16
    1216:	08 f4       	brcc	.+2      	; 0x121a <Convert_uint64_to_String+0x432>
    1218:	10 ce       	rjmp	.-992    	; 0xe3a <Convert_uint64_to_String+0x52>

        index -= 4;
    }


    it =0 ;
    121a:	19 82       	std	Y+1, r1	; 0x01
    index = 0 ;
    121c:	1a 82       	std	Y+2, r1	; 0x02
    121e:	03 c0       	rjmp	.+6      	; 0x1226 <Convert_uint64_to_String+0x43e>
    while(String_t[it] == '0')
    {
        it ++;
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	8f 5f       	subi	r24, 0xFF	; 255
    1224:	89 83       	std	Y+1, r24	; 0x01
    }


    it =0 ;
    index = 0 ;
    while(String_t[it] == '0')
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	ce 01       	movw	r24, r28
    122e:	03 96       	adiw	r24, 0x03	; 3
    1230:	fc 01       	movw	r30, r24
    1232:	e2 0f       	add	r30, r18
    1234:	f3 1f       	adc	r31, r19
    1236:	80 81       	ld	r24, Z
    1238:	80 33       	cpi	r24, 0x30	; 48
    123a:	91 f3       	breq	.-28     	; 0x1220 <Convert_uint64_to_String+0x438>
    123c:	1b c0       	rjmp	.+54     	; 0x1274 <Convert_uint64_to_String+0x48c>
        it ++;
    }

    while(it < 16)
    {
        String[index] = String_t[it];
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	fe 01       	movw	r30, r28
    1246:	e5 5b       	subi	r30, 0xB5	; 181
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	80 81       	ld	r24, Z
    124c:	91 81       	ldd	r25, Z+1	; 0x01
    124e:	dc 01       	movw	r26, r24
    1250:	a2 0f       	add	r26, r18
    1252:	b3 1f       	adc	r27, r19
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	ce 01       	movw	r24, r28
    125c:	03 96       	adiw	r24, 0x03	; 3
    125e:	fc 01       	movw	r30, r24
    1260:	e2 0f       	add	r30, r18
    1262:	f3 1f       	adc	r31, r19
    1264:	80 81       	ld	r24, Z
    1266:	8c 93       	st	X, r24
        it++ , index++ ; 
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	8f 5f       	subi	r24, 0xFF	; 255
    126c:	89 83       	std	Y+1, r24	; 0x01
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	8f 5f       	subi	r24, 0xFF	; 255
    1272:	8a 83       	std	Y+2, r24	; 0x02
    while(String_t[it] == '0')
    {
        it ++;
    }

    while(it < 16)
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	80 31       	cpi	r24, 0x10	; 16
    1278:	10 f3       	brcs	.-60     	; 0x123e <Convert_uint64_to_String+0x456>
    {
        String[index] = String_t[it];
        it++ , index++ ; 
    }
    String[index] = '\0';
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	fe 01       	movw	r30, r28
    1282:	e5 5b       	subi	r30, 0xB5	; 181
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	80 81       	ld	r24, Z
    1288:	91 81       	ldd	r25, Z+1	; 0x01
    128a:	fc 01       	movw	r30, r24
    128c:	e2 0f       	add	r30, r18
    128e:	f3 1f       	adc	r31, r19
    1290:	10 82       	st	Z, r1

}
    1292:	cc 5a       	subi	r28, 0xAC	; 172
    1294:	df 4f       	sbci	r29, 0xFF	; 255
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	ff 90       	pop	r15
    12aa:	ef 90       	pop	r14
    12ac:	df 90       	pop	r13
    12ae:	cf 90       	pop	r12
    12b0:	bf 90       	pop	r11
    12b2:	af 90       	pop	r10
    12b4:	9f 90       	pop	r9
    12b6:	8f 90       	pop	r8
    12b8:	08 95       	ret

000012ba <Timer1_Init>:




void Timer1_Init(void)
{
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    /*  Set Mode For Timer0    */
#if(TIMER1_CURRENT_MODE == T1_NORMAL_MODE)
    /*  Set this bit high when mode is non PWM  */
    SET_BIT(TCCR1A,FOC1A);
    12c2:	af e4       	ldi	r26, 0x4F	; 79
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	ef e4       	ldi	r30, 0x4F	; 79
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	88 60       	ori	r24, 0x08	; 8
    12ce:	8c 93       	st	X, r24
    SET_BIT(TCCR1A,FOC1B);
    12d0:	af e4       	ldi	r26, 0x4F	; 79
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ef e4       	ldi	r30, 0x4F	; 79
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	84 60       	ori	r24, 0x04	; 4
    12dc:	8c 93       	st	X, r24

    CLEAR_BIT(TCCR1A,WGM10);
    12de:	af e4       	ldi	r26, 0x4F	; 79
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	ef e4       	ldi	r30, 0x4F	; 79
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	8e 7f       	andi	r24, 0xFE	; 254
    12ea:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR1A,WGM11);
    12ec:	af e4       	ldi	r26, 0x4F	; 79
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	ef e4       	ldi	r30, 0x4F	; 79
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	8d 7f       	andi	r24, 0xFD	; 253
    12f8:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR1B,WGM12);
    12fa:	ae e4       	ldi	r26, 0x4E	; 78
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	ee e4       	ldi	r30, 0x4E	; 78
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	87 7f       	andi	r24, 0xF7	; 247
    1306:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR1B,WGM13);
    1308:	ae e4       	ldi	r26, 0x4E	; 78
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	ee e4       	ldi	r30, 0x4E	; 78
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	8f 7e       	andi	r24, 0xEF	; 239
    1314:	8c 93       	st	X, r24
            SET_BIT(SREG , 7);
            /*  Enable overflow Interrupt  */
            SET_BIT(TIMSK,TOIE1);
        #else
            /*  Disable overflow Interrupt  */
            CLEAR_BIT(TIMSK,TOIE1);
    1316:	a9 e5       	ldi	r26, 0x59	; 89
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e9 e5       	ldi	r30, 0x59	; 89
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	8b 7f       	andi	r24, 0xFB	; 251
    1322:	8c 93       	st	X, r24
    TCCR1B = (TCCR1B & 0xF8) | (TIMER1_ConfigTypeParam.TIMER1_CLK_value);
#endif


    /*  Set TCNT0 value to Zero*/
    Timer1_UpdateValue(0) ;
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0e 94 99 09 	call	0x1332	; 0x1332 <Timer1_UpdateValue>
}
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <Timer1_UpdateValue>:



void Timer1_UpdateValue(uint16 Register_value)
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	00 d0       	rcall	.+0      	; 0x1338 <Timer1_UpdateValue+0x6>
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	9a 83       	std	Y+2, r25	; 0x02
    133e:	89 83       	std	Y+1, r24	; 0x01
    TCNT1 = Register_value;
    1340:	ec e4       	ldi	r30, 0x4C	; 76
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	91 83       	std	Z+1, r25	; 0x01
    134a:	80 83       	st	Z, r24
}
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <Timer1_StopClock>:


void Timer1_StopClock(void)
{
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    TCCR1B = TCCR1B & (0xF8);
    135e:	ae e4       	ldi	r26, 0x4E	; 78
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	ee e4       	ldi	r30, 0x4E	; 78
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	88 7f       	andi	r24, 0xF8	; 248
    136a:	8c 93       	st	X, r24
}
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <Timer1_ProvideClock>:


void Timer1_ProvideClock(void)
{
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    TCCR1B = (TCCR1B & 0xF8) | (TIMER1_ConfigTypeParam.TIMER1_CLK_value);
    137a:	ae e4       	ldi	r26, 0x4E	; 78
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	ee e4       	ldi	r30, 0x4E	; 78
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	98 2f       	mov	r25, r24
    1386:	98 7f       	andi	r25, 0xF8	; 248
    1388:	80 91 68 00 	lds	r24, 0x0068
    138c:	89 2b       	or	r24, r25
    138e:	8c 93       	st	X, r24
}
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <Timer1_DelayOVFPolling>:


    #if(INTERUPT_STATE_T1 == Disable_Interrupt_T1)

        void Timer1_DelayOVFPolling(void)
        {
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
            Timer1_ProvideClock();
    139e:	0e 94 b9 09 	call	0x1372	; 0x1372 <Timer1_ProvideClock>
            /*  Loop in flag of overflow    */
            while(BIT_IS_CLEAR(TIFR,TOV1));
    13a2:	e8 e5       	ldi	r30, 0x58	; 88
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	88 2f       	mov	r24, r24
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	84 70       	andi	r24, 0x04	; 4
    13ae:	90 70       	andi	r25, 0x00	; 0
    13b0:	00 97       	sbiw	r24, 0x00	; 0
    13b2:	b9 f3       	breq	.-18     	; 0x13a2 <Timer1_DelayOVFPolling+0xc>

            /*  Clear flag by write one  */
            SET_BIT(TIFR,TOV1);
    13b4:	a8 e5       	ldi	r26, 0x58	; 88
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e8 e5       	ldi	r30, 0x58	; 88
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	84 60       	ori	r24, 0x04	; 4
    13c0:	8c 93       	st	X, r24
            Timer1_StopClock();
    13c2:	0e 94 ab 09 	call	0x1356	; 0x1356 <Timer1_StopClock>
        }
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <GPIO_init>:

/**************************                   Functions Definition                   **************************/


void GPIO_init(void)
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	0f 92       	push	r0
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
    13d6:	19 82       	std	Y+1, r1	; 0x01
    13d8:	57 c0       	rjmp	.+174    	; 0x1488 <GPIO_init+0xbc>
	{
		if(GPIO_configParam[it].PIN_SELECT == PINS_ALL) // configure all port
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	c9 01       	movw	r24, r18
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	82 0f       	add	r24, r18
    13e8:	93 1f       	adc	r25, r19
    13ea:	fc 01       	movw	r30, r24
    13ec:	e6 59       	subi	r30, 0x96	; 150
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	80 81       	ld	r24, Z
    13f2:	88 30       	cpi	r24, 0x08	; 8
    13f4:	e9 f4       	brne	.+58     	; 0x1430 <GPIO_init+0x64>
		{
			GPIO_SetPortDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].INPUT_OUTPUT);
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	c9 01       	movw	r24, r18
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	82 0f       	add	r24, r18
    1404:	93 1f       	adc	r25, r19
    1406:	fc 01       	movw	r30, r24
    1408:	e7 59       	subi	r30, 0x97	; 151
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	40 81       	ld	r20, Z
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	c9 01       	movw	r24, r18
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	82 0f       	add	r24, r18
    141c:	93 1f       	adc	r25, r19
    141e:	fc 01       	movw	r30, r24
    1420:	e5 59       	subi	r30, 0x95	; 149
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	90 81       	ld	r25, Z
    1426:	84 2f       	mov	r24, r20
    1428:	69 2f       	mov	r22, r25
    142a:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <GPIO_SetPortDirection>
    142e:	29 c0       	rjmp	.+82     	; 0x1482 <GPIO_init+0xb6>
		}
		else  // configure pin from port
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	c9 01       	movw	r24, r18
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	82 0f       	add	r24, r18
    143e:	93 1f       	adc	r25, r19
    1440:	fc 01       	movw	r30, r24
    1442:	e7 59       	subi	r30, 0x97	; 151
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	50 81       	ld	r21, Z
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	c9 01       	movw	r24, r18
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	82 0f       	add	r24, r18
    1456:	93 1f       	adc	r25, r19
    1458:	fc 01       	movw	r30, r24
    145a:	e6 59       	subi	r30, 0x96	; 150
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	40 81       	ld	r20, Z
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	c9 01       	movw	r24, r18
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	82 0f       	add	r24, r18
    146e:	93 1f       	adc	r25, r19
    1470:	fc 01       	movw	r30, r24
    1472:	e5 59       	subi	r30, 0x95	; 149
    1474:	ff 4f       	sbci	r31, 0xFF	; 255
    1476:	90 81       	ld	r25, Z
    1478:	85 2f       	mov	r24, r21
    147a:	64 2f       	mov	r22, r20
    147c:	49 2f       	mov	r20, r25
    147e:	0e 94 4c 0a 	call	0x1498	; 0x1498 <GPIO_SetPinDirection>
void GPIO_init(void)
{
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	for(uint8 it = 0 ; it < Configuration_NUM ; it++)
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	8f 5f       	subi	r24, 0xFF	; 255
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	88 23       	and	r24, r24
    148c:	09 f4       	brne	.+2      	; 0x1490 <GPIO_init+0xc4>
    148e:	a5 cf       	rjmp	.-182    	; 0x13da <GPIO_init+0xe>
		{
			GPIO_SetPinDirection(GPIO_configParam[it].PORT_Selected , GPIO_configParam[it].PIN_SELECT , GPIO_configParam[it].INPUT_OUTPUT);
		}
	}

}
    1490:	0f 90       	pop	r0
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <GPIO_SetPinDirection>:




void GPIO_SetPinDirection(uint8 PORTX , uint8 PIN ,GPIO_PinDirectionTypes PinDirction )
{
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	00 d0       	rcall	.+0      	; 0x149e <GPIO_SetPinDirection+0x6>
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <GPIO_SetPinDirection+0x8>
    14a0:	0f 92       	push	r0
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	89 83       	std	Y+1, r24	; 0x01
    14a8:	6a 83       	std	Y+2, r22	; 0x02
    14aa:	4b 83       	std	Y+3, r20	; 0x03

#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif
	if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	84 30       	cpi	r24, 0x04	; 4
    14b0:	08 f0       	brcs	.+2      	; 0x14b4 <GPIO_SetPinDirection+0x1c>
    14b2:	d8 c1       	rjmp	.+944    	; 0x1864 <GPIO_SetPinDirection+0x3cc>
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	88 30       	cpi	r24, 0x08	; 8
    14b8:	08 f0       	brcs	.+2      	; 0x14bc <GPIO_SetPinDirection+0x24>
    14ba:	d4 c1       	rjmp	.+936    	; 0x1864 <GPIO_SetPinDirection+0x3cc>
	{
		/* Do nothing */
	}
	else
	{
		switch(PORTX)
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	3d 83       	std	Y+5, r19	; 0x05
    14c4:	2c 83       	std	Y+4, r18	; 0x04
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	91 05       	cpc	r25, r1
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <GPIO_SetPinDirection+0x3a>
    14d0:	84 c0       	rjmp	.+264    	; 0x15da <GPIO_SetPinDirection+0x142>
    14d2:	2c 81       	ldd	r18, Y+4	; 0x04
    14d4:	3d 81       	ldd	r19, Y+5	; 0x05
    14d6:	22 30       	cpi	r18, 0x02	; 2
    14d8:	31 05       	cpc	r19, r1
    14da:	2c f4       	brge	.+10     	; 0x14e6 <GPIO_SetPinDirection+0x4e>
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	9d 81       	ldd	r25, Y+5	; 0x05
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	71 f0       	breq	.+28     	; 0x1500 <GPIO_SetPinDirection+0x68>
    14e4:	bf c1       	rjmp	.+894    	; 0x1864 <GPIO_SetPinDirection+0x3cc>
    14e6:	2c 81       	ldd	r18, Y+4	; 0x04
    14e8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ea:	22 30       	cpi	r18, 0x02	; 2
    14ec:	31 05       	cpc	r19, r1
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <GPIO_SetPinDirection+0x5a>
    14f0:	e1 c0       	rjmp	.+450    	; 0x16b4 <GPIO_SetPinDirection+0x21c>
    14f2:	8c 81       	ldd	r24, Y+4	; 0x04
    14f4:	9d 81       	ldd	r25, Y+5	; 0x05
    14f6:	83 30       	cpi	r24, 0x03	; 3
    14f8:	91 05       	cpc	r25, r1
    14fa:	09 f4       	brne	.+2      	; 0x14fe <GPIO_SetPinDirection+0x66>
    14fc:	48 c1       	rjmp	.+656    	; 0x178e <GPIO_SetPinDirection+0x2f6>
    14fe:	b2 c1       	rjmp	.+868    	; 0x1864 <GPIO_SetPinDirection+0x3cc>
		{
			case PORTA_ID :
				if(PinDirction == INPUT_PIN)
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	88 23       	and	r24, r24
    1504:	41 f5       	brne	.+80     	; 0x1556 <GPIO_SetPinDirection+0xbe>
				{
					CLEAR_BIT( DDRA , PIN );
    1506:	aa e3       	ldi	r26, 0x3A	; 58
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	ea e3       	ldi	r30, 0x3A	; 58
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	48 2f       	mov	r20, r24
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <GPIO_SetPinDirection+0x8a>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	2a 95       	dec	r18
    1524:	e2 f7       	brpl	.-8      	; 0x151e <GPIO_SetPinDirection+0x86>
    1526:	80 95       	com	r24
    1528:	84 23       	and	r24, r20
    152a:	8c 93       	st	X, r24
					CLEAR_BIT( PORTA ,PIN );
    152c:	ab e3       	ldi	r26, 0x3B	; 59
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	eb e3       	ldi	r30, 0x3B	; 59
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	48 2f       	mov	r20, r24
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	02 2e       	mov	r0, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <GPIO_SetPinDirection+0xb2>
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <GPIO_SetPinDirection+0xae>
    154e:	80 95       	com	r24
    1550:	84 23       	and	r24, r20
    1552:	8c 93       	st	X, r24
    1554:	87 c1       	rjmp	.+782    	; 0x1864 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	39 f5       	brne	.+78     	; 0x15aa <GPIO_SetPinDirection+0x112>
				{
					CLEAR_BIT( DDRA , PIN );
    155c:	aa e3       	ldi	r26, 0x3A	; 58
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	ea e3       	ldi	r30, 0x3A	; 58
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <GPIO_SetPinDirection+0xe0>
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	2a 95       	dec	r18
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <GPIO_SetPinDirection+0xdc>
    157c:	80 95       	com	r24
    157e:	84 23       	and	r24, r20
    1580:	8c 93       	st	X, r24
					SET_BIT( PORTA , PIN );
    1582:	ab e3       	ldi	r26, 0x3B	; 59
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	eb e3       	ldi	r30, 0x3B	; 59
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	48 2f       	mov	r20, r24
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 2e       	mov	r0, r18
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <GPIO_SetPinDirection+0x108>
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	0a 94       	dec	r0
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <GPIO_SetPinDirection+0x104>
    15a4:	84 2b       	or	r24, r20
    15a6:	8c 93       	st	X, r24
    15a8:	5d c1       	rjmp	.+698    	; 0x1864 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	82 30       	cpi	r24, 0x02	; 2
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <GPIO_SetPinDirection+0x11a>
    15b0:	59 c1       	rjmp	.+690    	; 0x1864 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRA , PIN );
    15b2:	aa e3       	ldi	r26, 0x3A	; 58
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	ea e3       	ldi	r30, 0x3A	; 58
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	48 2f       	mov	r20, r24
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	02 2e       	mov	r0, r18
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <GPIO_SetPinDirection+0x138>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	0a 94       	dec	r0
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <GPIO_SetPinDirection+0x134>
    15d4:	84 2b       	or	r24, r20
    15d6:	8c 93       	st	X, r24
    15d8:	45 c1       	rjmp	.+650    	; 0x1864 <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTB_ID :
				if(PinDirction == INPUT_PIN)
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	88 23       	and	r24, r24
    15de:	41 f5       	brne	.+80     	; 0x1630 <GPIO_SetPinDirection+0x198>
				{
					CLEAR_BIT( DDRB , PIN );
    15e0:	a7 e3       	ldi	r26, 0x37	; 55
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e7 e3       	ldi	r30, 0x37	; 55
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	48 2f       	mov	r20, r24
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <GPIO_SetPinDirection+0x164>
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	2a 95       	dec	r18
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <GPIO_SetPinDirection+0x160>
    1600:	80 95       	com	r24
    1602:	84 23       	and	r24, r20
    1604:	8c 93       	st	X, r24
					CLEAR_BIT( PORTB ,PIN );
    1606:	a8 e3       	ldi	r26, 0x38	; 56
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e8 e3       	ldi	r30, 0x38	; 56
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	48 2f       	mov	r20, r24
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	02 2e       	mov	r0, r18
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <GPIO_SetPinDirection+0x18c>
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	0a 94       	dec	r0
    1626:	e2 f7       	brpl	.-8      	; 0x1620 <GPIO_SetPinDirection+0x188>
    1628:	80 95       	com	r24
    162a:	84 23       	and	r24, r20
    162c:	8c 93       	st	X, r24
    162e:	1a c1       	rjmp	.+564    	; 0x1864 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	39 f5       	brne	.+78     	; 0x1684 <GPIO_SetPinDirection+0x1ec>
				{
					CLEAR_BIT( DDRB , PIN );
    1636:	a7 e3       	ldi	r26, 0x37	; 55
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e7 e3       	ldi	r30, 0x37	; 55
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	48 2f       	mov	r20, r24
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <GPIO_SetPinDirection+0x1ba>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	2a 95       	dec	r18
    1654:	e2 f7       	brpl	.-8      	; 0x164e <GPIO_SetPinDirection+0x1b6>
    1656:	80 95       	com	r24
    1658:	84 23       	and	r24, r20
    165a:	8c 93       	st	X, r24
					SET_BIT( PORTB , PIN );
    165c:	a8 e3       	ldi	r26, 0x38	; 56
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e8 e3       	ldi	r30, 0x38	; 56
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	48 2f       	mov	r20, r24
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	02 2e       	mov	r0, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <GPIO_SetPinDirection+0x1e2>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	0a 94       	dec	r0
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <GPIO_SetPinDirection+0x1de>
    167e:	84 2b       	or	r24, r20
    1680:	8c 93       	st	X, r24
    1682:	f0 c0       	rjmp	.+480    	; 0x1864 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	82 30       	cpi	r24, 0x02	; 2
    1688:	09 f0       	breq	.+2      	; 0x168c <GPIO_SetPinDirection+0x1f4>
    168a:	ec c0       	rjmp	.+472    	; 0x1864 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRB , PIN );
    168c:	a7 e3       	ldi	r26, 0x37	; 55
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e7 e3       	ldi	r30, 0x37	; 55
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	48 2f       	mov	r20, r24
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	02 2e       	mov	r0, r18
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <GPIO_SetPinDirection+0x212>
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	0a 94       	dec	r0
    16ac:	e2 f7       	brpl	.-8      	; 0x16a6 <GPIO_SetPinDirection+0x20e>
    16ae:	84 2b       	or	r24, r20
    16b0:	8c 93       	st	X, r24
    16b2:	d8 c0       	rjmp	.+432    	; 0x1864 <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTC_ID :
				if(PinDirction == INPUT_PIN)
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	88 23       	and	r24, r24
    16b8:	41 f5       	brne	.+80     	; 0x170a <GPIO_SetPinDirection+0x272>
				{
					CLEAR_BIT( DDRC , PIN );
    16ba:	a4 e3       	ldi	r26, 0x34	; 52
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e4 e3       	ldi	r30, 0x34	; 52
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <GPIO_SetPinDirection+0x23e>
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	2a 95       	dec	r18
    16d8:	e2 f7       	brpl	.-8      	; 0x16d2 <GPIO_SetPinDirection+0x23a>
    16da:	80 95       	com	r24
    16dc:	84 23       	and	r24, r20
    16de:	8c 93       	st	X, r24
					CLEAR_BIT( PORTC ,PIN );
    16e0:	a5 e3       	ldi	r26, 0x35	; 53
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e5 e3       	ldi	r30, 0x35	; 53
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	48 2f       	mov	r20, r24
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	02 2e       	mov	r0, r18
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <GPIO_SetPinDirection+0x266>
    16fa:	88 0f       	add	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	0a 94       	dec	r0
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <GPIO_SetPinDirection+0x262>
    1702:	80 95       	com	r24
    1704:	84 23       	and	r24, r20
    1706:	8c 93       	st	X, r24
    1708:	ad c0       	rjmp	.+346    	; 0x1864 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	81 30       	cpi	r24, 0x01	; 1
    170e:	39 f5       	brne	.+78     	; 0x175e <GPIO_SetPinDirection+0x2c6>
				{
					CLEAR_BIT( DDRC , PIN );
    1710:	a4 e3       	ldi	r26, 0x34	; 52
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e4 e3       	ldi	r30, 0x34	; 52
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	48 2f       	mov	r20, r24
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	02 c0       	rjmp	.+4      	; 0x172c <GPIO_SetPinDirection+0x294>
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	2a 95       	dec	r18
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <GPIO_SetPinDirection+0x290>
    1730:	80 95       	com	r24
    1732:	84 23       	and	r24, r20
    1734:	8c 93       	st	X, r24
					SET_BIT( PORTC , PIN );
    1736:	a5 e3       	ldi	r26, 0x35	; 53
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e5 e3       	ldi	r30, 0x35	; 53
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	48 2f       	mov	r20, r24
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	02 2e       	mov	r0, r18
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <GPIO_SetPinDirection+0x2bc>
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	0a 94       	dec	r0
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <GPIO_SetPinDirection+0x2b8>
    1758:	84 2b       	or	r24, r20
    175a:	8c 93       	st	X, r24
    175c:	83 c0       	rjmp	.+262    	; 0x1864 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	82 30       	cpi	r24, 0x02	; 2
    1762:	09 f0       	breq	.+2      	; 0x1766 <GPIO_SetPinDirection+0x2ce>
    1764:	7f c0       	rjmp	.+254    	; 0x1864 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRC , PIN );
    1766:	a4 e3       	ldi	r26, 0x34	; 52
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e4 e3       	ldi	r30, 0x34	; 52
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	48 2f       	mov	r20, r24
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	02 2e       	mov	r0, r18
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <GPIO_SetPinDirection+0x2ec>
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	0a 94       	dec	r0
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <GPIO_SetPinDirection+0x2e8>
    1788:	84 2b       	or	r24, r20
    178a:	8c 93       	st	X, r24
    178c:	6b c0       	rjmp	.+214    	; 0x1864 <GPIO_SetPinDirection+0x3cc>
				}
				break;

			case PORTD_ID :
				if(PinDirction == INPUT_PIN)
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	88 23       	and	r24, r24
    1792:	41 f5       	brne	.+80     	; 0x17e4 <GPIO_SetPinDirection+0x34c>
				{
					CLEAR_BIT( DDRD , PIN );
    1794:	a1 e3       	ldi	r26, 0x31	; 49
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e1 e3       	ldi	r30, 0x31	; 49
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	48 2f       	mov	r20, r24
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <GPIO_SetPinDirection+0x318>
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	2a 95       	dec	r18
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <GPIO_SetPinDirection+0x314>
    17b4:	80 95       	com	r24
    17b6:	84 23       	and	r24, r20
    17b8:	8c 93       	st	X, r24
					CLEAR_BIT( PORTD ,PIN );
    17ba:	a2 e3       	ldi	r26, 0x32	; 50
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e2 e3       	ldi	r30, 0x32	; 50
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	48 2f       	mov	r20, r24
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	02 2e       	mov	r0, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <GPIO_SetPinDirection+0x340>
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	0a 94       	dec	r0
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <GPIO_SetPinDirection+0x33c>
    17dc:	80 95       	com	r24
    17de:	84 23       	and	r24, r20
    17e0:	8c 93       	st	X, r24
    17e2:	40 c0       	rjmp	.+128    	; 0x1864 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == INPUT_PIN_PULLUP)
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	81 30       	cpi	r24, 0x01	; 1
    17e8:	39 f5       	brne	.+78     	; 0x1838 <GPIO_SetPinDirection+0x3a0>
				{
					CLEAR_BIT( DDRD , PIN );
    17ea:	a1 e3       	ldi	r26, 0x31	; 49
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e1 e3       	ldi	r30, 0x31	; 49
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	48 2f       	mov	r20, r24
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <GPIO_SetPinDirection+0x36e>
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	2a 95       	dec	r18
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <GPIO_SetPinDirection+0x36a>
    180a:	80 95       	com	r24
    180c:	84 23       	and	r24, r20
    180e:	8c 93       	st	X, r24
					SET_BIT( PORTD , PIN );
    1810:	a2 e3       	ldi	r26, 0x32	; 50
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e2 e3       	ldi	r30, 0x32	; 50
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	48 2f       	mov	r20, r24
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	02 2e       	mov	r0, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <GPIO_SetPinDirection+0x396>
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	0a 94       	dec	r0
    1830:	e2 f7       	brpl	.-8      	; 0x182a <GPIO_SetPinDirection+0x392>
    1832:	84 2b       	or	r24, r20
    1834:	8c 93       	st	X, r24
    1836:	16 c0       	rjmp	.+44     	; 0x1864 <GPIO_SetPinDirection+0x3cc>
				}
				else if(PinDirction == OUTPUT_PIN)
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	82 30       	cpi	r24, 0x02	; 2
    183c:	99 f4       	brne	.+38     	; 0x1864 <GPIO_SetPinDirection+0x3cc>
				{
					SET_BIT( DDRD , PIN );
    183e:	a1 e3       	ldi	r26, 0x31	; 49
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e1 e3       	ldi	r30, 0x31	; 49
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	48 2f       	mov	r20, r24
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	02 2e       	mov	r0, r18
    1856:	02 c0       	rjmp	.+4      	; 0x185c <GPIO_SetPinDirection+0x3c4>
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	0a 94       	dec	r0
    185e:	e2 f7       	brpl	.-8      	; 0x1858 <GPIO_SetPinDirection+0x3c0>
    1860:	84 2b       	or	r24, r20
    1862:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	cf 91       	pop	r28
    1870:	df 91       	pop	r29
    1872:	08 95       	ret

00001874 <GPIO_ReadPin>:


uint8 GPIO_ReadPin(uint8 PORTX , uint8 PIN )
{
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	00 d0       	rcall	.+0      	; 0x187a <GPIO_ReadPin+0x6>
    187a:	00 d0       	rcall	.+0      	; 0x187c <GPIO_ReadPin+0x8>
    187c:	0f 92       	push	r0
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	8a 83       	std	Y+2, r24	; 0x02
    1884:	6b 83       	std	Y+3, r22	; 0x03
    uint8 returned_value = LOGIC_LOW ;
    1886:	19 82       	std	Y+1, r1	; 0x01

    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	84 30       	cpi	r24, 0x04	; 4
    188c:	08 f0       	brcs	.+2      	; 0x1890 <GPIO_ReadPin+0x1c>
    188e:	84 c0       	rjmp	.+264    	; 0x1998 <GPIO_ReadPin+0x124>
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	88 30       	cpi	r24, 0x08	; 8
    1894:	08 f0       	brcs	.+2      	; 0x1898 <GPIO_ReadPin+0x24>
    1896:	80 c0       	rjmp	.+256    	; 0x1998 <GPIO_ReadPin+0x124>
    {
        /* Do Nothing*/
    }
    else 
    {
        switch (PORTX)
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	3d 83       	std	Y+5, r19	; 0x05
    18a0:	2c 83       	std	Y+4, r18	; 0x04
    18a2:	4c 81       	ldd	r20, Y+4	; 0x04
    18a4:	5d 81       	ldd	r21, Y+5	; 0x05
    18a6:	41 30       	cpi	r20, 0x01	; 1
    18a8:	51 05       	cpc	r21, r1
    18aa:	79 f1       	breq	.+94     	; 0x190a <GPIO_ReadPin+0x96>
    18ac:	8c 81       	ldd	r24, Y+4	; 0x04
    18ae:	9d 81       	ldd	r25, Y+5	; 0x05
    18b0:	82 30       	cpi	r24, 0x02	; 2
    18b2:	91 05       	cpc	r25, r1
    18b4:	34 f4       	brge	.+12     	; 0x18c2 <GPIO_ReadPin+0x4e>
    18b6:	2c 81       	ldd	r18, Y+4	; 0x04
    18b8:	3d 81       	ldd	r19, Y+5	; 0x05
    18ba:	21 15       	cp	r18, r1
    18bc:	31 05       	cpc	r19, r1
    18be:	69 f0       	breq	.+26     	; 0x18da <GPIO_ReadPin+0x66>
    18c0:	6b c0       	rjmp	.+214    	; 0x1998 <GPIO_ReadPin+0x124>
    18c2:	4c 81       	ldd	r20, Y+4	; 0x04
    18c4:	5d 81       	ldd	r21, Y+5	; 0x05
    18c6:	42 30       	cpi	r20, 0x02	; 2
    18c8:	51 05       	cpc	r21, r1
    18ca:	b9 f1       	breq	.+110    	; 0x193a <GPIO_ReadPin+0xc6>
    18cc:	8c 81       	ldd	r24, Y+4	; 0x04
    18ce:	9d 81       	ldd	r25, Y+5	; 0x05
    18d0:	83 30       	cpi	r24, 0x03	; 3
    18d2:	91 05       	cpc	r25, r1
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <GPIO_ReadPin+0x64>
    18d6:	49 c0       	rjmp	.+146    	; 0x196a <GPIO_ReadPin+0xf6>
    18d8:	5f c0       	rjmp	.+190    	; 0x1998 <GPIO_ReadPin+0x124>
        {
            case PORTA_ID :
                if( BIT_IS_SET(PINA,PIN) )
    18da:	e9 e3       	ldi	r30, 0x39	; 57
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	88 2f       	mov	r24, r24
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	a9 01       	movw	r20, r18
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <GPIO_ReadPin+0x7e>
    18ee:	55 95       	asr	r21
    18f0:	47 95       	ror	r20
    18f2:	8a 95       	dec	r24
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <GPIO_ReadPin+0x7a>
    18f6:	ca 01       	movw	r24, r20
    18f8:	81 70       	andi	r24, 0x01	; 1
    18fa:	90 70       	andi	r25, 0x00	; 0
    18fc:	88 23       	and	r24, r24
    18fe:	19 f0       	breq	.+6      	; 0x1906 <GPIO_ReadPin+0x92>
                    returned_value = LOGIC_HIGH;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	49 c0       	rjmp	.+146    	; 0x1998 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1906:	19 82       	std	Y+1, r1	; 0x01
    1908:	47 c0       	rjmp	.+142    	; 0x1998 <GPIO_ReadPin+0x124>
                break ;

            case PORTB_ID :
                if( BIT_IS_SET(PINB,PIN) )
    190a:	e6 e3       	ldi	r30, 0x36	; 54
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	88 2f       	mov	r24, r24
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	a9 01       	movw	r20, r18
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <GPIO_ReadPin+0xae>
    191e:	55 95       	asr	r21
    1920:	47 95       	ror	r20
    1922:	8a 95       	dec	r24
    1924:	e2 f7       	brpl	.-8      	; 0x191e <GPIO_ReadPin+0xaa>
    1926:	ca 01       	movw	r24, r20
    1928:	81 70       	andi	r24, 0x01	; 1
    192a:	90 70       	andi	r25, 0x00	; 0
    192c:	88 23       	and	r24, r24
    192e:	19 f0       	breq	.+6      	; 0x1936 <GPIO_ReadPin+0xc2>
                    returned_value = LOGIC_HIGH;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	31 c0       	rjmp	.+98     	; 0x1998 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1936:	19 82       	std	Y+1, r1	; 0x01
    1938:	2f c0       	rjmp	.+94     	; 0x1998 <GPIO_ReadPin+0x124>

                break ;

            case PORTC_ID :
                if( BIT_IS_SET(PINC,PIN) )
    193a:	e3 e3       	ldi	r30, 0x33	; 51
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	88 2f       	mov	r24, r24
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a9 01       	movw	r20, r18
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <GPIO_ReadPin+0xde>
    194e:	55 95       	asr	r21
    1950:	47 95       	ror	r20
    1952:	8a 95       	dec	r24
    1954:	e2 f7       	brpl	.-8      	; 0x194e <GPIO_ReadPin+0xda>
    1956:	ca 01       	movw	r24, r20
    1958:	81 70       	andi	r24, 0x01	; 1
    195a:	90 70       	andi	r25, 0x00	; 0
    195c:	88 23       	and	r24, r24
    195e:	19 f0       	breq	.+6      	; 0x1966 <GPIO_ReadPin+0xf2>
                    returned_value = LOGIC_HIGH;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	19 c0       	rjmp	.+50     	; 0x1998 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1966:	19 82       	std	Y+1, r1	; 0x01
    1968:	17 c0       	rjmp	.+46     	; 0x1998 <GPIO_ReadPin+0x124>

                break ;

            case PORTD_ID :
                if( BIT_IS_SET(PIND,PIN) )
    196a:	e0 e3       	ldi	r30, 0x30	; 48
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	88 2f       	mov	r24, r24
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	a9 01       	movw	r20, r18
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <GPIO_ReadPin+0x10e>
    197e:	55 95       	asr	r21
    1980:	47 95       	ror	r20
    1982:	8a 95       	dec	r24
    1984:	e2 f7       	brpl	.-8      	; 0x197e <GPIO_ReadPin+0x10a>
    1986:	ca 01       	movw	r24, r20
    1988:	81 70       	andi	r24, 0x01	; 1
    198a:	90 70       	andi	r25, 0x00	; 0
    198c:	88 23       	and	r24, r24
    198e:	19 f0       	breq	.+6      	; 0x1996 <GPIO_ReadPin+0x122>
                    returned_value = LOGIC_HIGH;
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	01 c0       	rjmp	.+2      	; 0x1998 <GPIO_ReadPin+0x124>
                else
                    returned_value = LOGIC_LOW ;
    1996:	19 82       	std	Y+1, r1	; 0x01
                break ;

        }
    }

    return returned_value ;
    1998:	89 81       	ldd	r24, Y+1	; 0x01
}
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <GPIO_WritePin>:



void GPIO_WritePin(uint8 PORTX , uint8 PIN ,uint8 value)
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <GPIO_WritePin+0x6>
    19b0:	00 d0       	rcall	.+0      	; 0x19b2 <GPIO_WritePin+0x8>
    19b2:	0f 92       	push	r0
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	6a 83       	std	Y+2, r22	; 0x02
    19bc:	4b 83       	std	Y+3, r20	; 0x03
    if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	84 30       	cpi	r24, 0x04	; 4
    19c2:	08 f0       	brcs	.+2      	; 0x19c6 <GPIO_WritePin+0x1c>
    19c4:	e4 c0       	rjmp	.+456    	; 0x1b8e <GPIO_WritePin+0x1e4>
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	88 30       	cpi	r24, 0x08	; 8
    19ca:	08 f0       	brcs	.+2      	; 0x19ce <GPIO_WritePin+0x24>
    19cc:	e0 c0       	rjmp	.+448    	; 0x1b8e <GPIO_WritePin+0x1e4>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	3d 83       	std	Y+5, r19	; 0x05
    19d6:	2c 83       	std	Y+4, r18	; 0x04
    19d8:	8c 81       	ldd	r24, Y+4	; 0x04
    19da:	9d 81       	ldd	r25, Y+5	; 0x05
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	91 05       	cpc	r25, r1
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <GPIO_WritePin+0x3a>
    19e2:	47 c0       	rjmp	.+142    	; 0x1a72 <GPIO_WritePin+0xc8>
    19e4:	2c 81       	ldd	r18, Y+4	; 0x04
    19e6:	3d 81       	ldd	r19, Y+5	; 0x05
    19e8:	22 30       	cpi	r18, 0x02	; 2
    19ea:	31 05       	cpc	r19, r1
    19ec:	2c f4       	brge	.+10     	; 0x19f8 <GPIO_WritePin+0x4e>
    19ee:	8c 81       	ldd	r24, Y+4	; 0x04
    19f0:	9d 81       	ldd	r25, Y+5	; 0x05
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	71 f0       	breq	.+28     	; 0x1a12 <GPIO_WritePin+0x68>
    19f6:	cb c0       	rjmp	.+406    	; 0x1b8e <GPIO_WritePin+0x1e4>
    19f8:	2c 81       	ldd	r18, Y+4	; 0x04
    19fa:	3d 81       	ldd	r19, Y+5	; 0x05
    19fc:	22 30       	cpi	r18, 0x02	; 2
    19fe:	31 05       	cpc	r19, r1
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <GPIO_WritePin+0x5a>
    1a02:	67 c0       	rjmp	.+206    	; 0x1ad2 <GPIO_WritePin+0x128>
    1a04:	8c 81       	ldd	r24, Y+4	; 0x04
    1a06:	9d 81       	ldd	r25, Y+5	; 0x05
    1a08:	83 30       	cpi	r24, 0x03	; 3
    1a0a:	91 05       	cpc	r25, r1
    1a0c:	09 f4       	brne	.+2      	; 0x1a10 <GPIO_WritePin+0x66>
    1a0e:	91 c0       	rjmp	.+290    	; 0x1b32 <GPIO_WritePin+0x188>
    1a10:	be c0       	rjmp	.+380    	; 0x1b8e <GPIO_WritePin+0x1e4>
        {
            case PORTA_ID :
                if(value == LOGIC_HIGH)
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	81 30       	cpi	r24, 0x01	; 1
    1a16:	a1 f4       	brne	.+40     	; 0x1a40 <GPIO_WritePin+0x96>
                    SET_BIT(PORTA,PIN);
    1a18:	ab e3       	ldi	r26, 0x3B	; 59
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	eb e3       	ldi	r30, 0x3B	; 59
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	48 2f       	mov	r20, r24
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	02 2e       	mov	r0, r18
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <GPIO_WritePin+0x8c>
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	0a 94       	dec	r0
    1a38:	e2 f7       	brpl	.-8      	; 0x1a32 <GPIO_WritePin+0x88>
    1a3a:	84 2b       	or	r24, r20
    1a3c:	8c 93       	st	X, r24
    1a3e:	a7 c0       	rjmp	.+334    	; 0x1b8e <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	88 23       	and	r24, r24
    1a44:	09 f0       	breq	.+2      	; 0x1a48 <GPIO_WritePin+0x9e>
    1a46:	a3 c0       	rjmp	.+326    	; 0x1b8e <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTA,PIN);
    1a48:	ab e3       	ldi	r26, 0x3B	; 59
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	eb e3       	ldi	r30, 0x3B	; 59
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	48 2f       	mov	r20, r24
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	02 2e       	mov	r0, r18
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <GPIO_WritePin+0xbc>
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	0a 94       	dec	r0
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <GPIO_WritePin+0xb8>
    1a6a:	80 95       	com	r24
    1a6c:	84 23       	and	r24, r20
    1a6e:	8c 93       	st	X, r24
    1a70:	8e c0       	rjmp	.+284    	; 0x1b8e <GPIO_WritePin+0x1e4>
                break;


            case PORTB_ID :
                if(value == LOGIC_HIGH)
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	81 30       	cpi	r24, 0x01	; 1
    1a76:	a1 f4       	brne	.+40     	; 0x1aa0 <GPIO_WritePin+0xf6>
                    SET_BIT(PORTB,PIN);
    1a78:	a8 e3       	ldi	r26, 0x38	; 56
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e8 e3       	ldi	r30, 0x38	; 56
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	48 2f       	mov	r20, r24
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	02 2e       	mov	r0, r18
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <GPIO_WritePin+0xec>
    1a92:	88 0f       	add	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	0a 94       	dec	r0
    1a98:	e2 f7       	brpl	.-8      	; 0x1a92 <GPIO_WritePin+0xe8>
    1a9a:	84 2b       	or	r24, r20
    1a9c:	8c 93       	st	X, r24
    1a9e:	77 c0       	rjmp	.+238    	; 0x1b8e <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	88 23       	and	r24, r24
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <GPIO_WritePin+0xfe>
    1aa6:	73 c0       	rjmp	.+230    	; 0x1b8e <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTB,PIN);
    1aa8:	a8 e3       	ldi	r26, 0x38	; 56
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e8 e3       	ldi	r30, 0x38	; 56
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	48 2f       	mov	r20, r24
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	02 2e       	mov	r0, r18
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <GPIO_WritePin+0x11c>
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	0a 94       	dec	r0
    1ac8:	e2 f7       	brpl	.-8      	; 0x1ac2 <GPIO_WritePin+0x118>
    1aca:	80 95       	com	r24
    1acc:	84 23       	and	r24, r20
    1ace:	8c 93       	st	X, r24
    1ad0:	5e c0       	rjmp	.+188    	; 0x1b8e <GPIO_WritePin+0x1e4>
                break;  

            case PORTC_ID :
                if(value == LOGIC_HIGH)
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	81 30       	cpi	r24, 0x01	; 1
    1ad6:	a1 f4       	brne	.+40     	; 0x1b00 <GPIO_WritePin+0x156>
                    SET_BIT(PORTC,PIN);
    1ad8:	a5 e3       	ldi	r26, 0x35	; 53
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e5 e3       	ldi	r30, 0x35	; 53
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	48 2f       	mov	r20, r24
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	02 2e       	mov	r0, r18
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <GPIO_WritePin+0x14c>
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	0a 94       	dec	r0
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <GPIO_WritePin+0x148>
    1afa:	84 2b       	or	r24, r20
    1afc:	8c 93       	st	X, r24
    1afe:	47 c0       	rjmp	.+142    	; 0x1b8e <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	88 23       	and	r24, r24
    1b04:	09 f0       	breq	.+2      	; 0x1b08 <GPIO_WritePin+0x15e>
    1b06:	43 c0       	rjmp	.+134    	; 0x1b8e <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTC,PIN);
    1b08:	a5 e3       	ldi	r26, 0x35	; 53
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e5 e3       	ldi	r30, 0x35	; 53
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	48 2f       	mov	r20, r24
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	02 2e       	mov	r0, r18
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <GPIO_WritePin+0x17c>
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	0a 94       	dec	r0
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <GPIO_WritePin+0x178>
    1b2a:	80 95       	com	r24
    1b2c:	84 23       	and	r24, r20
    1b2e:	8c 93       	st	X, r24
    1b30:	2e c0       	rjmp	.+92     	; 0x1b8e <GPIO_WritePin+0x1e4>
                break;

            case PORTD_ID :
                if(value == LOGIC_HIGH)
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	81 30       	cpi	r24, 0x01	; 1
    1b36:	a1 f4       	brne	.+40     	; 0x1b60 <GPIO_WritePin+0x1b6>
                    SET_BIT(PORTD,PIN);
    1b38:	a2 e3       	ldi	r26, 0x32	; 50
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e2 e3       	ldi	r30, 0x32	; 50
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	48 2f       	mov	r20, r24
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	02 2e       	mov	r0, r18
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <GPIO_WritePin+0x1ac>
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	0a 94       	dec	r0
    1b58:	e2 f7       	brpl	.-8      	; 0x1b52 <GPIO_WritePin+0x1a8>
    1b5a:	84 2b       	or	r24, r20
    1b5c:	8c 93       	st	X, r24
    1b5e:	17 c0       	rjmp	.+46     	; 0x1b8e <GPIO_WritePin+0x1e4>
                else if(value == LOGIC_LOW)
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	88 23       	and	r24, r24
    1b64:	a1 f4       	brne	.+40     	; 0x1b8e <GPIO_WritePin+0x1e4>
                    CLEAR_BIT(PORTD,PIN);
    1b66:	a2 e3       	ldi	r26, 0x32	; 50
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e2 e3       	ldi	r30, 0x32	; 50
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	48 2f       	mov	r20, r24
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	02 2e       	mov	r0, r18
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <GPIO_WritePin+0x1da>
    1b80:	88 0f       	add	r24, r24
    1b82:	99 1f       	adc	r25, r25
    1b84:	0a 94       	dec	r0
    1b86:	e2 f7       	brpl	.-8      	; 0x1b80 <GPIO_WritePin+0x1d6>
    1b88:	80 95       	com	r24
    1b8a:	84 23       	and	r24, r20
    1b8c:	8c 93       	st	X, r24
                break;

        }
    }
}
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	08 95       	ret

00001b9e <GPIO_TogglePin>:


void GPIO_TogglePin(uint8 PORTX , uint8 PIN )
{
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <GPIO_TogglePin+0x6>
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <GPIO_TogglePin+0x8>
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	89 83       	std	Y+1, r24	; 0x01
    1bac:	6a 83       	std	Y+2, r22	; 0x02
if(PORTX >= NUM_PORT  || PIN >= NUM_FOR_PINS_PER_PORT)
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	84 30       	cpi	r24, 0x04	; 4
    1bb2:	08 f0       	brcs	.+2      	; 0x1bb6 <GPIO_TogglePin+0x18>
    1bb4:	72 c0       	rjmp	.+228    	; 0x1c9a <GPIO_TogglePin+0xfc>
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	88 30       	cpi	r24, 0x08	; 8
    1bba:	08 f0       	brcs	.+2      	; 0x1bbe <GPIO_TogglePin+0x20>
    1bbc:	6e c0       	rjmp	.+220    	; 0x1c9a <GPIO_TogglePin+0xfc>
    {
        /* Do Nothing*/
    }
    else
    {
        switch(PORTX)
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	3c 83       	std	Y+4, r19	; 0x04
    1bc6:	2b 83       	std	Y+3, r18	; 0x03
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	81 30       	cpi	r24, 0x01	; 1
    1bce:	91 05       	cpc	r25, r1
    1bd0:	49 f1       	breq	.+82     	; 0x1c24 <GPIO_TogglePin+0x86>
    1bd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd6:	22 30       	cpi	r18, 0x02	; 2
    1bd8:	31 05       	cpc	r19, r1
    1bda:	2c f4       	brge	.+10     	; 0x1be6 <GPIO_TogglePin+0x48>
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	9c 81       	ldd	r25, Y+4	; 0x04
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	61 f0       	breq	.+24     	; 0x1bfc <GPIO_TogglePin+0x5e>
    1be4:	5a c0       	rjmp	.+180    	; 0x1c9a <GPIO_TogglePin+0xfc>
    1be6:	2b 81       	ldd	r18, Y+3	; 0x03
    1be8:	3c 81       	ldd	r19, Y+4	; 0x04
    1bea:	22 30       	cpi	r18, 0x02	; 2
    1bec:	31 05       	cpc	r19, r1
    1bee:	71 f1       	breq	.+92     	; 0x1c4c <GPIO_TogglePin+0xae>
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf4:	83 30       	cpi	r24, 0x03	; 3
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	e9 f1       	breq	.+122    	; 0x1c74 <GPIO_TogglePin+0xd6>
    1bfa:	4f c0       	rjmp	.+158    	; 0x1c9a <GPIO_TogglePin+0xfc>
        {
            case PORTA_ID :
                TOGGLE_BIT(PORTA,PIN);
    1bfc:	ab e3       	ldi	r26, 0x3B	; 59
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	eb e3       	ldi	r30, 0x3B	; 59
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	48 2f       	mov	r20, r24
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	28 2f       	mov	r18, r24
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	02 2e       	mov	r0, r18
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <GPIO_TogglePin+0x7c>
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	0a 94       	dec	r0
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <GPIO_TogglePin+0x78>
    1c1e:	84 27       	eor	r24, r20
    1c20:	8c 93       	st	X, r24
    1c22:	3b c0       	rjmp	.+118    	; 0x1c9a <GPIO_TogglePin+0xfc>
                break;


            case PORTB_ID :
                TOGGLE_BIT(PORTB,PIN);
    1c24:	a8 e3       	ldi	r26, 0x38	; 56
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e8 e3       	ldi	r30, 0x38	; 56
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	48 2f       	mov	r20, r24
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 2e       	mov	r0, r18
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <GPIO_TogglePin+0xa4>
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	0a 94       	dec	r0
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <GPIO_TogglePin+0xa0>
    1c46:	84 27       	eor	r24, r20
    1c48:	8c 93       	st	X, r24
    1c4a:	27 c0       	rjmp	.+78     	; 0x1c9a <GPIO_TogglePin+0xfc>
                break;  

            case PORTC_ID :
                TOGGLE_BIT(PORTC,PIN);
    1c4c:	a5 e3       	ldi	r26, 0x35	; 53
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e5 e3       	ldi	r30, 0x35	; 53
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	48 2f       	mov	r20, r24
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	02 2e       	mov	r0, r18
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <GPIO_TogglePin+0xcc>
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	0a 94       	dec	r0
    1c6c:	e2 f7       	brpl	.-8      	; 0x1c66 <GPIO_TogglePin+0xc8>
    1c6e:	84 27       	eor	r24, r20
    1c70:	8c 93       	st	X, r24
    1c72:	13 c0       	rjmp	.+38     	; 0x1c9a <GPIO_TogglePin+0xfc>
                break;

            case PORTD_ID :
                TOGGLE_BIT(PORTD,PIN);
    1c74:	a2 e3       	ldi	r26, 0x32	; 50
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e2 e3       	ldi	r30, 0x32	; 50
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	48 2f       	mov	r20, r24
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	02 2e       	mov	r0, r18
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <GPIO_TogglePin+0xf4>
    1c8e:	88 0f       	add	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	0a 94       	dec	r0
    1c94:	e2 f7       	brpl	.-8      	; 0x1c8e <GPIO_TogglePin+0xf0>
    1c96:	84 27       	eor	r24, r20
    1c98:	8c 93       	st	X, r24
                break;

        }
    }

}
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	08 95       	ret

00001ca8 <GPIO_SetPortDirection>:

void GPIO_SetPortDirection(uint8 PORTX , GPIO_PortDirectionTypes PortDirection)
{
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <GPIO_SetPortDirection+0x6>
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <GPIO_SetPortDirection+0x8>
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	6a 83       	std	Y+2, r22	; 0x02
#if (Param_Disable_All_PULLUP_resistor == Disable_PullUp_resistor)
	SET_BIT(SFIOR,PUD);
#endif

	if(PORTX >= NUM_PORT)
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	84 30       	cpi	r24, 0x04	; 4
    1cbc:	08 f0       	brcs	.+2      	; 0x1cc0 <GPIO_SetPortDirection+0x18>
    1cbe:	96 c0       	rjmp	.+300    	; 0x1dec <GPIO_SetPortDirection+0x144>
	{
		/** Do Nothing **/
	}
	else
	{
		switch(PORTX)
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	3c 83       	std	Y+4, r19	; 0x04
    1cc8:	2b 83       	std	Y+3, r18	; 0x03
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cce:	81 30       	cpi	r24, 0x01	; 1
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	a9 f1       	breq	.+106    	; 0x1d3e <GPIO_SetPortDirection+0x96>
    1cd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd8:	22 30       	cpi	r18, 0x02	; 2
    1cda:	31 05       	cpc	r19, r1
    1cdc:	2c f4       	brge	.+10     	; 0x1ce8 <GPIO_SetPortDirection+0x40>
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	71 f0       	breq	.+28     	; 0x1d02 <GPIO_SetPortDirection+0x5a>
    1ce6:	82 c0       	rjmp	.+260    	; 0x1dec <GPIO_SetPortDirection+0x144>
    1ce8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cea:	3c 81       	ldd	r19, Y+4	; 0x04
    1cec:	22 30       	cpi	r18, 0x02	; 2
    1cee:	31 05       	cpc	r19, r1
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <GPIO_SetPortDirection+0x4c>
    1cf2:	43 c0       	rjmp	.+134    	; 0x1d7a <GPIO_SetPortDirection+0xd2>
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	83 30       	cpi	r24, 0x03	; 3
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <GPIO_SetPortDirection+0x58>
    1cfe:	5a c0       	rjmp	.+180    	; 0x1db4 <GPIO_SetPortDirection+0x10c>
    1d00:	75 c0       	rjmp	.+234    	; 0x1dec <GPIO_SetPortDirection+0x144>
		{
			case PORTA_ID :
					if(PortDirection == INPUT_PORT)
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	88 23       	and	r24, r24
    1d06:	39 f4       	brne	.+14     	; 0x1d16 <GPIO_SetPortDirection+0x6e>
					{
						DDRA = ZEROS_WORD ; // set port input
    1d08:	ea e3       	ldi	r30, 0x3A	; 58
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	10 82       	st	Z, r1
						PORTA = ZEROS_WORD ; //disable pullup resistor
    1d0e:	eb e3       	ldi	r30, 0x3B	; 59
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	10 82       	st	Z, r1
    1d14:	6b c0       	rjmp	.+214    	; 0x1dec <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1d16:	8a 81       	ldd	r24, Y+2	; 0x02
    1d18:	81 30       	cpi	r24, 0x01	; 1
    1d1a:	41 f4       	brne	.+16     	; 0x1d2c <GPIO_SetPortDirection+0x84>
					{
						DDRA = ZEROS_WORD ;// set port input
    1d1c:	ea e3       	ldi	r30, 0x3A	; 58
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	10 82       	st	Z, r1
						PORTA = ONES_WORD ; //enable pullup resistor
    1d22:	eb e3       	ldi	r30, 0x3B	; 59
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	8f ef       	ldi	r24, 0xFF	; 255
    1d28:	80 83       	st	Z, r24
    1d2a:	60 c0       	rjmp	.+192    	; 0x1dec <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	8f 3f       	cpi	r24, 0xFF	; 255
    1d30:	09 f0       	breq	.+2      	; 0x1d34 <GPIO_SetPortDirection+0x8c>
    1d32:	5c c0       	rjmp	.+184    	; 0x1dec <GPIO_SetPortDirection+0x144>
					{
						DDRA = ONES_WORD ;
    1d34:	ea e3       	ldi	r30, 0x3A	; 58
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	8f ef       	ldi	r24, 0xFF	; 255
    1d3a:	80 83       	st	Z, r24
    1d3c:	57 c0       	rjmp	.+174    	; 0x1dec <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTB_ID :
					if(PortDirection == INPUT_PORT)
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	88 23       	and	r24, r24
    1d42:	39 f4       	brne	.+14     	; 0x1d52 <GPIO_SetPortDirection+0xaa>
					{
						DDRB = ZEROS_WORD ; // set port input
    1d44:	e7 e3       	ldi	r30, 0x37	; 55
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	10 82       	st	Z, r1
						PORTB = ZEROS_WORD ; //disable pullup resistor
    1d4a:	e8 e3       	ldi	r30, 0x38	; 56
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	10 82       	st	Z, r1
    1d50:	4d c0       	rjmp	.+154    	; 0x1dec <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	81 30       	cpi	r24, 0x01	; 1
    1d56:	41 f4       	brne	.+16     	; 0x1d68 <GPIO_SetPortDirection+0xc0>
					{
						DDRB = ZEROS_WORD ;// set port input
    1d58:	e7 e3       	ldi	r30, 0x37	; 55
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	10 82       	st	Z, r1
						PORTB = ONES_WORD ; //enable pullup resistor
    1d5e:	e8 e3       	ldi	r30, 0x38	; 56
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	8f ef       	ldi	r24, 0xFF	; 255
    1d64:	80 83       	st	Z, r24
    1d66:	42 c0       	rjmp	.+132    	; 0x1dec <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	8f 3f       	cpi	r24, 0xFF	; 255
    1d6c:	09 f0       	breq	.+2      	; 0x1d70 <GPIO_SetPortDirection+0xc8>
    1d6e:	3e c0       	rjmp	.+124    	; 0x1dec <GPIO_SetPortDirection+0x144>
					{
						DDRB = ONES_WORD ;
    1d70:	e7 e3       	ldi	r30, 0x37	; 55
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	8f ef       	ldi	r24, 0xFF	; 255
    1d76:	80 83       	st	Z, r24
    1d78:	39 c0       	rjmp	.+114    	; 0x1dec <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTC_ID :
					if(PortDirection == INPUT_PORT)
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	88 23       	and	r24, r24
    1d7e:	39 f4       	brne	.+14     	; 0x1d8e <GPIO_SetPortDirection+0xe6>
					{
						DDRC = ZEROS_WORD ; // set port input
    1d80:	e4 e3       	ldi	r30, 0x34	; 52
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	10 82       	st	Z, r1
						PORTC = ZEROS_WORD ; //disable pullup resistor
    1d86:	e5 e3       	ldi	r30, 0x35	; 53
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	10 82       	st	Z, r1
    1d8c:	2f c0       	rjmp	.+94     	; 0x1dec <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	81 30       	cpi	r24, 0x01	; 1
    1d92:	41 f4       	brne	.+16     	; 0x1da4 <GPIO_SetPortDirection+0xfc>
					{
						DDRC = ZEROS_WORD ;// set port input
    1d94:	e4 e3       	ldi	r30, 0x34	; 52
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	10 82       	st	Z, r1
						PORTC = ONES_WORD ; //enable pullup resistor
    1d9a:	e5 e3       	ldi	r30, 0x35	; 53
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	8f ef       	ldi	r24, 0xFF	; 255
    1da0:	80 83       	st	Z, r24
    1da2:	24 c0       	rjmp	.+72     	; 0x1dec <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	8f 3f       	cpi	r24, 0xFF	; 255
    1da8:	09 f5       	brne	.+66     	; 0x1dec <GPIO_SetPortDirection+0x144>
					{
						DDRC = ONES_WORD ;
    1daa:	e4 e3       	ldi	r30, 0x34	; 52
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	8f ef       	ldi	r24, 0xFF	; 255
    1db0:	80 83       	st	Z, r24
    1db2:	1c c0       	rjmp	.+56     	; 0x1dec <GPIO_SetPortDirection+0x144>
					}
					break;

			case PORTD_ID :
					if(PortDirection == INPUT_PORT)
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	88 23       	and	r24, r24
    1db8:	39 f4       	brne	.+14     	; 0x1dc8 <GPIO_SetPortDirection+0x120>
					{
						DDRD = ZEROS_WORD ; // set port input
    1dba:	e1 e3       	ldi	r30, 0x31	; 49
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	10 82       	st	Z, r1
						PORTD = ZEROS_WORD ; //disable pullup resistor
    1dc0:	e2 e3       	ldi	r30, 0x32	; 50
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	10 82       	st	Z, r1
    1dc6:	12 c0       	rjmp	.+36     	; 0x1dec <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == INPUT_PORT_PULLUP)
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	81 30       	cpi	r24, 0x01	; 1
    1dcc:	41 f4       	brne	.+16     	; 0x1dde <GPIO_SetPortDirection+0x136>
					{
						DDRD = ZEROS_WORD ;// set port input
    1dce:	e1 e3       	ldi	r30, 0x31	; 49
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	10 82       	st	Z, r1
						PORTD = ONES_WORD ; //enable pullup resistor
    1dd4:	e2 e3       	ldi	r30, 0x32	; 50
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	8f ef       	ldi	r24, 0xFF	; 255
    1dda:	80 83       	st	Z, r24
    1ddc:	07 c0       	rjmp	.+14     	; 0x1dec <GPIO_SetPortDirection+0x144>

					}
					else if(PortDirection == OUTPUT_PORT )
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	8f 3f       	cpi	r24, 0xFF	; 255
    1de2:	21 f4       	brne	.+8      	; 0x1dec <GPIO_SetPortDirection+0x144>
					{
						DDRD = ONES_WORD ;
    1de4:	e1 e3       	ldi	r30, 0x31	; 49
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	8f ef       	ldi	r24, 0xFF	; 255
    1dea:	80 83       	st	Z, r24
					}
					break;
		}
	}
}
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <GPIO_ReadPort>:


uint8 GPIO_ReadPort(uint8 PORTX)
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <GPIO_ReadPort+0x6>
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <GPIO_ReadPort+0x8>
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	8a 83       	std	Y+2, r24	; 0x02
    uint8 returned_value = 0 ;
    1e08:	19 82       	std	Y+1, r1	; 0x01
    if(PORTX >= NUM_PORT )
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	84 30       	cpi	r24, 0x04	; 4
    1e0e:	90 f5       	brcc	.+100    	; 0x1e74 <GPIO_ReadPort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	3c 83       	std	Y+4, r19	; 0x04
    1e18:	2b 83       	std	Y+3, r18	; 0x03
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1e:	81 30       	cpi	r24, 0x01	; 1
    1e20:	91 05       	cpc	r25, r1
    1e22:	d1 f0       	breq	.+52     	; 0x1e58 <GPIO_ReadPort+0x5e>
    1e24:	2b 81       	ldd	r18, Y+3	; 0x03
    1e26:	3c 81       	ldd	r19, Y+4	; 0x04
    1e28:	22 30       	cpi	r18, 0x02	; 2
    1e2a:	31 05       	cpc	r19, r1
    1e2c:	2c f4       	brge	.+10     	; 0x1e38 <GPIO_ReadPort+0x3e>
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	9c 81       	ldd	r25, Y+4	; 0x04
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	61 f0       	breq	.+24     	; 0x1e4e <GPIO_ReadPort+0x54>
    1e36:	1e c0       	rjmp	.+60     	; 0x1e74 <GPIO_ReadPort+0x7a>
    1e38:	2b 81       	ldd	r18, Y+3	; 0x03
    1e3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e3c:	22 30       	cpi	r18, 0x02	; 2
    1e3e:	31 05       	cpc	r19, r1
    1e40:	81 f0       	breq	.+32     	; 0x1e62 <GPIO_ReadPort+0x68>
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	9c 81       	ldd	r25, Y+4	; 0x04
    1e46:	83 30       	cpi	r24, 0x03	; 3
    1e48:	91 05       	cpc	r25, r1
    1e4a:	81 f0       	breq	.+32     	; 0x1e6c <GPIO_ReadPort+0x72>
    1e4c:	13 c0       	rjmp	.+38     	; 0x1e74 <GPIO_ReadPort+0x7a>
        {
            case PORTA_ID :
                returned_value = PINA ;
    1e4e:	e9 e3       	ldi	r30, 0x39	; 57
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	0e c0       	rjmp	.+28     	; 0x1e74 <GPIO_ReadPort+0x7a>
                break ;
            
            case PORTB_ID :
                returned_value = PINB ;
    1e58:	e6 e3       	ldi	r30, 0x36	; 54
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	89 83       	std	Y+1, r24	; 0x01
    1e60:	09 c0       	rjmp	.+18     	; 0x1e74 <GPIO_ReadPort+0x7a>
                break ; 


            case PORTC_ID :
                returned_value = PINC ;
    1e62:	e3 e3       	ldi	r30, 0x33	; 51
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	89 83       	std	Y+1, r24	; 0x01
    1e6a:	04 c0       	rjmp	.+8      	; 0x1e74 <GPIO_ReadPort+0x7a>
                break ;


            case PORTD_ID :
                returned_value = PIND ;
    1e6c:	e0 e3       	ldi	r30, 0x30	; 48
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	89 83       	std	Y+1, r24	; 0x01

        }
    }


    return returned_value ;
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <GPIO_WritePort>:



void GPIO_WritePort(uint8 PORTX  ,uint8 value)
{
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <GPIO_WritePort+0x6>
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <GPIO_WritePort+0x8>
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	6a 83       	std	Y+2, r22	; 0x02
    if(PORTX >= NUM_PORT )
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	84 30       	cpi	r24, 0x04	; 4
    1e98:	90 f5       	brcc	.+100    	; 0x1efe <GPIO_WritePort+0x7a>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	3c 83       	std	Y+4, r19	; 0x04
    1ea2:	2b 83       	std	Y+3, r18	; 0x03
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea8:	81 30       	cpi	r24, 0x01	; 1
    1eaa:	91 05       	cpc	r25, r1
    1eac:	d1 f0       	breq	.+52     	; 0x1ee2 <GPIO_WritePort+0x5e>
    1eae:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb2:	22 30       	cpi	r18, 0x02	; 2
    1eb4:	31 05       	cpc	r19, r1
    1eb6:	2c f4       	brge	.+10     	; 0x1ec2 <GPIO_WritePort+0x3e>
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	61 f0       	breq	.+24     	; 0x1ed8 <GPIO_WritePort+0x54>
    1ec0:	1e c0       	rjmp	.+60     	; 0x1efe <GPIO_WritePort+0x7a>
    1ec2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec6:	22 30       	cpi	r18, 0x02	; 2
    1ec8:	31 05       	cpc	r19, r1
    1eca:	81 f0       	breq	.+32     	; 0x1eec <GPIO_WritePort+0x68>
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed0:	83 30       	cpi	r24, 0x03	; 3
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	81 f0       	breq	.+32     	; 0x1ef6 <GPIO_WritePort+0x72>
    1ed6:	13 c0       	rjmp	.+38     	; 0x1efe <GPIO_WritePort+0x7a>
        {
            case PORTA_ID :
                PORTA = value ;
    1ed8:	eb e3       	ldi	r30, 0x3B	; 59
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	80 83       	st	Z, r24
    1ee0:	0e c0       	rjmp	.+28     	; 0x1efe <GPIO_WritePort+0x7a>
                break ;

            case PORTB_ID :
                PORTB = value ;
    1ee2:	e8 e3       	ldi	r30, 0x38	; 56
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	80 83       	st	Z, r24
    1eea:	09 c0       	rjmp	.+18     	; 0x1efe <GPIO_WritePort+0x7a>
                break ;


            case PORTC_ID :
                PORTC = value ;
    1eec:	e5 e3       	ldi	r30, 0x35	; 53
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	80 83       	st	Z, r24
    1ef4:	04 c0       	rjmp	.+8      	; 0x1efe <GPIO_WritePort+0x7a>
                break ;

            case PORTD_ID :
                PORTD = value ;
    1ef6:	e2 e3       	ldi	r30, 0x32	; 50
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	80 83       	st	Z, r24
                break ;
        }
    }
}
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <GPIO_TogglePort>:


void GPIO_TogglePort(uint8 PORTX)
{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <GPIO_TogglePort+0x6>
    1f12:	0f 92       	push	r0
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	89 83       	std	Y+1, r24	; 0x01
    if(PORTX >= NUM_PORT )
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	84 30       	cpi	r24, 0x04	; 4
    1f1e:	08 f0       	brcs	.+2      	; 0x1f22 <GPIO_TogglePort+0x16>
    1f20:	3e c0       	rjmp	.+124    	; 0x1f9e <GPIO_TogglePort+0x92>
    {
        /* Do Nothing  */
    }
    else
    {
        switch(PORTX)
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	3b 83       	std	Y+3, r19	; 0x03
    1f2a:	2a 83       	std	Y+2, r18	; 0x02
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f30:	81 30       	cpi	r24, 0x01	; 1
    1f32:	91 05       	cpc	r25, r1
    1f34:	e9 f0       	breq	.+58     	; 0x1f70 <GPIO_TogglePort+0x64>
    1f36:	2a 81       	ldd	r18, Y+2	; 0x02
    1f38:	3b 81       	ldd	r19, Y+3	; 0x03
    1f3a:	22 30       	cpi	r18, 0x02	; 2
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	2c f4       	brge	.+10     	; 0x1f4a <GPIO_TogglePort+0x3e>
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	9b 81       	ldd	r25, Y+3	; 0x03
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	61 f0       	breq	.+24     	; 0x1f60 <GPIO_TogglePort+0x54>
    1f48:	2a c0       	rjmp	.+84     	; 0x1f9e <GPIO_TogglePort+0x92>
    1f4a:	2a 81       	ldd	r18, Y+2	; 0x02
    1f4c:	3b 81       	ldd	r19, Y+3	; 0x03
    1f4e:	22 30       	cpi	r18, 0x02	; 2
    1f50:	31 05       	cpc	r19, r1
    1f52:	b1 f0       	breq	.+44     	; 0x1f80 <GPIO_TogglePort+0x74>
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	9b 81       	ldd	r25, Y+3	; 0x03
    1f58:	83 30       	cpi	r24, 0x03	; 3
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	c9 f0       	breq	.+50     	; 0x1f90 <GPIO_TogglePort+0x84>
    1f5e:	1f c0       	rjmp	.+62     	; 0x1f9e <GPIO_TogglePort+0x92>
        {
            case PORTA_ID :
                PORTA ^= 0xFF ;
    1f60:	ab e3       	ldi	r26, 0x3B	; 59
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	eb e3       	ldi	r30, 0x3B	; 59
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	80 95       	com	r24
    1f6c:	8c 93       	st	X, r24
    1f6e:	17 c0       	rjmp	.+46     	; 0x1f9e <GPIO_TogglePort+0x92>
                break ;

            case PORTB_ID :
                PORTB ^= 0xFF ;
    1f70:	a8 e3       	ldi	r26, 0x38	; 56
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	e8 e3       	ldi	r30, 0x38	; 56
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	80 95       	com	r24
    1f7c:	8c 93       	st	X, r24
    1f7e:	0f c0       	rjmp	.+30     	; 0x1f9e <GPIO_TogglePort+0x92>
                break ;


            case PORTC_ID :
                PORTC ^= 0xFF ;
    1f80:	a5 e3       	ldi	r26, 0x35	; 53
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	e5 e3       	ldi	r30, 0x35	; 53
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	80 95       	com	r24
    1f8c:	8c 93       	st	X, r24
    1f8e:	07 c0       	rjmp	.+14     	; 0x1f9e <GPIO_TogglePort+0x92>
                break ;

            case PORTD_ID :
                PORTD ^= 0xFF ;
    1f90:	a2 e3       	ldi	r26, 0x32	; 50
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e2 e3       	ldi	r30, 0x32	; 50
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	80 95       	com	r24
    1f9c:	8c 93       	st	X, r24
                break ;
        }
    }	
}
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <LCD_init>:


/**************************                   Function Implementation                   **************************/

void LCD_init(void)
{
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    /*  congfigure RS LCD pin   */
    GPIO_SetPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,OUTPUT_PIN);
    1fb2:	82 e0       	ldi	r24, 0x02	; 2
    1fb4:	60 e0       	ldi	r22, 0x00	; 0
    1fb6:	42 e0       	ldi	r20, 0x02	; 2
    1fb8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <GPIO_SetPinDirection>
    #if(OPTION_RW_PIN == READ_WRITE_LCD)
        /*  congfigure R/W LCD pin   */
        GPIO_SetPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,OUTPUT_PIN);
    1fbc:	82 e0       	ldi	r24, 0x02	; 2
    1fbe:	61 e0       	ldi	r22, 0x01	; 1
    1fc0:	42 e0       	ldi	r20, 0x02	; 2
    1fc2:	0e 94 4c 0a 	call	0x1498	; 0x1498 <GPIO_SetPinDirection>
    #endif
    /*  congfigure E LCD pin   */
    GPIO_SetPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,OUTPUT_PIN);
    1fc6:	82 e0       	ldi	r24, 0x02	; 2
    1fc8:	62 e0       	ldi	r22, 0x02	; 2
    1fca:	42 e0       	ldi	r20, 0x02	; 2
    1fcc:	0e 94 4c 0a 	call	0x1498	; 0x1498 <GPIO_SetPinDirection>
            for(uint8 it = 0 ; it < 4 ;it++)
            {
                GPIO_SetPinDirection(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,OUTPUT_PIN);
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D4,OUTPUT_PIN);
    1fd0:	82 e0       	ldi	r24, 0x02	; 2
    1fd2:	64 e0       	ldi	r22, 0x04	; 4
    1fd4:	42 e0       	ldi	r20, 0x02	; 2
    1fd6:	0e 94 4c 0a 	call	0x1498	; 0x1498 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D5,OUTPUT_PIN);
    1fda:	82 e0       	ldi	r24, 0x02	; 2
    1fdc:	65 e0       	ldi	r22, 0x05	; 5
    1fde:	42 e0       	ldi	r20, 0x02	; 2
    1fe0:	0e 94 4c 0a 	call	0x1498	; 0x1498 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D6,OUTPUT_PIN);
    1fe4:	82 e0       	ldi	r24, 0x02	; 2
    1fe6:	66 e0       	ldi	r22, 0x06	; 6
    1fe8:	42 e0       	ldi	r20, 0x02	; 2
    1fea:	0e 94 4c 0a 	call	0x1498	; 0x1498 <GPIO_SetPinDirection>
            GPIO_SetPinDirection(LCD_DATA_PORT,PIN_D7,OUTPUT_PIN);
    1fee:	82 e0       	ldi	r24, 0x02	; 2
    1ff0:	67 e0       	ldi	r22, 0x07	; 7
    1ff2:	42 e0       	ldi	r20, 0x02	; 2
    1ff4:	0e 94 4c 0a 	call	0x1498	; 0x1498 <GPIO_SetPinDirection>

        #endif
            /*  It's step mandatory in 4 bits data pins*/
            LCD_SendCommand(LCD_RETURN_TO_HOME_IN_SCREEN);
    1ff8:	82 e0       	ldi	r24, 0x02	; 2
    1ffa:	0e 94 0b 10 	call	0x2016	; 0x2016 <LCD_SendCommand>
            /*  Send command that tell I want to use 4 data pins*/
            LCD_SendCommand(LCD_2_LINE_4_BIT_5x8_DOT) ; 
    1ffe:	88 e2       	ldi	r24, 0x28	; 40
    2000:	0e 94 0b 10 	call	0x2016	; 0x2016 <LCD_SendCommand>
    #endif

    /*  Put configuration of Cursor     */
    #if(CURSOR_STATE == CURSOR_OFF)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    2004:	8c e0       	ldi	r24, 0x0C	; 12
    2006:	0e 94 0b 10 	call	0x2016	; 0x2016 <LCD_SendCommand>
    #elif(CURSOR_STATE == CURSOR_ON_NO_BLINK)
        LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_ON_BLINKING_OFF);
    #endif

    /*  Clear Screen    */
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	0e 94 0b 10 	call	0x2016	; 0x2016 <LCD_SendCommand>
}
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret

00002016 <LCD_SendCommand>:



void LCD_SendCommand(uint8 Instruction_value)
{
    2016:	0f 93       	push	r16
    2018:	1f 93       	push	r17
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	c4 56       	subi	r28, 0x64	; 100
    2024:	d0 40       	sbci	r29, 0x00	; 0
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61
    2030:	fe 01       	movw	r30, r28
    2032:	ec 59       	subi	r30, 0x9C	; 156
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	80 83       	st	Z, r24
    /*  To send instruction command first thing write LOW to RS     */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	60 e0       	ldi	r22, 0x00	; 0
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    #if(OPTION_RW_PIN == READ_WRITE_LCD)
        /*  I need to write data to lCD*/
        GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	61 e0       	ldi	r22, 0x01	; 1
    2046:	40 e0       	ldi	r20, 0x00	; 0
    2048:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    204c:	fe 01       	movw	r30, r28
    204e:	e1 5a       	subi	r30, 0xA1	; 161
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	a0 e8       	ldi	r26, 0x80	; 128
    2058:	bf e3       	ldi	r27, 0x3F	; 63
    205a:	80 83       	st	Z, r24
    205c:	91 83       	std	Z+1, r25	; 0x01
    205e:	a2 83       	std	Z+2, r26	; 0x02
    2060:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2062:	8e 01       	movw	r16, r28
    2064:	05 5a       	subi	r16, 0xA5	; 165
    2066:	1f 4f       	sbci	r17, 0xFF	; 255
    2068:	fe 01       	movw	r30, r28
    206a:	e1 5a       	subi	r30, 0xA1	; 161
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	60 81       	ld	r22, Z
    2070:	71 81       	ldd	r23, Z+1	; 0x01
    2072:	82 81       	ldd	r24, Z+2	; 0x02
    2074:	93 81       	ldd	r25, Z+3	; 0x03
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	4a e7       	ldi	r20, 0x7A	; 122
    207c:	55 e4       	ldi	r21, 0x45	; 69
    207e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	f8 01       	movw	r30, r16
    2088:	80 83       	st	Z, r24
    208a:	91 83       	std	Z+1, r25	; 0x01
    208c:	a2 83       	std	Z+2, r26	; 0x02
    208e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2090:	fe 01       	movw	r30, r28
    2092:	e5 5a       	subi	r30, 0xA5	; 165
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	60 81       	ld	r22, Z
    2098:	71 81       	ldd	r23, Z+1	; 0x01
    209a:	82 81       	ldd	r24, Z+2	; 0x02
    209c:	93 81       	ldd	r25, Z+3	; 0x03
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e8       	ldi	r20, 0x80	; 128
    20a4:	5f e3       	ldi	r21, 0x3F	; 63
    20a6:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    20aa:	88 23       	and	r24, r24
    20ac:	44 f4       	brge	.+16     	; 0x20be <LCD_SendCommand+0xa8>
		__ticks = 1;
    20ae:	fe 01       	movw	r30, r28
    20b0:	e7 5a       	subi	r30, 0xA7	; 167
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	91 83       	std	Z+1, r25	; 0x01
    20ba:	80 83       	st	Z, r24
    20bc:	64 c0       	rjmp	.+200    	; 0x2186 <LCD_SendCommand+0x170>
	else if (__tmp > 65535)
    20be:	fe 01       	movw	r30, r28
    20c0:	e5 5a       	subi	r30, 0xA5	; 165
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	60 81       	ld	r22, Z
    20c6:	71 81       	ldd	r23, Z+1	; 0x01
    20c8:	82 81       	ldd	r24, Z+2	; 0x02
    20ca:	93 81       	ldd	r25, Z+3	; 0x03
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	3f ef       	ldi	r19, 0xFF	; 255
    20d0:	4f e7       	ldi	r20, 0x7F	; 127
    20d2:	57 e4       	ldi	r21, 0x47	; 71
    20d4:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    20d8:	18 16       	cp	r1, r24
    20da:	0c f0       	brlt	.+2      	; 0x20de <LCD_SendCommand+0xc8>
    20dc:	43 c0       	rjmp	.+134    	; 0x2164 <LCD_SendCommand+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20de:	fe 01       	movw	r30, r28
    20e0:	e1 5a       	subi	r30, 0xA1	; 161
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	60 81       	ld	r22, Z
    20e6:	71 81       	ldd	r23, Z+1	; 0x01
    20e8:	82 81       	ldd	r24, Z+2	; 0x02
    20ea:	93 81       	ldd	r25, Z+3	; 0x03
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	40 e2       	ldi	r20, 0x20	; 32
    20f2:	51 e4       	ldi	r21, 0x41	; 65
    20f4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	8e 01       	movw	r16, r28
    20fe:	07 5a       	subi	r16, 0xA7	; 167
    2100:	1f 4f       	sbci	r17, 0xFF	; 255
    2102:	bc 01       	movw	r22, r24
    2104:	cd 01       	movw	r24, r26
    2106:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	f8 01       	movw	r30, r16
    2110:	91 83       	std	Z+1, r25	; 0x01
    2112:	80 83       	st	Z, r24
    2114:	1f c0       	rjmp	.+62     	; 0x2154 <LCD_SendCommand+0x13e>
    2116:	fe 01       	movw	r30, r28
    2118:	e9 5a       	subi	r30, 0xA9	; 169
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	80 e9       	ldi	r24, 0x90	; 144
    211e:	91 e0       	ldi	r25, 0x01	; 1
    2120:	91 83       	std	Z+1, r25	; 0x01
    2122:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2124:	fe 01       	movw	r30, r28
    2126:	e9 5a       	subi	r30, 0xA9	; 169
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	80 81       	ld	r24, Z
    212c:	91 81       	ldd	r25, Z+1	; 0x01
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <LCD_SendCommand+0x118>
    2132:	fe 01       	movw	r30, r28
    2134:	e9 5a       	subi	r30, 0xA9	; 169
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	91 83       	std	Z+1, r25	; 0x01
    213a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213c:	de 01       	movw	r26, r28
    213e:	a7 5a       	subi	r26, 0xA7	; 167
    2140:	bf 4f       	sbci	r27, 0xFF	; 255
    2142:	fe 01       	movw	r30, r28
    2144:	e7 5a       	subi	r30, 0xA7	; 167
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	80 81       	ld	r24, Z
    214a:	91 81       	ldd	r25, Z+1	; 0x01
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	11 96       	adiw	r26, 0x01	; 1
    2150:	9c 93       	st	X, r25
    2152:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2154:	fe 01       	movw	r30, r28
    2156:	e7 5a       	subi	r30, 0xA7	; 167
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	80 81       	ld	r24, Z
    215c:	91 81       	ldd	r25, Z+1	; 0x01
    215e:	00 97       	sbiw	r24, 0x00	; 0
    2160:	d1 f6       	brne	.-76     	; 0x2116 <LCD_SendCommand+0x100>
    2162:	27 c0       	rjmp	.+78     	; 0x21b2 <LCD_SendCommand+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2164:	8e 01       	movw	r16, r28
    2166:	07 5a       	subi	r16, 0xA7	; 167
    2168:	1f 4f       	sbci	r17, 0xFF	; 255
    216a:	fe 01       	movw	r30, r28
    216c:	e5 5a       	subi	r30, 0xA5	; 165
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	60 81       	ld	r22, Z
    2172:	71 81       	ldd	r23, Z+1	; 0x01
    2174:	82 81       	ldd	r24, Z+2	; 0x02
    2176:	93 81       	ldd	r25, Z+3	; 0x03
    2178:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	f8 01       	movw	r30, r16
    2182:	91 83       	std	Z+1, r25	; 0x01
    2184:	80 83       	st	Z, r24
    2186:	de 01       	movw	r26, r28
    2188:	ab 5a       	subi	r26, 0xAB	; 171
    218a:	bf 4f       	sbci	r27, 0xFF	; 255
    218c:	fe 01       	movw	r30, r28
    218e:	e7 5a       	subi	r30, 0xA7	; 167
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	80 81       	ld	r24, Z
    2194:	91 81       	ldd	r25, Z+1	; 0x01
    2196:	8d 93       	st	X+, r24
    2198:	9c 93       	st	X, r25
    219a:	fe 01       	movw	r30, r28
    219c:	eb 5a       	subi	r30, 0xAB	; 171
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	80 81       	ld	r24, Z
    21a2:	91 81       	ldd	r25, Z+1	; 0x01
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	f1 f7       	brne	.-4      	; 0x21a4 <LCD_SendCommand+0x18e>
    21a8:	fe 01       	movw	r30, r28
    21aa:	eb 5a       	subi	r30, 0xAB	; 171
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	91 83       	std	Z+1, r25	; 0x01
    21b0:	80 83       	st	Z, r24
    #endif
    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    21b2:	82 e0       	ldi	r24, 0x02	; 2
    21b4:	62 e0       	ldi	r22, 0x02	; 2
    21b6:	41 e0       	ldi	r20, 0x01	; 1
    21b8:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    21bc:	fe 01       	movw	r30, r28
    21be:	ef 5a       	subi	r30, 0xAF	; 175
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	a0 e8       	ldi	r26, 0x80	; 128
    21c8:	bf e3       	ldi	r27, 0x3F	; 63
    21ca:	80 83       	st	Z, r24
    21cc:	91 83       	std	Z+1, r25	; 0x01
    21ce:	a2 83       	std	Z+2, r26	; 0x02
    21d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d2:	8e 01       	movw	r16, r28
    21d4:	03 5b       	subi	r16, 0xB3	; 179
    21d6:	1f 4f       	sbci	r17, 0xFF	; 255
    21d8:	fe 01       	movw	r30, r28
    21da:	ef 5a       	subi	r30, 0xAF	; 175
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	60 81       	ld	r22, Z
    21e0:	71 81       	ldd	r23, Z+1	; 0x01
    21e2:	82 81       	ldd	r24, Z+2	; 0x02
    21e4:	93 81       	ldd	r25, Z+3	; 0x03
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	4a e7       	ldi	r20, 0x7A	; 122
    21ec:	55 e4       	ldi	r21, 0x45	; 69
    21ee:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	f8 01       	movw	r30, r16
    21f8:	80 83       	st	Z, r24
    21fa:	91 83       	std	Z+1, r25	; 0x01
    21fc:	a2 83       	std	Z+2, r26	; 0x02
    21fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2200:	fe 01       	movw	r30, r28
    2202:	e3 5b       	subi	r30, 0xB3	; 179
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	60 81       	ld	r22, Z
    2208:	71 81       	ldd	r23, Z+1	; 0x01
    220a:	82 81       	ldd	r24, Z+2	; 0x02
    220c:	93 81       	ldd	r25, Z+3	; 0x03
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e8       	ldi	r20, 0x80	; 128
    2214:	5f e3       	ldi	r21, 0x3F	; 63
    2216:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    221a:	88 23       	and	r24, r24
    221c:	44 f4       	brge	.+16     	; 0x222e <LCD_SendCommand+0x218>
		__ticks = 1;
    221e:	fe 01       	movw	r30, r28
    2220:	e5 5b       	subi	r30, 0xB5	; 181
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	91 83       	std	Z+1, r25	; 0x01
    222a:	80 83       	st	Z, r24
    222c:	64 c0       	rjmp	.+200    	; 0x22f6 <LCD_SendCommand+0x2e0>
	else if (__tmp > 65535)
    222e:	fe 01       	movw	r30, r28
    2230:	e3 5b       	subi	r30, 0xB3	; 179
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	60 81       	ld	r22, Z
    2236:	71 81       	ldd	r23, Z+1	; 0x01
    2238:	82 81       	ldd	r24, Z+2	; 0x02
    223a:	93 81       	ldd	r25, Z+3	; 0x03
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	3f ef       	ldi	r19, 0xFF	; 255
    2240:	4f e7       	ldi	r20, 0x7F	; 127
    2242:	57 e4       	ldi	r21, 0x47	; 71
    2244:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    2248:	18 16       	cp	r1, r24
    224a:	0c f0       	brlt	.+2      	; 0x224e <LCD_SendCommand+0x238>
    224c:	43 c0       	rjmp	.+134    	; 0x22d4 <LCD_SendCommand+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224e:	fe 01       	movw	r30, r28
    2250:	ef 5a       	subi	r30, 0xAF	; 175
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	60 81       	ld	r22, Z
    2256:	71 81       	ldd	r23, Z+1	; 0x01
    2258:	82 81       	ldd	r24, Z+2	; 0x02
    225a:	93 81       	ldd	r25, Z+3	; 0x03
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	40 e2       	ldi	r20, 0x20	; 32
    2262:	51 e4       	ldi	r21, 0x41	; 65
    2264:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	8e 01       	movw	r16, r28
    226e:	05 5b       	subi	r16, 0xB5	; 181
    2270:	1f 4f       	sbci	r17, 0xFF	; 255
    2272:	bc 01       	movw	r22, r24
    2274:	cd 01       	movw	r24, r26
    2276:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	f8 01       	movw	r30, r16
    2280:	91 83       	std	Z+1, r25	; 0x01
    2282:	80 83       	st	Z, r24
    2284:	1f c0       	rjmp	.+62     	; 0x22c4 <LCD_SendCommand+0x2ae>
    2286:	fe 01       	movw	r30, r28
    2288:	e7 5b       	subi	r30, 0xB7	; 183
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	80 e9       	ldi	r24, 0x90	; 144
    228e:	91 e0       	ldi	r25, 0x01	; 1
    2290:	91 83       	std	Z+1, r25	; 0x01
    2292:	80 83       	st	Z, r24
    2294:	fe 01       	movw	r30, r28
    2296:	e7 5b       	subi	r30, 0xB7	; 183
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	80 81       	ld	r24, Z
    229c:	91 81       	ldd	r25, Z+1	; 0x01
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <LCD_SendCommand+0x288>
    22a2:	fe 01       	movw	r30, r28
    22a4:	e7 5b       	subi	r30, 0xB7	; 183
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	91 83       	std	Z+1, r25	; 0x01
    22aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ac:	de 01       	movw	r26, r28
    22ae:	a5 5b       	subi	r26, 0xB5	; 181
    22b0:	bf 4f       	sbci	r27, 0xFF	; 255
    22b2:	fe 01       	movw	r30, r28
    22b4:	e5 5b       	subi	r30, 0xB5	; 181
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	80 81       	ld	r24, Z
    22ba:	91 81       	ldd	r25, Z+1	; 0x01
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	11 96       	adiw	r26, 0x01	; 1
    22c0:	9c 93       	st	X, r25
    22c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c4:	fe 01       	movw	r30, r28
    22c6:	e5 5b       	subi	r30, 0xB5	; 181
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	80 81       	ld	r24, Z
    22cc:	91 81       	ldd	r25, Z+1	; 0x01
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	d1 f6       	brne	.-76     	; 0x2286 <LCD_SendCommand+0x270>
    22d2:	27 c0       	rjmp	.+78     	; 0x2322 <LCD_SendCommand+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d4:	8e 01       	movw	r16, r28
    22d6:	05 5b       	subi	r16, 0xB5	; 181
    22d8:	1f 4f       	sbci	r17, 0xFF	; 255
    22da:	fe 01       	movw	r30, r28
    22dc:	e3 5b       	subi	r30, 0xB3	; 179
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	60 81       	ld	r22, Z
    22e2:	71 81       	ldd	r23, Z+1	; 0x01
    22e4:	82 81       	ldd	r24, Z+2	; 0x02
    22e6:	93 81       	ldd	r25, Z+3	; 0x03
    22e8:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	f8 01       	movw	r30, r16
    22f2:	91 83       	std	Z+1, r25	; 0x01
    22f4:	80 83       	st	Z, r24
    22f6:	de 01       	movw	r26, r28
    22f8:	a9 5b       	subi	r26, 0xB9	; 185
    22fa:	bf 4f       	sbci	r27, 0xFF	; 255
    22fc:	fe 01       	movw	r30, r28
    22fe:	e5 5b       	subi	r30, 0xB5	; 181
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	80 81       	ld	r24, Z
    2304:	91 81       	ldd	r25, Z+1	; 0x01
    2306:	8d 93       	st	X+, r24
    2308:	9c 93       	st	X, r25
    230a:	fe 01       	movw	r30, r28
    230c:	e9 5b       	subi	r30, 0xB9	; 185
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	80 81       	ld	r24, Z
    2312:	91 81       	ldd	r25, Z+1	; 0x01
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	f1 f7       	brne	.-4      	; 0x2314 <LCD_SendCommand+0x2fe>
    2318:	fe 01       	movw	r30, r28
    231a:	e9 5b       	subi	r30, 0xB9	; 185
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	80 83       	st	Z, r24
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,Instruction_value);
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #elif (LCD_BITS_MODE == LCD_4_BIT_MODE)
        /*  Note⛔🙆‍♂️👀 Here Most send MS 4Bits  First */
        uint8 First_4_bit = (Instruction_value >> 4) ;
    2322:	de 01       	movw	r26, r28
    2324:	ad 59       	subi	r26, 0x9D	; 157
    2326:	bf 4f       	sbci	r27, 0xFF	; 255
    2328:	fe 01       	movw	r30, r28
    232a:	ec 59       	subi	r30, 0x9C	; 156
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	80 81       	ld	r24, Z
    2330:	82 95       	swap	r24
    2332:	8f 70       	andi	r24, 0x0F	; 15
    2334:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    2336:	fe 01       	movw	r30, r28
    2338:	ed 59       	subi	r30, 0x9D	; 157
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	80 81       	ld	r24, Z
    233e:	98 2f       	mov	r25, r24
    2340:	91 70       	andi	r25, 0x01	; 1
    2342:	82 e0       	ldi	r24, 0x02	; 2
    2344:	64 e0       	ldi	r22, 0x04	; 4
    2346:	49 2f       	mov	r20, r25
    2348:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    234c:	fe 01       	movw	r30, r28
    234e:	ed 59       	subi	r30, 0x9D	; 157
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	80 81       	ld	r24, Z
    2354:	86 95       	lsr	r24
    2356:	98 2f       	mov	r25, r24
    2358:	91 70       	andi	r25, 0x01	; 1
    235a:	82 e0       	ldi	r24, 0x02	; 2
    235c:	65 e0       	ldi	r22, 0x05	; 5
    235e:	49 2f       	mov	r20, r25
    2360:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    2364:	fe 01       	movw	r30, r28
    2366:	ed 59       	subi	r30, 0x9D	; 157
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	80 81       	ld	r24, Z
    236c:	86 95       	lsr	r24
    236e:	86 95       	lsr	r24
    2370:	98 2f       	mov	r25, r24
    2372:	91 70       	andi	r25, 0x01	; 1
    2374:	82 e0       	ldi	r24, 0x02	; 2
    2376:	66 e0       	ldi	r22, 0x06	; 6
    2378:	49 2f       	mov	r20, r25
    237a:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    237e:	fe 01       	movw	r30, r28
    2380:	ed 59       	subi	r30, 0x9D	; 157
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	80 81       	ld	r24, Z
    2386:	86 95       	lsr	r24
    2388:	86 95       	lsr	r24
    238a:	86 95       	lsr	r24
    238c:	98 2f       	mov	r25, r24
    238e:	91 70       	andi	r25, 0x01	; 1
    2390:	82 e0       	ldi	r24, 0x02	; 2
    2392:	67 e0       	ldi	r22, 0x07	; 7
    2394:	49 2f       	mov	r20, r25
    2396:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    239a:	fe 01       	movw	r30, r28
    239c:	ed 5b       	subi	r30, 0xBD	; 189
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	a0 e8       	ldi	r26, 0x80	; 128
    23a6:	bf e3       	ldi	r27, 0x3F	; 63
    23a8:	80 83       	st	Z, r24
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	a2 83       	std	Z+2, r26	; 0x02
    23ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b0:	8e 01       	movw	r16, r28
    23b2:	01 5c       	subi	r16, 0xC1	; 193
    23b4:	1f 4f       	sbci	r17, 0xFF	; 255
    23b6:	fe 01       	movw	r30, r28
    23b8:	ed 5b       	subi	r30, 0xBD	; 189
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	60 81       	ld	r22, Z
    23be:	71 81       	ldd	r23, Z+1	; 0x01
    23c0:	82 81       	ldd	r24, Z+2	; 0x02
    23c2:	93 81       	ldd	r25, Z+3	; 0x03
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	4a e7       	ldi	r20, 0x7A	; 122
    23ca:	55 e4       	ldi	r21, 0x45	; 69
    23cc:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	f8 01       	movw	r30, r16
    23d6:	80 83       	st	Z, r24
    23d8:	91 83       	std	Z+1, r25	; 0x01
    23da:	a2 83       	std	Z+2, r26	; 0x02
    23dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23de:	fe 01       	movw	r30, r28
    23e0:	ff 96       	adiw	r30, 0x3f	; 63
    23e2:	60 81       	ld	r22, Z
    23e4:	71 81       	ldd	r23, Z+1	; 0x01
    23e6:	82 81       	ldd	r24, Z+2	; 0x02
    23e8:	93 81       	ldd	r25, Z+3	; 0x03
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	40 e8       	ldi	r20, 0x80	; 128
    23f0:	5f e3       	ldi	r21, 0x3F	; 63
    23f2:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    23f6:	88 23       	and	r24, r24
    23f8:	2c f4       	brge	.+10     	; 0x2404 <LCD_SendCommand+0x3ee>
		__ticks = 1;
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	9e af       	std	Y+62, r25	; 0x3e
    2400:	8d af       	std	Y+61, r24	; 0x3d
    2402:	46 c0       	rjmp	.+140    	; 0x2490 <LCD_SendCommand+0x47a>
	else if (__tmp > 65535)
    2404:	fe 01       	movw	r30, r28
    2406:	ff 96       	adiw	r30, 0x3f	; 63
    2408:	60 81       	ld	r22, Z
    240a:	71 81       	ldd	r23, Z+1	; 0x01
    240c:	82 81       	ldd	r24, Z+2	; 0x02
    240e:	93 81       	ldd	r25, Z+3	; 0x03
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	3f ef       	ldi	r19, 0xFF	; 255
    2414:	4f e7       	ldi	r20, 0x7F	; 127
    2416:	57 e4       	ldi	r21, 0x47	; 71
    2418:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    241c:	18 16       	cp	r1, r24
    241e:	64 f5       	brge	.+88     	; 0x2478 <LCD_SendCommand+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2420:	fe 01       	movw	r30, r28
    2422:	ed 5b       	subi	r30, 0xBD	; 189
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	60 81       	ld	r22, Z
    2428:	71 81       	ldd	r23, Z+1	; 0x01
    242a:	82 81       	ldd	r24, Z+2	; 0x02
    242c:	93 81       	ldd	r25, Z+3	; 0x03
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e2       	ldi	r20, 0x20	; 32
    2434:	51 e4       	ldi	r21, 0x41	; 65
    2436:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	bc 01       	movw	r22, r24
    2440:	cd 01       	movw	r24, r26
    2442:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	9e af       	std	Y+62, r25	; 0x3e
    244c:	8d af       	std	Y+61, r24	; 0x3d
    244e:	0f c0       	rjmp	.+30     	; 0x246e <LCD_SendCommand+0x458>
    2450:	80 e9       	ldi	r24, 0x90	; 144
    2452:	91 e0       	ldi	r25, 0x01	; 1
    2454:	9c af       	std	Y+60, r25	; 0x3c
    2456:	8b af       	std	Y+59, r24	; 0x3b
    2458:	8b ad       	ldd	r24, Y+59	; 0x3b
    245a:	9c ad       	ldd	r25, Y+60	; 0x3c
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	f1 f7       	brne	.-4      	; 0x245c <LCD_SendCommand+0x446>
    2460:	9c af       	std	Y+60, r25	; 0x3c
    2462:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2464:	8d ad       	ldd	r24, Y+61	; 0x3d
    2466:	9e ad       	ldd	r25, Y+62	; 0x3e
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	9e af       	std	Y+62, r25	; 0x3e
    246c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2470:	9e ad       	ldd	r25, Y+62	; 0x3e
    2472:	00 97       	sbiw	r24, 0x00	; 0
    2474:	69 f7       	brne	.-38     	; 0x2450 <LCD_SendCommand+0x43a>
    2476:	16 c0       	rjmp	.+44     	; 0x24a4 <LCD_SendCommand+0x48e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2478:	fe 01       	movw	r30, r28
    247a:	ff 96       	adiw	r30, 0x3f	; 63
    247c:	60 81       	ld	r22, Z
    247e:	71 81       	ldd	r23, Z+1	; 0x01
    2480:	82 81       	ldd	r24, Z+2	; 0x02
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	9e af       	std	Y+62, r25	; 0x3e
    248e:	8d af       	std	Y+61, r24	; 0x3d
    2490:	8d ad       	ldd	r24, Y+61	; 0x3d
    2492:	9e ad       	ldd	r25, Y+62	; 0x3e
    2494:	9a af       	std	Y+58, r25	; 0x3a
    2496:	89 af       	std	Y+57, r24	; 0x39
    2498:	89 ad       	ldd	r24, Y+57	; 0x39
    249a:	9a ad       	ldd	r25, Y+58	; 0x3a
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	f1 f7       	brne	.-4      	; 0x249c <LCD_SendCommand+0x486>
    24a0:	9a af       	std	Y+58, r25	; 0x3a
    24a2:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
         /*  Write Low to E pin in LCD to there is data in pins I wnat to read  as here read Most significant of Instruction*/
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    24a4:	82 e0       	ldi	r24, 0x02	; 2
    24a6:	62 e0       	ldi	r22, 0x02	; 2
    24a8:	40 e0       	ldi	r20, 0x00	; 0
    24aa:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	a0 e8       	ldi	r26, 0x80	; 128
    24b4:	bf e3       	ldi	r27, 0x3F	; 63
    24b6:	8d ab       	std	Y+53, r24	; 0x35
    24b8:	9e ab       	std	Y+54, r25	; 0x36
    24ba:	af ab       	std	Y+55, r26	; 0x37
    24bc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24be:	6d a9       	ldd	r22, Y+53	; 0x35
    24c0:	7e a9       	ldd	r23, Y+54	; 0x36
    24c2:	8f a9       	ldd	r24, Y+55	; 0x37
    24c4:	98 ad       	ldd	r25, Y+56	; 0x38
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	4a e7       	ldi	r20, 0x7A	; 122
    24cc:	55 e4       	ldi	r21, 0x45	; 69
    24ce:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	89 ab       	std	Y+49, r24	; 0x31
    24d8:	9a ab       	std	Y+50, r25	; 0x32
    24da:	ab ab       	std	Y+51, r26	; 0x33
    24dc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24de:	69 a9       	ldd	r22, Y+49	; 0x31
    24e0:	7a a9       	ldd	r23, Y+50	; 0x32
    24e2:	8b a9       	ldd	r24, Y+51	; 0x33
    24e4:	9c a9       	ldd	r25, Y+52	; 0x34
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e8       	ldi	r20, 0x80	; 128
    24ec:	5f e3       	ldi	r21, 0x3F	; 63
    24ee:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    24f2:	88 23       	and	r24, r24
    24f4:	2c f4       	brge	.+10     	; 0x2500 <LCD_SendCommand+0x4ea>
		__ticks = 1;
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	98 ab       	std	Y+48, r25	; 0x30
    24fc:	8f a7       	std	Y+47, r24	; 0x2f
    24fe:	3f c0       	rjmp	.+126    	; 0x257e <LCD_SendCommand+0x568>
	else if (__tmp > 65535)
    2500:	69 a9       	ldd	r22, Y+49	; 0x31
    2502:	7a a9       	ldd	r23, Y+50	; 0x32
    2504:	8b a9       	ldd	r24, Y+51	; 0x33
    2506:	9c a9       	ldd	r25, Y+52	; 0x34
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	3f ef       	ldi	r19, 0xFF	; 255
    250c:	4f e7       	ldi	r20, 0x7F	; 127
    250e:	57 e4       	ldi	r21, 0x47	; 71
    2510:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    2514:	18 16       	cp	r1, r24
    2516:	4c f5       	brge	.+82     	; 0x256a <LCD_SendCommand+0x554>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2518:	6d a9       	ldd	r22, Y+53	; 0x35
    251a:	7e a9       	ldd	r23, Y+54	; 0x36
    251c:	8f a9       	ldd	r24, Y+55	; 0x37
    251e:	98 ad       	ldd	r25, Y+56	; 0x38
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	40 e2       	ldi	r20, 0x20	; 32
    2526:	51 e4       	ldi	r21, 0x41	; 65
    2528:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	bc 01       	movw	r22, r24
    2532:	cd 01       	movw	r24, r26
    2534:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	98 ab       	std	Y+48, r25	; 0x30
    253e:	8f a7       	std	Y+47, r24	; 0x2f
    2540:	0f c0       	rjmp	.+30     	; 0x2560 <LCD_SendCommand+0x54a>
    2542:	80 e9       	ldi	r24, 0x90	; 144
    2544:	91 e0       	ldi	r25, 0x01	; 1
    2546:	9e a7       	std	Y+46, r25	; 0x2e
    2548:	8d a7       	std	Y+45, r24	; 0x2d
    254a:	8d a5       	ldd	r24, Y+45	; 0x2d
    254c:	9e a5       	ldd	r25, Y+46	; 0x2e
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	f1 f7       	brne	.-4      	; 0x254e <LCD_SendCommand+0x538>
    2552:	9e a7       	std	Y+46, r25	; 0x2e
    2554:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2556:	8f a5       	ldd	r24, Y+47	; 0x2f
    2558:	98 a9       	ldd	r25, Y+48	; 0x30
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	98 ab       	std	Y+48, r25	; 0x30
    255e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2560:	8f a5       	ldd	r24, Y+47	; 0x2f
    2562:	98 a9       	ldd	r25, Y+48	; 0x30
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	69 f7       	brne	.-38     	; 0x2542 <LCD_SendCommand+0x52c>
    2568:	14 c0       	rjmp	.+40     	; 0x2592 <LCD_SendCommand+0x57c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256a:	69 a9       	ldd	r22, Y+49	; 0x31
    256c:	7a a9       	ldd	r23, Y+50	; 0x32
    256e:	8b a9       	ldd	r24, Y+51	; 0x33
    2570:	9c a9       	ldd	r25, Y+52	; 0x34
    2572:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	98 ab       	std	Y+48, r25	; 0x30
    257c:	8f a7       	std	Y+47, r24	; 0x2f
    257e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2580:	98 a9       	ldd	r25, Y+48	; 0x30
    2582:	9c a7       	std	Y+44, r25	; 0x2c
    2584:	8b a7       	std	Y+43, r24	; 0x2b
    2586:	8b a5       	ldd	r24, Y+43	; 0x2b
    2588:	9c a5       	ldd	r25, Y+44	; 0x2c
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	f1 f7       	brne	.-4      	; 0x258a <LCD_SendCommand+0x574>
    258e:	9c a7       	std	Y+44, r25	; 0x2c
    2590:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1); /* delay for processing Th = 13ns */

        /*  Write high to E pin in LCD to read data that will send  */
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2592:	82 e0       	ldi	r24, 0x02	; 2
    2594:	62 e0       	ldi	r22, 0x02	; 2
    2596:	41 e0       	ldi	r20, 0x01	; 1
    2598:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	a0 e8       	ldi	r26, 0x80	; 128
    25a2:	bf e3       	ldi	r27, 0x3F	; 63
    25a4:	8f a3       	std	Y+39, r24	; 0x27
    25a6:	98 a7       	std	Y+40, r25	; 0x28
    25a8:	a9 a7       	std	Y+41, r26	; 0x29
    25aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ac:	6f a1       	ldd	r22, Y+39	; 0x27
    25ae:	78 a5       	ldd	r23, Y+40	; 0x28
    25b0:	89 a5       	ldd	r24, Y+41	; 0x29
    25b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	4a e7       	ldi	r20, 0x7A	; 122
    25ba:	55 e4       	ldi	r21, 0x45	; 69
    25bc:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	8b a3       	std	Y+35, r24	; 0x23
    25c6:	9c a3       	std	Y+36, r25	; 0x24
    25c8:	ad a3       	std	Y+37, r26	; 0x25
    25ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25cc:	6b a1       	ldd	r22, Y+35	; 0x23
    25ce:	7c a1       	ldd	r23, Y+36	; 0x24
    25d0:	8d a1       	ldd	r24, Y+37	; 0x25
    25d2:	9e a1       	ldd	r25, Y+38	; 0x26
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e8       	ldi	r20, 0x80	; 128
    25da:	5f e3       	ldi	r21, 0x3F	; 63
    25dc:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    25e0:	88 23       	and	r24, r24
    25e2:	2c f4       	brge	.+10     	; 0x25ee <LCD_SendCommand+0x5d8>
		__ticks = 1;
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	9a a3       	std	Y+34, r25	; 0x22
    25ea:	89 a3       	std	Y+33, r24	; 0x21
    25ec:	3f c0       	rjmp	.+126    	; 0x266c <LCD_SendCommand+0x656>
	else if (__tmp > 65535)
    25ee:	6b a1       	ldd	r22, Y+35	; 0x23
    25f0:	7c a1       	ldd	r23, Y+36	; 0x24
    25f2:	8d a1       	ldd	r24, Y+37	; 0x25
    25f4:	9e a1       	ldd	r25, Y+38	; 0x26
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	3f ef       	ldi	r19, 0xFF	; 255
    25fa:	4f e7       	ldi	r20, 0x7F	; 127
    25fc:	57 e4       	ldi	r21, 0x47	; 71
    25fe:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    2602:	18 16       	cp	r1, r24
    2604:	4c f5       	brge	.+82     	; 0x2658 <LCD_SendCommand+0x642>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2606:	6f a1       	ldd	r22, Y+39	; 0x27
    2608:	78 a5       	ldd	r23, Y+40	; 0x28
    260a:	89 a5       	ldd	r24, Y+41	; 0x29
    260c:	9a a5       	ldd	r25, Y+42	; 0x2a
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e2       	ldi	r20, 0x20	; 32
    2614:	51 e4       	ldi	r21, 0x41	; 65
    2616:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	bc 01       	movw	r22, r24
    2620:	cd 01       	movw	r24, r26
    2622:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	9a a3       	std	Y+34, r25	; 0x22
    262c:	89 a3       	std	Y+33, r24	; 0x21
    262e:	0f c0       	rjmp	.+30     	; 0x264e <LCD_SendCommand+0x638>
    2630:	80 e9       	ldi	r24, 0x90	; 144
    2632:	91 e0       	ldi	r25, 0x01	; 1
    2634:	98 a3       	std	Y+32, r25	; 0x20
    2636:	8f 8f       	std	Y+31, r24	; 0x1f
    2638:	8f 8d       	ldd	r24, Y+31	; 0x1f
    263a:	98 a1       	ldd	r25, Y+32	; 0x20
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <LCD_SendCommand+0x626>
    2640:	98 a3       	std	Y+32, r25	; 0x20
    2642:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2644:	89 a1       	ldd	r24, Y+33	; 0x21
    2646:	9a a1       	ldd	r25, Y+34	; 0x22
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	9a a3       	std	Y+34, r25	; 0x22
    264c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264e:	89 a1       	ldd	r24, Y+33	; 0x21
    2650:	9a a1       	ldd	r25, Y+34	; 0x22
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	69 f7       	brne	.-38     	; 0x2630 <LCD_SendCommand+0x61a>
    2656:	14 c0       	rjmp	.+40     	; 0x2680 <LCD_SendCommand+0x66a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2658:	6b a1       	ldd	r22, Y+35	; 0x23
    265a:	7c a1       	ldd	r23, Y+36	; 0x24
    265c:	8d a1       	ldd	r24, Y+37	; 0x25
    265e:	9e a1       	ldd	r25, Y+38	; 0x26
    2660:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	9a a3       	std	Y+34, r25	; 0x22
    266a:	89 a3       	std	Y+33, r24	; 0x21
    266c:	89 a1       	ldd	r24, Y+33	; 0x21
    266e:	9a a1       	ldd	r25, Y+34	; 0x22
    2670:	9e 8f       	std	Y+30, r25	; 0x1e
    2672:	8d 8f       	std	Y+29, r24	; 0x1d
    2674:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2676:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	f1 f7       	brne	.-4      	; 0x2678 <LCD_SendCommand+0x662>
    267c:	9e 8f       	std	Y+30, r25	; 0x1e
    267e:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

        /*  Handle LS 4Bits to send     */
        First_4_bit = Instruction_value & 0x0F ;
    2680:	de 01       	movw	r26, r28
    2682:	ad 59       	subi	r26, 0x9D	; 157
    2684:	bf 4f       	sbci	r27, 0xFF	; 255
    2686:	fe 01       	movw	r30, r28
    2688:	ec 59       	subi	r30, 0x9C	; 156
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	80 81       	ld	r24, Z
    268e:	8f 70       	andi	r24, 0x0F	; 15
    2690:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    2692:	fe 01       	movw	r30, r28
    2694:	ed 59       	subi	r30, 0x9D	; 157
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	80 81       	ld	r24, Z
    269a:	98 2f       	mov	r25, r24
    269c:	91 70       	andi	r25, 0x01	; 1
    269e:	82 e0       	ldi	r24, 0x02	; 2
    26a0:	64 e0       	ldi	r22, 0x04	; 4
    26a2:	49 2f       	mov	r20, r25
    26a4:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    26a8:	fe 01       	movw	r30, r28
    26aa:	ed 59       	subi	r30, 0x9D	; 157
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	80 81       	ld	r24, Z
    26b0:	86 95       	lsr	r24
    26b2:	98 2f       	mov	r25, r24
    26b4:	91 70       	andi	r25, 0x01	; 1
    26b6:	82 e0       	ldi	r24, 0x02	; 2
    26b8:	65 e0       	ldi	r22, 0x05	; 5
    26ba:	49 2f       	mov	r20, r25
    26bc:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    26c0:	fe 01       	movw	r30, r28
    26c2:	ed 59       	subi	r30, 0x9D	; 157
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	80 81       	ld	r24, Z
    26c8:	86 95       	lsr	r24
    26ca:	86 95       	lsr	r24
    26cc:	98 2f       	mov	r25, r24
    26ce:	91 70       	andi	r25, 0x01	; 1
    26d0:	82 e0       	ldi	r24, 0x02	; 2
    26d2:	66 e0       	ldi	r22, 0x06	; 6
    26d4:	49 2f       	mov	r20, r25
    26d6:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    26da:	fe 01       	movw	r30, r28
    26dc:	ed 59       	subi	r30, 0x9D	; 157
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	80 81       	ld	r24, Z
    26e2:	86 95       	lsr	r24
    26e4:	86 95       	lsr	r24
    26e6:	86 95       	lsr	r24
    26e8:	98 2f       	mov	r25, r24
    26ea:	91 70       	andi	r25, 0x01	; 1
    26ec:	82 e0       	ldi	r24, 0x02	; 2
    26ee:	67 e0       	ldi	r22, 0x07	; 7
    26f0:	49 2f       	mov	r20, r25
    26f2:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	a0 e8       	ldi	r26, 0x80	; 128
    26fc:	bf e3       	ldi	r27, 0x3F	; 63
    26fe:	89 8f       	std	Y+25, r24	; 0x19
    2700:	9a 8f       	std	Y+26, r25	; 0x1a
    2702:	ab 8f       	std	Y+27, r26	; 0x1b
    2704:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2706:	69 8d       	ldd	r22, Y+25	; 0x19
    2708:	7a 8d       	ldd	r23, Y+26	; 0x1a
    270a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    270c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	4a e7       	ldi	r20, 0x7A	; 122
    2714:	55 e4       	ldi	r21, 0x45	; 69
    2716:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	8d 8b       	std	Y+21, r24	; 0x15
    2720:	9e 8b       	std	Y+22, r25	; 0x16
    2722:	af 8b       	std	Y+23, r26	; 0x17
    2724:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2726:	6d 89       	ldd	r22, Y+21	; 0x15
    2728:	7e 89       	ldd	r23, Y+22	; 0x16
    272a:	8f 89       	ldd	r24, Y+23	; 0x17
    272c:	98 8d       	ldd	r25, Y+24	; 0x18
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e8       	ldi	r20, 0x80	; 128
    2734:	5f e3       	ldi	r21, 0x3F	; 63
    2736:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    273a:	88 23       	and	r24, r24
    273c:	2c f4       	brge	.+10     	; 0x2748 <LCD_SendCommand+0x732>
		__ticks = 1;
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	9c 8b       	std	Y+20, r25	; 0x14
    2744:	8b 8b       	std	Y+19, r24	; 0x13
    2746:	3f c0       	rjmp	.+126    	; 0x27c6 <LCD_SendCommand+0x7b0>
	else if (__tmp > 65535)
    2748:	6d 89       	ldd	r22, Y+21	; 0x15
    274a:	7e 89       	ldd	r23, Y+22	; 0x16
    274c:	8f 89       	ldd	r24, Y+23	; 0x17
    274e:	98 8d       	ldd	r25, Y+24	; 0x18
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	3f ef       	ldi	r19, 0xFF	; 255
    2754:	4f e7       	ldi	r20, 0x7F	; 127
    2756:	57 e4       	ldi	r21, 0x47	; 71
    2758:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    275c:	18 16       	cp	r1, r24
    275e:	4c f5       	brge	.+82     	; 0x27b2 <LCD_SendCommand+0x79c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2760:	69 8d       	ldd	r22, Y+25	; 0x19
    2762:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2764:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2766:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e2       	ldi	r20, 0x20	; 32
    276e:	51 e4       	ldi	r21, 0x41	; 65
    2770:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	bc 01       	movw	r22, r24
    277a:	cd 01       	movw	r24, r26
    277c:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	9c 8b       	std	Y+20, r25	; 0x14
    2786:	8b 8b       	std	Y+19, r24	; 0x13
    2788:	0f c0       	rjmp	.+30     	; 0x27a8 <LCD_SendCommand+0x792>
    278a:	80 e9       	ldi	r24, 0x90	; 144
    278c:	91 e0       	ldi	r25, 0x01	; 1
    278e:	9a 8b       	std	Y+18, r25	; 0x12
    2790:	89 8b       	std	Y+17, r24	; 0x11
    2792:	89 89       	ldd	r24, Y+17	; 0x11
    2794:	9a 89       	ldd	r25, Y+18	; 0x12
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	f1 f7       	brne	.-4      	; 0x2796 <LCD_SendCommand+0x780>
    279a:	9a 8b       	std	Y+18, r25	; 0x12
    279c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279e:	8b 89       	ldd	r24, Y+19	; 0x13
    27a0:	9c 89       	ldd	r25, Y+20	; 0x14
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	9c 8b       	std	Y+20, r25	; 0x14
    27a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a8:	8b 89       	ldd	r24, Y+19	; 0x13
    27aa:	9c 89       	ldd	r25, Y+20	; 0x14
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	69 f7       	brne	.-38     	; 0x278a <LCD_SendCommand+0x774>
    27b0:	14 c0       	rjmp	.+40     	; 0x27da <LCD_SendCommand+0x7c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b2:	6d 89       	ldd	r22, Y+21	; 0x15
    27b4:	7e 89       	ldd	r23, Y+22	; 0x16
    27b6:	8f 89       	ldd	r24, Y+23	; 0x17
    27b8:	98 8d       	ldd	r25, Y+24	; 0x18
    27ba:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	9c 8b       	std	Y+20, r25	; 0x14
    27c4:	8b 8b       	std	Y+19, r24	; 0x13
    27c6:	8b 89       	ldd	r24, Y+19	; 0x13
    27c8:	9c 89       	ldd	r25, Y+20	; 0x14
    27ca:	98 8b       	std	Y+16, r25	; 0x10
    27cc:	8f 87       	std	Y+15, r24	; 0x0f
    27ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    27d0:	98 89       	ldd	r25, Y+16	; 0x10
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	f1 f7       	brne	.-4      	; 0x27d2 <LCD_SendCommand+0x7bc>
    27d6:	98 8b       	std	Y+16, r25	; 0x10
    27d8:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif

    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    27da:	82 e0       	ldi	r24, 0x02	; 2
    27dc:	62 e0       	ldi	r22, 0x02	; 2
    27de:	40 e0       	ldi	r20, 0x00	; 0
    27e0:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	a0 e8       	ldi	r26, 0x80	; 128
    27ea:	bf e3       	ldi	r27, 0x3F	; 63
    27ec:	8b 87       	std	Y+11, r24	; 0x0b
    27ee:	9c 87       	std	Y+12, r25	; 0x0c
    27f0:	ad 87       	std	Y+13, r26	; 0x0d
    27f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	4a e7       	ldi	r20, 0x7A	; 122
    2802:	55 e4       	ldi	r21, 0x45	; 69
    2804:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	8f 83       	std	Y+7, r24	; 0x07
    280e:	98 87       	std	Y+8, r25	; 0x08
    2810:	a9 87       	std	Y+9, r26	; 0x09
    2812:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2814:	6f 81       	ldd	r22, Y+7	; 0x07
    2816:	78 85       	ldd	r23, Y+8	; 0x08
    2818:	89 85       	ldd	r24, Y+9	; 0x09
    281a:	9a 85       	ldd	r25, Y+10	; 0x0a
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e8       	ldi	r20, 0x80	; 128
    2822:	5f e3       	ldi	r21, 0x3F	; 63
    2824:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    2828:	88 23       	and	r24, r24
    282a:	2c f4       	brge	.+10     	; 0x2836 <LCD_SendCommand+0x820>
		__ticks = 1;
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	9e 83       	std	Y+6, r25	; 0x06
    2832:	8d 83       	std	Y+5, r24	; 0x05
    2834:	3f c0       	rjmp	.+126    	; 0x28b4 <LCD_SendCommand+0x89e>
	else if (__tmp > 65535)
    2836:	6f 81       	ldd	r22, Y+7	; 0x07
    2838:	78 85       	ldd	r23, Y+8	; 0x08
    283a:	89 85       	ldd	r24, Y+9	; 0x09
    283c:	9a 85       	ldd	r25, Y+10	; 0x0a
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	3f ef       	ldi	r19, 0xFF	; 255
    2842:	4f e7       	ldi	r20, 0x7F	; 127
    2844:	57 e4       	ldi	r21, 0x47	; 71
    2846:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    284a:	18 16       	cp	r1, r24
    284c:	4c f5       	brge	.+82     	; 0x28a0 <LCD_SendCommand+0x88a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2850:	7c 85       	ldd	r23, Y+12	; 0x0c
    2852:	8d 85       	ldd	r24, Y+13	; 0x0d
    2854:	9e 85       	ldd	r25, Y+14	; 0x0e
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	40 e2       	ldi	r20, 0x20	; 32
    285c:	51 e4       	ldi	r21, 0x41	; 65
    285e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	bc 01       	movw	r22, r24
    2868:	cd 01       	movw	r24, r26
    286a:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	9e 83       	std	Y+6, r25	; 0x06
    2874:	8d 83       	std	Y+5, r24	; 0x05
    2876:	0f c0       	rjmp	.+30     	; 0x2896 <LCD_SendCommand+0x880>
    2878:	80 e9       	ldi	r24, 0x90	; 144
    287a:	91 e0       	ldi	r25, 0x01	; 1
    287c:	9c 83       	std	Y+4, r25	; 0x04
    287e:	8b 83       	std	Y+3, r24	; 0x03
    2880:	8b 81       	ldd	r24, Y+3	; 0x03
    2882:	9c 81       	ldd	r25, Y+4	; 0x04
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	f1 f7       	brne	.-4      	; 0x2884 <LCD_SendCommand+0x86e>
    2888:	9c 83       	std	Y+4, r25	; 0x04
    288a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288c:	8d 81       	ldd	r24, Y+5	; 0x05
    288e:	9e 81       	ldd	r25, Y+6	; 0x06
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	9e 83       	std	Y+6, r25	; 0x06
    2894:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2896:	8d 81       	ldd	r24, Y+5	; 0x05
    2898:	9e 81       	ldd	r25, Y+6	; 0x06
    289a:	00 97       	sbiw	r24, 0x00	; 0
    289c:	69 f7       	brne	.-38     	; 0x2878 <LCD_SendCommand+0x862>
    289e:	14 c0       	rjmp	.+40     	; 0x28c8 <LCD_SendCommand+0x8b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a0:	6f 81       	ldd	r22, Y+7	; 0x07
    28a2:	78 85       	ldd	r23, Y+8	; 0x08
    28a4:	89 85       	ldd	r24, Y+9	; 0x09
    28a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a8:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	9e 83       	std	Y+6, r25	; 0x06
    28b2:	8d 83       	std	Y+5, r24	; 0x05
    28b4:	8d 81       	ldd	r24, Y+5	; 0x05
    28b6:	9e 81       	ldd	r25, Y+6	; 0x06
    28b8:	9a 83       	std	Y+2, r25	; 0x02
    28ba:	89 83       	std	Y+1, r24	; 0x01
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	9a 81       	ldd	r25, Y+2	; 0x02
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	f1 f7       	brne	.-4      	; 0x28c0 <LCD_SendCommand+0x8aa>
    28c4:	9a 83       	std	Y+2, r25	; 0x02
    28c6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */
}
    28c8:	cc 59       	subi	r28, 0x9C	; 156
    28ca:	df 4f       	sbci	r29, 0xFF	; 255
    28cc:	0f b6       	in	r0, 0x3f	; 63
    28ce:	f8 94       	cli
    28d0:	de bf       	out	0x3e, r29	; 62
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	cd bf       	out	0x3d, r28	; 61
    28d6:	cf 91       	pop	r28
    28d8:	df 91       	pop	r29
    28da:	1f 91       	pop	r17
    28dc:	0f 91       	pop	r16
    28de:	08 95       	ret

000028e0 <LCD_DisplayCharacter>:



void LCD_DisplayCharacter(uint8 char_value)
{
    28e0:	0f 93       	push	r16
    28e2:	1f 93       	push	r17
    28e4:	df 93       	push	r29
    28e6:	cf 93       	push	r28
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	c4 56       	subi	r28, 0x64	; 100
    28ee:	d0 40       	sbci	r29, 0x00	; 0
    28f0:	0f b6       	in	r0, 0x3f	; 63
    28f2:	f8 94       	cli
    28f4:	de bf       	out	0x3e, r29	; 62
    28f6:	0f be       	out	0x3f, r0	; 63
    28f8:	cd bf       	out	0x3d, r28	; 61
    28fa:	fe 01       	movw	r30, r28
    28fc:	ec 59       	subi	r30, 0x9C	; 156
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	80 83       	st	Z, r24
    /*  Here I want to display data in LCD so will write high in RS */
    GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);
    2902:	82 e0       	ldi	r24, 0x02	; 2
    2904:	60 e0       	ldi	r22, 0x00	; 0
    2906:	41 e0       	ldi	r20, 0x01	; 1
    2908:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    #if(OPTION_RW_PIN == READ_WRITE_LCD)
        /*  As I want to write data to DDRAM to display in LCD  */
        GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    290c:	82 e0       	ldi	r24, 0x02	; 2
    290e:	61 e0       	ldi	r22, 0x01	; 1
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    2916:	fe 01       	movw	r30, r28
    2918:	e1 5a       	subi	r30, 0xA1	; 161
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	a0 e8       	ldi	r26, 0x80	; 128
    2922:	bf e3       	ldi	r27, 0x3F	; 63
    2924:	80 83       	st	Z, r24
    2926:	91 83       	std	Z+1, r25	; 0x01
    2928:	a2 83       	std	Z+2, r26	; 0x02
    292a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    292c:	8e 01       	movw	r16, r28
    292e:	05 5a       	subi	r16, 0xA5	; 165
    2930:	1f 4f       	sbci	r17, 0xFF	; 255
    2932:	fe 01       	movw	r30, r28
    2934:	e1 5a       	subi	r30, 0xA1	; 161
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	60 81       	ld	r22, Z
    293a:	71 81       	ldd	r23, Z+1	; 0x01
    293c:	82 81       	ldd	r24, Z+2	; 0x02
    293e:	93 81       	ldd	r25, Z+3	; 0x03
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	4a e7       	ldi	r20, 0x7A	; 122
    2946:	55 e4       	ldi	r21, 0x45	; 69
    2948:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	f8 01       	movw	r30, r16
    2952:	80 83       	st	Z, r24
    2954:	91 83       	std	Z+1, r25	; 0x01
    2956:	a2 83       	std	Z+2, r26	; 0x02
    2958:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    295a:	fe 01       	movw	r30, r28
    295c:	e5 5a       	subi	r30, 0xA5	; 165
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	60 81       	ld	r22, Z
    2962:	71 81       	ldd	r23, Z+1	; 0x01
    2964:	82 81       	ldd	r24, Z+2	; 0x02
    2966:	93 81       	ldd	r25, Z+3	; 0x03
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	40 e8       	ldi	r20, 0x80	; 128
    296e:	5f e3       	ldi	r21, 0x3F	; 63
    2970:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    2974:	88 23       	and	r24, r24
    2976:	44 f4       	brge	.+16     	; 0x2988 <LCD_DisplayCharacter+0xa8>
		__ticks = 1;
    2978:	fe 01       	movw	r30, r28
    297a:	e7 5a       	subi	r30, 0xA7	; 167
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	91 83       	std	Z+1, r25	; 0x01
    2984:	80 83       	st	Z, r24
    2986:	64 c0       	rjmp	.+200    	; 0x2a50 <LCD_DisplayCharacter+0x170>
	else if (__tmp > 65535)
    2988:	fe 01       	movw	r30, r28
    298a:	e5 5a       	subi	r30, 0xA5	; 165
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	60 81       	ld	r22, Z
    2990:	71 81       	ldd	r23, Z+1	; 0x01
    2992:	82 81       	ldd	r24, Z+2	; 0x02
    2994:	93 81       	ldd	r25, Z+3	; 0x03
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	3f ef       	ldi	r19, 0xFF	; 255
    299a:	4f e7       	ldi	r20, 0x7F	; 127
    299c:	57 e4       	ldi	r21, 0x47	; 71
    299e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    29a2:	18 16       	cp	r1, r24
    29a4:	0c f0       	brlt	.+2      	; 0x29a8 <LCD_DisplayCharacter+0xc8>
    29a6:	43 c0       	rjmp	.+134    	; 0x2a2e <LCD_DisplayCharacter+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a8:	fe 01       	movw	r30, r28
    29aa:	e1 5a       	subi	r30, 0xA1	; 161
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	60 81       	ld	r22, Z
    29b0:	71 81       	ldd	r23, Z+1	; 0x01
    29b2:	82 81       	ldd	r24, Z+2	; 0x02
    29b4:	93 81       	ldd	r25, Z+3	; 0x03
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	40 e2       	ldi	r20, 0x20	; 32
    29bc:	51 e4       	ldi	r21, 0x41	; 65
    29be:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	8e 01       	movw	r16, r28
    29c8:	07 5a       	subi	r16, 0xA7	; 167
    29ca:	1f 4f       	sbci	r17, 0xFF	; 255
    29cc:	bc 01       	movw	r22, r24
    29ce:	cd 01       	movw	r24, r26
    29d0:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	f8 01       	movw	r30, r16
    29da:	91 83       	std	Z+1, r25	; 0x01
    29dc:	80 83       	st	Z, r24
    29de:	1f c0       	rjmp	.+62     	; 0x2a1e <LCD_DisplayCharacter+0x13e>
    29e0:	fe 01       	movw	r30, r28
    29e2:	e9 5a       	subi	r30, 0xA9	; 169
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	80 e9       	ldi	r24, 0x90	; 144
    29e8:	91 e0       	ldi	r25, 0x01	; 1
    29ea:	91 83       	std	Z+1, r25	; 0x01
    29ec:	80 83       	st	Z, r24
    29ee:	fe 01       	movw	r30, r28
    29f0:	e9 5a       	subi	r30, 0xA9	; 169
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	80 81       	ld	r24, Z
    29f6:	91 81       	ldd	r25, Z+1	; 0x01
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	f1 f7       	brne	.-4      	; 0x29f8 <LCD_DisplayCharacter+0x118>
    29fc:	fe 01       	movw	r30, r28
    29fe:	e9 5a       	subi	r30, 0xA9	; 169
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	91 83       	std	Z+1, r25	; 0x01
    2a04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a06:	de 01       	movw	r26, r28
    2a08:	a7 5a       	subi	r26, 0xA7	; 167
    2a0a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	e7 5a       	subi	r30, 0xA7	; 167
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	80 81       	ld	r24, Z
    2a14:	91 81       	ldd	r25, Z+1	; 0x01
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	11 96       	adiw	r26, 0x01	; 1
    2a1a:	9c 93       	st	X, r25
    2a1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1e:	fe 01       	movw	r30, r28
    2a20:	e7 5a       	subi	r30, 0xA7	; 167
    2a22:	ff 4f       	sbci	r31, 0xFF	; 255
    2a24:	80 81       	ld	r24, Z
    2a26:	91 81       	ldd	r25, Z+1	; 0x01
    2a28:	00 97       	sbiw	r24, 0x00	; 0
    2a2a:	d1 f6       	brne	.-76     	; 0x29e0 <LCD_DisplayCharacter+0x100>
    2a2c:	27 c0       	rjmp	.+78     	; 0x2a7c <LCD_DisplayCharacter+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2e:	8e 01       	movw	r16, r28
    2a30:	07 5a       	subi	r16, 0xA7	; 167
    2a32:	1f 4f       	sbci	r17, 0xFF	; 255
    2a34:	fe 01       	movw	r30, r28
    2a36:	e5 5a       	subi	r30, 0xA5	; 165
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	60 81       	ld	r22, Z
    2a3c:	71 81       	ldd	r23, Z+1	; 0x01
    2a3e:	82 81       	ldd	r24, Z+2	; 0x02
    2a40:	93 81       	ldd	r25, Z+3	; 0x03
    2a42:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	f8 01       	movw	r30, r16
    2a4c:	91 83       	std	Z+1, r25	; 0x01
    2a4e:	80 83       	st	Z, r24
    2a50:	de 01       	movw	r26, r28
    2a52:	ab 5a       	subi	r26, 0xAB	; 171
    2a54:	bf 4f       	sbci	r27, 0xFF	; 255
    2a56:	fe 01       	movw	r30, r28
    2a58:	e7 5a       	subi	r30, 0xA7	; 167
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	80 81       	ld	r24, Z
    2a5e:	91 81       	ldd	r25, Z+1	; 0x01
    2a60:	8d 93       	st	X+, r24
    2a62:	9c 93       	st	X, r25
    2a64:	fe 01       	movw	r30, r28
    2a66:	eb 5a       	subi	r30, 0xAB	; 171
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	80 81       	ld	r24, Z
    2a6c:	91 81       	ldd	r25, Z+1	; 0x01
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	f1 f7       	brne	.-4      	; 0x2a6e <LCD_DisplayCharacter+0x18e>
    2a72:	fe 01       	movw	r30, r28
    2a74:	eb 5a       	subi	r30, 0xAB	; 171
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	91 83       	std	Z+1, r25	; 0x01
    2a7a:	80 83       	st	Z, r24
    #endif
    _delay_ms(1); /* delay for processing Tas = 50ns */

    /*  Write high to E pin in LCD to read data that will send  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2a7c:	82 e0       	ldi	r24, 0x02	; 2
    2a7e:	62 e0       	ldi	r22, 0x02	; 2
    2a80:	41 e0       	ldi	r20, 0x01	; 1
    2a82:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    2a86:	fe 01       	movw	r30, r28
    2a88:	ef 5a       	subi	r30, 0xAF	; 175
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	a0 e8       	ldi	r26, 0x80	; 128
    2a92:	bf e3       	ldi	r27, 0x3F	; 63
    2a94:	80 83       	st	Z, r24
    2a96:	91 83       	std	Z+1, r25	; 0x01
    2a98:	a2 83       	std	Z+2, r26	; 0x02
    2a9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9c:	8e 01       	movw	r16, r28
    2a9e:	03 5b       	subi	r16, 0xB3	; 179
    2aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	ef 5a       	subi	r30, 0xAF	; 175
    2aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa8:	60 81       	ld	r22, Z
    2aaa:	71 81       	ldd	r23, Z+1	; 0x01
    2aac:	82 81       	ldd	r24, Z+2	; 0x02
    2aae:	93 81       	ldd	r25, Z+3	; 0x03
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	4a e7       	ldi	r20, 0x7A	; 122
    2ab6:	55 e4       	ldi	r21, 0x45	; 69
    2ab8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	f8 01       	movw	r30, r16
    2ac2:	80 83       	st	Z, r24
    2ac4:	91 83       	std	Z+1, r25	; 0x01
    2ac6:	a2 83       	std	Z+2, r26	; 0x02
    2ac8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aca:	fe 01       	movw	r30, r28
    2acc:	e3 5b       	subi	r30, 0xB3	; 179
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	60 81       	ld	r22, Z
    2ad2:	71 81       	ldd	r23, Z+1	; 0x01
    2ad4:	82 81       	ldd	r24, Z+2	; 0x02
    2ad6:	93 81       	ldd	r25, Z+3	; 0x03
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e8       	ldi	r20, 0x80	; 128
    2ade:	5f e3       	ldi	r21, 0x3F	; 63
    2ae0:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    2ae4:	88 23       	and	r24, r24
    2ae6:	44 f4       	brge	.+16     	; 0x2af8 <LCD_DisplayCharacter+0x218>
		__ticks = 1;
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e5 5b       	subi	r30, 0xB5	; 181
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	91 83       	std	Z+1, r25	; 0x01
    2af4:	80 83       	st	Z, r24
    2af6:	64 c0       	rjmp	.+200    	; 0x2bc0 <LCD_DisplayCharacter+0x2e0>
	else if (__tmp > 65535)
    2af8:	fe 01       	movw	r30, r28
    2afa:	e3 5b       	subi	r30, 0xB3	; 179
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	60 81       	ld	r22, Z
    2b00:	71 81       	ldd	r23, Z+1	; 0x01
    2b02:	82 81       	ldd	r24, Z+2	; 0x02
    2b04:	93 81       	ldd	r25, Z+3	; 0x03
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	3f ef       	ldi	r19, 0xFF	; 255
    2b0a:	4f e7       	ldi	r20, 0x7F	; 127
    2b0c:	57 e4       	ldi	r21, 0x47	; 71
    2b0e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    2b12:	18 16       	cp	r1, r24
    2b14:	0c f0       	brlt	.+2      	; 0x2b18 <LCD_DisplayCharacter+0x238>
    2b16:	43 c0       	rjmp	.+134    	; 0x2b9e <LCD_DisplayCharacter+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b18:	fe 01       	movw	r30, r28
    2b1a:	ef 5a       	subi	r30, 0xAF	; 175
    2b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1e:	60 81       	ld	r22, Z
    2b20:	71 81       	ldd	r23, Z+1	; 0x01
    2b22:	82 81       	ldd	r24, Z+2	; 0x02
    2b24:	93 81       	ldd	r25, Z+3	; 0x03
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e2       	ldi	r20, 0x20	; 32
    2b2c:	51 e4       	ldi	r21, 0x41	; 65
    2b2e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	8e 01       	movw	r16, r28
    2b38:	05 5b       	subi	r16, 0xB5	; 181
    2b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b3c:	bc 01       	movw	r22, r24
    2b3e:	cd 01       	movw	r24, r26
    2b40:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	f8 01       	movw	r30, r16
    2b4a:	91 83       	std	Z+1, r25	; 0x01
    2b4c:	80 83       	st	Z, r24
    2b4e:	1f c0       	rjmp	.+62     	; 0x2b8e <LCD_DisplayCharacter+0x2ae>
    2b50:	fe 01       	movw	r30, r28
    2b52:	e7 5b       	subi	r30, 0xB7	; 183
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	80 e9       	ldi	r24, 0x90	; 144
    2b58:	91 e0       	ldi	r25, 0x01	; 1
    2b5a:	91 83       	std	Z+1, r25	; 0x01
    2b5c:	80 83       	st	Z, r24
    2b5e:	fe 01       	movw	r30, r28
    2b60:	e7 5b       	subi	r30, 0xB7	; 183
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	80 81       	ld	r24, Z
    2b66:	91 81       	ldd	r25, Z+1	; 0x01
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <LCD_DisplayCharacter+0x288>
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	e7 5b       	subi	r30, 0xB7	; 183
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	91 83       	std	Z+1, r25	; 0x01
    2b74:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b76:	de 01       	movw	r26, r28
    2b78:	a5 5b       	subi	r26, 0xB5	; 181
    2b7a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	e5 5b       	subi	r30, 0xB5	; 181
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	80 81       	ld	r24, Z
    2b84:	91 81       	ldd	r25, Z+1	; 0x01
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	11 96       	adiw	r26, 0x01	; 1
    2b8a:	9c 93       	st	X, r25
    2b8c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8e:	fe 01       	movw	r30, r28
    2b90:	e5 5b       	subi	r30, 0xB5	; 181
    2b92:	ff 4f       	sbci	r31, 0xFF	; 255
    2b94:	80 81       	ld	r24, Z
    2b96:	91 81       	ldd	r25, Z+1	; 0x01
    2b98:	00 97       	sbiw	r24, 0x00	; 0
    2b9a:	d1 f6       	brne	.-76     	; 0x2b50 <LCD_DisplayCharacter+0x270>
    2b9c:	27 c0       	rjmp	.+78     	; 0x2bec <LCD_DisplayCharacter+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9e:	8e 01       	movw	r16, r28
    2ba0:	05 5b       	subi	r16, 0xB5	; 181
    2ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e3 5b       	subi	r30, 0xB3	; 179
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	60 81       	ld	r22, Z
    2bac:	71 81       	ldd	r23, Z+1	; 0x01
    2bae:	82 81       	ldd	r24, Z+2	; 0x02
    2bb0:	93 81       	ldd	r25, Z+3	; 0x03
    2bb2:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	f8 01       	movw	r30, r16
    2bbc:	91 83       	std	Z+1, r25	; 0x01
    2bbe:	80 83       	st	Z, r24
    2bc0:	de 01       	movw	r26, r28
    2bc2:	a9 5b       	subi	r26, 0xB9	; 185
    2bc4:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	e5 5b       	subi	r30, 0xB5	; 181
    2bca:	ff 4f       	sbci	r31, 0xFF	; 255
    2bcc:	80 81       	ld	r24, Z
    2bce:	91 81       	ldd	r25, Z+1	; 0x01
    2bd0:	8d 93       	st	X+, r24
    2bd2:	9c 93       	st	X, r25
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	e9 5b       	subi	r30, 0xB9	; 185
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	80 81       	ld	r24, Z
    2bdc:	91 81       	ldd	r25, Z+1	; 0x01
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	f1 f7       	brne	.-4      	; 0x2bde <LCD_DisplayCharacter+0x2fe>
    2be2:	fe 01       	movw	r30, r28
    2be4:	e9 5b       	subi	r30, 0xB9	; 185
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	91 83       	std	Z+1, r25	; 0x01
    2bea:	80 83       	st	Z, r24
        /*  Send data direct though DB0 : DB7   */
        GPIO_WritePort(LCD_DATA_PORT,char_value);
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #elif (LCD_BITS_MODE == LCD_4_BIT_MODE)
        /*  Note⛔🙆‍♂️👀 Here Most send MS 4Bits  First */
        uint8 First_4_bit = (char_value >> 4) ;
    2bec:	de 01       	movw	r26, r28
    2bee:	ad 59       	subi	r26, 0x9D	; 157
    2bf0:	bf 4f       	sbci	r27, 0xFF	; 255
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	ec 59       	subi	r30, 0x9C	; 156
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	80 81       	ld	r24, Z
    2bfa:	82 95       	swap	r24
    2bfc:	8f 70       	andi	r24, 0x0F	; 15
    2bfe:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    2c00:	fe 01       	movw	r30, r28
    2c02:	ed 59       	subi	r30, 0x9D	; 157
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	80 81       	ld	r24, Z
    2c08:	98 2f       	mov	r25, r24
    2c0a:	91 70       	andi	r25, 0x01	; 1
    2c0c:	82 e0       	ldi	r24, 0x02	; 2
    2c0e:	64 e0       	ldi	r22, 0x04	; 4
    2c10:	49 2f       	mov	r20, r25
    2c12:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    2c16:	fe 01       	movw	r30, r28
    2c18:	ed 59       	subi	r30, 0x9D	; 157
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	80 81       	ld	r24, Z
    2c1e:	86 95       	lsr	r24
    2c20:	98 2f       	mov	r25, r24
    2c22:	91 70       	andi	r25, 0x01	; 1
    2c24:	82 e0       	ldi	r24, 0x02	; 2
    2c26:	65 e0       	ldi	r22, 0x05	; 5
    2c28:	49 2f       	mov	r20, r25
    2c2a:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    2c2e:	fe 01       	movw	r30, r28
    2c30:	ed 59       	subi	r30, 0x9D	; 157
    2c32:	ff 4f       	sbci	r31, 0xFF	; 255
    2c34:	80 81       	ld	r24, Z
    2c36:	86 95       	lsr	r24
    2c38:	86 95       	lsr	r24
    2c3a:	98 2f       	mov	r25, r24
    2c3c:	91 70       	andi	r25, 0x01	; 1
    2c3e:	82 e0       	ldi	r24, 0x02	; 2
    2c40:	66 e0       	ldi	r22, 0x06	; 6
    2c42:	49 2f       	mov	r20, r25
    2c44:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    2c48:	fe 01       	movw	r30, r28
    2c4a:	ed 59       	subi	r30, 0x9D	; 157
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	80 81       	ld	r24, Z
    2c50:	86 95       	lsr	r24
    2c52:	86 95       	lsr	r24
    2c54:	86 95       	lsr	r24
    2c56:	98 2f       	mov	r25, r24
    2c58:	91 70       	andi	r25, 0x01	; 1
    2c5a:	82 e0       	ldi	r24, 0x02	; 2
    2c5c:	67 e0       	ldi	r22, 0x07	; 7
    2c5e:	49 2f       	mov	r20, r25
    2c60:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    2c64:	fe 01       	movw	r30, r28
    2c66:	ed 5b       	subi	r30, 0xBD	; 189
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	a0 e8       	ldi	r26, 0x80	; 128
    2c70:	bf e3       	ldi	r27, 0x3F	; 63
    2c72:	80 83       	st	Z, r24
    2c74:	91 83       	std	Z+1, r25	; 0x01
    2c76:	a2 83       	std	Z+2, r26	; 0x02
    2c78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c7a:	8e 01       	movw	r16, r28
    2c7c:	01 5c       	subi	r16, 0xC1	; 193
    2c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c80:	fe 01       	movw	r30, r28
    2c82:	ed 5b       	subi	r30, 0xBD	; 189
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	60 81       	ld	r22, Z
    2c88:	71 81       	ldd	r23, Z+1	; 0x01
    2c8a:	82 81       	ldd	r24, Z+2	; 0x02
    2c8c:	93 81       	ldd	r25, Z+3	; 0x03
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	4a e7       	ldi	r20, 0x7A	; 122
    2c94:	55 e4       	ldi	r21, 0x45	; 69
    2c96:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	f8 01       	movw	r30, r16
    2ca0:	80 83       	st	Z, r24
    2ca2:	91 83       	std	Z+1, r25	; 0x01
    2ca4:	a2 83       	std	Z+2, r26	; 0x02
    2ca6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ca8:	fe 01       	movw	r30, r28
    2caa:	ff 96       	adiw	r30, 0x3f	; 63
    2cac:	60 81       	ld	r22, Z
    2cae:	71 81       	ldd	r23, Z+1	; 0x01
    2cb0:	82 81       	ldd	r24, Z+2	; 0x02
    2cb2:	93 81       	ldd	r25, Z+3	; 0x03
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e8       	ldi	r20, 0x80	; 128
    2cba:	5f e3       	ldi	r21, 0x3F	; 63
    2cbc:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    2cc0:	88 23       	and	r24, r24
    2cc2:	2c f4       	brge	.+10     	; 0x2cce <LCD_DisplayCharacter+0x3ee>
		__ticks = 1;
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	9e af       	std	Y+62, r25	; 0x3e
    2cca:	8d af       	std	Y+61, r24	; 0x3d
    2ccc:	46 c0       	rjmp	.+140    	; 0x2d5a <LCD_DisplayCharacter+0x47a>
	else if (__tmp > 65535)
    2cce:	fe 01       	movw	r30, r28
    2cd0:	ff 96       	adiw	r30, 0x3f	; 63
    2cd2:	60 81       	ld	r22, Z
    2cd4:	71 81       	ldd	r23, Z+1	; 0x01
    2cd6:	82 81       	ldd	r24, Z+2	; 0x02
    2cd8:	93 81       	ldd	r25, Z+3	; 0x03
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	3f ef       	ldi	r19, 0xFF	; 255
    2cde:	4f e7       	ldi	r20, 0x7F	; 127
    2ce0:	57 e4       	ldi	r21, 0x47	; 71
    2ce2:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    2ce6:	18 16       	cp	r1, r24
    2ce8:	64 f5       	brge	.+88     	; 0x2d42 <LCD_DisplayCharacter+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cea:	fe 01       	movw	r30, r28
    2cec:	ed 5b       	subi	r30, 0xBD	; 189
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	60 81       	ld	r22, Z
    2cf2:	71 81       	ldd	r23, Z+1	; 0x01
    2cf4:	82 81       	ldd	r24, Z+2	; 0x02
    2cf6:	93 81       	ldd	r25, Z+3	; 0x03
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	40 e2       	ldi	r20, 0x20	; 32
    2cfe:	51 e4       	ldi	r21, 0x41	; 65
    2d00:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	bc 01       	movw	r22, r24
    2d0a:	cd 01       	movw	r24, r26
    2d0c:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	9e af       	std	Y+62, r25	; 0x3e
    2d16:	8d af       	std	Y+61, r24	; 0x3d
    2d18:	0f c0       	rjmp	.+30     	; 0x2d38 <LCD_DisplayCharacter+0x458>
    2d1a:	80 e9       	ldi	r24, 0x90	; 144
    2d1c:	91 e0       	ldi	r25, 0x01	; 1
    2d1e:	9c af       	std	Y+60, r25	; 0x3c
    2d20:	8b af       	std	Y+59, r24	; 0x3b
    2d22:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d24:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d26:	01 97       	sbiw	r24, 0x01	; 1
    2d28:	f1 f7       	brne	.-4      	; 0x2d26 <LCD_DisplayCharacter+0x446>
    2d2a:	9c af       	std	Y+60, r25	; 0x3c
    2d2c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d2e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d30:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	9e af       	std	Y+62, r25	; 0x3e
    2d36:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d38:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d3c:	00 97       	sbiw	r24, 0x00	; 0
    2d3e:	69 f7       	brne	.-38     	; 0x2d1a <LCD_DisplayCharacter+0x43a>
    2d40:	16 c0       	rjmp	.+44     	; 0x2d6e <LCD_DisplayCharacter+0x48e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d42:	fe 01       	movw	r30, r28
    2d44:	ff 96       	adiw	r30, 0x3f	; 63
    2d46:	60 81       	ld	r22, Z
    2d48:	71 81       	ldd	r23, Z+1	; 0x01
    2d4a:	82 81       	ldd	r24, Z+2	; 0x02
    2d4c:	93 81       	ldd	r25, Z+3	; 0x03
    2d4e:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	9e af       	std	Y+62, r25	; 0x3e
    2d58:	8d af       	std	Y+61, r24	; 0x3d
    2d5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d5e:	9a af       	std	Y+58, r25	; 0x3a
    2d60:	89 af       	std	Y+57, r24	; 0x39
    2d62:	89 ad       	ldd	r24, Y+57	; 0x39
    2d64:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d66:	01 97       	sbiw	r24, 0x01	; 1
    2d68:	f1 f7       	brne	.-4      	; 0x2d66 <LCD_DisplayCharacter+0x486>
    2d6a:	9a af       	std	Y+58, r25	; 0x3a
    2d6c:	89 af       	std	Y+57, r24	; 0x39
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
         /*  Write Low to E pin in LCD to there is data in pins I wnat to read  as here read Most significant of Instruction*/
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    2d6e:	82 e0       	ldi	r24, 0x02	; 2
    2d70:	62 e0       	ldi	r22, 0x02	; 2
    2d72:	40 e0       	ldi	r20, 0x00	; 0
    2d74:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	a0 e8       	ldi	r26, 0x80	; 128
    2d7e:	bf e3       	ldi	r27, 0x3F	; 63
    2d80:	8d ab       	std	Y+53, r24	; 0x35
    2d82:	9e ab       	std	Y+54, r25	; 0x36
    2d84:	af ab       	std	Y+55, r26	; 0x37
    2d86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d88:	6d a9       	ldd	r22, Y+53	; 0x35
    2d8a:	7e a9       	ldd	r23, Y+54	; 0x36
    2d8c:	8f a9       	ldd	r24, Y+55	; 0x37
    2d8e:	98 ad       	ldd	r25, Y+56	; 0x38
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	4a e7       	ldi	r20, 0x7A	; 122
    2d96:	55 e4       	ldi	r21, 0x45	; 69
    2d98:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	89 ab       	std	Y+49, r24	; 0x31
    2da2:	9a ab       	std	Y+50, r25	; 0x32
    2da4:	ab ab       	std	Y+51, r26	; 0x33
    2da6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2da8:	69 a9       	ldd	r22, Y+49	; 0x31
    2daa:	7a a9       	ldd	r23, Y+50	; 0x32
    2dac:	8b a9       	ldd	r24, Y+51	; 0x33
    2dae:	9c a9       	ldd	r25, Y+52	; 0x34
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	40 e8       	ldi	r20, 0x80	; 128
    2db6:	5f e3       	ldi	r21, 0x3F	; 63
    2db8:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    2dbc:	88 23       	and	r24, r24
    2dbe:	2c f4       	brge	.+10     	; 0x2dca <LCD_DisplayCharacter+0x4ea>
		__ticks = 1;
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	98 ab       	std	Y+48, r25	; 0x30
    2dc6:	8f a7       	std	Y+47, r24	; 0x2f
    2dc8:	3f c0       	rjmp	.+126    	; 0x2e48 <LCD_DisplayCharacter+0x568>
	else if (__tmp > 65535)
    2dca:	69 a9       	ldd	r22, Y+49	; 0x31
    2dcc:	7a a9       	ldd	r23, Y+50	; 0x32
    2dce:	8b a9       	ldd	r24, Y+51	; 0x33
    2dd0:	9c a9       	ldd	r25, Y+52	; 0x34
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	3f ef       	ldi	r19, 0xFF	; 255
    2dd6:	4f e7       	ldi	r20, 0x7F	; 127
    2dd8:	57 e4       	ldi	r21, 0x47	; 71
    2dda:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    2dde:	18 16       	cp	r1, r24
    2de0:	4c f5       	brge	.+82     	; 0x2e34 <LCD_DisplayCharacter+0x554>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de2:	6d a9       	ldd	r22, Y+53	; 0x35
    2de4:	7e a9       	ldd	r23, Y+54	; 0x36
    2de6:	8f a9       	ldd	r24, Y+55	; 0x37
    2de8:	98 ad       	ldd	r25, Y+56	; 0x38
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	40 e2       	ldi	r20, 0x20	; 32
    2df0:	51 e4       	ldi	r21, 0x41	; 65
    2df2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	bc 01       	movw	r22, r24
    2dfc:	cd 01       	movw	r24, r26
    2dfe:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	98 ab       	std	Y+48, r25	; 0x30
    2e08:	8f a7       	std	Y+47, r24	; 0x2f
    2e0a:	0f c0       	rjmp	.+30     	; 0x2e2a <LCD_DisplayCharacter+0x54a>
    2e0c:	80 e9       	ldi	r24, 0x90	; 144
    2e0e:	91 e0       	ldi	r25, 0x01	; 1
    2e10:	9e a7       	std	Y+46, r25	; 0x2e
    2e12:	8d a7       	std	Y+45, r24	; 0x2d
    2e14:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e16:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e18:	01 97       	sbiw	r24, 0x01	; 1
    2e1a:	f1 f7       	brne	.-4      	; 0x2e18 <LCD_DisplayCharacter+0x538>
    2e1c:	9e a7       	std	Y+46, r25	; 0x2e
    2e1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e20:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e22:	98 a9       	ldd	r25, Y+48	; 0x30
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	98 ab       	std	Y+48, r25	; 0x30
    2e28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e2c:	98 a9       	ldd	r25, Y+48	; 0x30
    2e2e:	00 97       	sbiw	r24, 0x00	; 0
    2e30:	69 f7       	brne	.-38     	; 0x2e0c <LCD_DisplayCharacter+0x52c>
    2e32:	14 c0       	rjmp	.+40     	; 0x2e5c <LCD_DisplayCharacter+0x57c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e34:	69 a9       	ldd	r22, Y+49	; 0x31
    2e36:	7a a9       	ldd	r23, Y+50	; 0x32
    2e38:	8b a9       	ldd	r24, Y+51	; 0x33
    2e3a:	9c a9       	ldd	r25, Y+52	; 0x34
    2e3c:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	98 ab       	std	Y+48, r25	; 0x30
    2e46:	8f a7       	std	Y+47, r24	; 0x2f
    2e48:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e4a:	98 a9       	ldd	r25, Y+48	; 0x30
    2e4c:	9c a7       	std	Y+44, r25	; 0x2c
    2e4e:	8b a7       	std	Y+43, r24	; 0x2b
    2e50:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e52:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e54:	01 97       	sbiw	r24, 0x01	; 1
    2e56:	f1 f7       	brne	.-4      	; 0x2e54 <LCD_DisplayCharacter+0x574>
    2e58:	9c a7       	std	Y+44, r25	; 0x2c
    2e5a:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(1); /* delay for processing Th = 13ns */

        /*  Write high to E pin in LCD to read data that will send  */
        GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    2e5c:	82 e0       	ldi	r24, 0x02	; 2
    2e5e:	62 e0       	ldi	r22, 0x02	; 2
    2e60:	41 e0       	ldi	r20, 0x01	; 1
    2e62:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	a0 e8       	ldi	r26, 0x80	; 128
    2e6c:	bf e3       	ldi	r27, 0x3F	; 63
    2e6e:	8f a3       	std	Y+39, r24	; 0x27
    2e70:	98 a7       	std	Y+40, r25	; 0x28
    2e72:	a9 a7       	std	Y+41, r26	; 0x29
    2e74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e76:	6f a1       	ldd	r22, Y+39	; 0x27
    2e78:	78 a5       	ldd	r23, Y+40	; 0x28
    2e7a:	89 a5       	ldd	r24, Y+41	; 0x29
    2e7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	4a e7       	ldi	r20, 0x7A	; 122
    2e84:	55 e4       	ldi	r21, 0x45	; 69
    2e86:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	8b a3       	std	Y+35, r24	; 0x23
    2e90:	9c a3       	std	Y+36, r25	; 0x24
    2e92:	ad a3       	std	Y+37, r26	; 0x25
    2e94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e96:	6b a1       	ldd	r22, Y+35	; 0x23
    2e98:	7c a1       	ldd	r23, Y+36	; 0x24
    2e9a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e9c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e8       	ldi	r20, 0x80	; 128
    2ea4:	5f e3       	ldi	r21, 0x3F	; 63
    2ea6:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    2eaa:	88 23       	and	r24, r24
    2eac:	2c f4       	brge	.+10     	; 0x2eb8 <LCD_DisplayCharacter+0x5d8>
		__ticks = 1;
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	9a a3       	std	Y+34, r25	; 0x22
    2eb4:	89 a3       	std	Y+33, r24	; 0x21
    2eb6:	3f c0       	rjmp	.+126    	; 0x2f36 <LCD_DisplayCharacter+0x656>
	else if (__tmp > 65535)
    2eb8:	6b a1       	ldd	r22, Y+35	; 0x23
    2eba:	7c a1       	ldd	r23, Y+36	; 0x24
    2ebc:	8d a1       	ldd	r24, Y+37	; 0x25
    2ebe:	9e a1       	ldd	r25, Y+38	; 0x26
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	3f ef       	ldi	r19, 0xFF	; 255
    2ec4:	4f e7       	ldi	r20, 0x7F	; 127
    2ec6:	57 e4       	ldi	r21, 0x47	; 71
    2ec8:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    2ecc:	18 16       	cp	r1, r24
    2ece:	4c f5       	brge	.+82     	; 0x2f22 <LCD_DisplayCharacter+0x642>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed0:	6f a1       	ldd	r22, Y+39	; 0x27
    2ed2:	78 a5       	ldd	r23, Y+40	; 0x28
    2ed4:	89 a5       	ldd	r24, Y+41	; 0x29
    2ed6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	40 e2       	ldi	r20, 0x20	; 32
    2ede:	51 e4       	ldi	r21, 0x41	; 65
    2ee0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	bc 01       	movw	r22, r24
    2eea:	cd 01       	movw	r24, r26
    2eec:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	9a a3       	std	Y+34, r25	; 0x22
    2ef6:	89 a3       	std	Y+33, r24	; 0x21
    2ef8:	0f c0       	rjmp	.+30     	; 0x2f18 <LCD_DisplayCharacter+0x638>
    2efa:	80 e9       	ldi	r24, 0x90	; 144
    2efc:	91 e0       	ldi	r25, 0x01	; 1
    2efe:	98 a3       	std	Y+32, r25	; 0x20
    2f00:	8f 8f       	std	Y+31, r24	; 0x1f
    2f02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f04:	98 a1       	ldd	r25, Y+32	; 0x20
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	f1 f7       	brne	.-4      	; 0x2f06 <LCD_DisplayCharacter+0x626>
    2f0a:	98 a3       	std	Y+32, r25	; 0x20
    2f0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f0e:	89 a1       	ldd	r24, Y+33	; 0x21
    2f10:	9a a1       	ldd	r25, Y+34	; 0x22
    2f12:	01 97       	sbiw	r24, 0x01	; 1
    2f14:	9a a3       	std	Y+34, r25	; 0x22
    2f16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f18:	89 a1       	ldd	r24, Y+33	; 0x21
    2f1a:	9a a1       	ldd	r25, Y+34	; 0x22
    2f1c:	00 97       	sbiw	r24, 0x00	; 0
    2f1e:	69 f7       	brne	.-38     	; 0x2efa <LCD_DisplayCharacter+0x61a>
    2f20:	14 c0       	rjmp	.+40     	; 0x2f4a <LCD_DisplayCharacter+0x66a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f22:	6b a1       	ldd	r22, Y+35	; 0x23
    2f24:	7c a1       	ldd	r23, Y+36	; 0x24
    2f26:	8d a1       	ldd	r24, Y+37	; 0x25
    2f28:	9e a1       	ldd	r25, Y+38	; 0x26
    2f2a:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	9a a3       	std	Y+34, r25	; 0x22
    2f34:	89 a3       	std	Y+33, r24	; 0x21
    2f36:	89 a1       	ldd	r24, Y+33	; 0x21
    2f38:	9a a1       	ldd	r25, Y+34	; 0x22
    2f3a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f3c:	8d 8f       	std	Y+29, r24	; 0x1d
    2f3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f42:	01 97       	sbiw	r24, 0x01	; 1
    2f44:	f1 f7       	brne	.-4      	; 0x2f42 <LCD_DisplayCharacter+0x662>
    2f46:	9e 8f       	std	Y+30, r25	; 0x1e
    2f48:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

        /*  Handle LS 4Bits to send     */
        First_4_bit = char_value & 0x0F ;
    2f4a:	de 01       	movw	r26, r28
    2f4c:	ad 59       	subi	r26, 0x9D	; 157
    2f4e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f50:	fe 01       	movw	r30, r28
    2f52:	ec 59       	subi	r30, 0x9C	; 156
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	80 81       	ld	r24, Z
    2f58:	8f 70       	andi	r24, 0x0F	; 15
    2f5a:	8c 93       	st	X, r24
            for(uint8 it =0 ; it < 4 ;it++ )
            {
                GPIO_WritePin(LCD_DATA_PORT,LCD_4_BIT_START_PIN + it,( (First_4_bit >> it) & (0x01) ) );
            }
        #elif(OPTION_PINS == NOT_Sequencial_PINS)
            GPIO_WritePin(LCD_DATA_PORT,PIN_D4,( (First_4_bit >> 0) & (0x01) ) );
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	ed 59       	subi	r30, 0x9D	; 157
    2f60:	ff 4f       	sbci	r31, 0xFF	; 255
    2f62:	80 81       	ld	r24, Z
    2f64:	98 2f       	mov	r25, r24
    2f66:	91 70       	andi	r25, 0x01	; 1
    2f68:	82 e0       	ldi	r24, 0x02	; 2
    2f6a:	64 e0       	ldi	r22, 0x04	; 4
    2f6c:	49 2f       	mov	r20, r25
    2f6e:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D5,( (First_4_bit >> 1) & (0x01) ) );
    2f72:	fe 01       	movw	r30, r28
    2f74:	ed 59       	subi	r30, 0x9D	; 157
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	80 81       	ld	r24, Z
    2f7a:	86 95       	lsr	r24
    2f7c:	98 2f       	mov	r25, r24
    2f7e:	91 70       	andi	r25, 0x01	; 1
    2f80:	82 e0       	ldi	r24, 0x02	; 2
    2f82:	65 e0       	ldi	r22, 0x05	; 5
    2f84:	49 2f       	mov	r20, r25
    2f86:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D6,( (First_4_bit >> 2) & (0x01) ) );
    2f8a:	fe 01       	movw	r30, r28
    2f8c:	ed 59       	subi	r30, 0x9D	; 157
    2f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f90:	80 81       	ld	r24, Z
    2f92:	86 95       	lsr	r24
    2f94:	86 95       	lsr	r24
    2f96:	98 2f       	mov	r25, r24
    2f98:	91 70       	andi	r25, 0x01	; 1
    2f9a:	82 e0       	ldi	r24, 0x02	; 2
    2f9c:	66 e0       	ldi	r22, 0x06	; 6
    2f9e:	49 2f       	mov	r20, r25
    2fa0:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
            GPIO_WritePin(LCD_DATA_PORT,PIN_D7,( (First_4_bit >> 3) & (0x01) ) );
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	ed 59       	subi	r30, 0x9D	; 157
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	80 81       	ld	r24, Z
    2fac:	86 95       	lsr	r24
    2fae:	86 95       	lsr	r24
    2fb0:	86 95       	lsr	r24
    2fb2:	98 2f       	mov	r25, r24
    2fb4:	91 70       	andi	r25, 0x01	; 1
    2fb6:	82 e0       	ldi	r24, 0x02	; 2
    2fb8:	67 e0       	ldi	r22, 0x07	; 7
    2fba:	49 2f       	mov	r20, r25
    2fbc:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	a0 e8       	ldi	r26, 0x80	; 128
    2fc6:	bf e3       	ldi	r27, 0x3F	; 63
    2fc8:	89 8f       	std	Y+25, r24	; 0x19
    2fca:	9a 8f       	std	Y+26, r25	; 0x1a
    2fcc:	ab 8f       	std	Y+27, r26	; 0x1b
    2fce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd0:	69 8d       	ldd	r22, Y+25	; 0x19
    2fd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fd8:	20 e0       	ldi	r18, 0x00	; 0
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	4a e7       	ldi	r20, 0x7A	; 122
    2fde:	55 e4       	ldi	r21, 0x45	; 69
    2fe0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	cb 01       	movw	r24, r22
    2fe8:	8d 8b       	std	Y+21, r24	; 0x15
    2fea:	9e 8b       	std	Y+22, r25	; 0x16
    2fec:	af 8b       	std	Y+23, r26	; 0x17
    2fee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ff0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	40 e8       	ldi	r20, 0x80	; 128
    2ffe:	5f e3       	ldi	r21, 0x3F	; 63
    3000:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    3004:	88 23       	and	r24, r24
    3006:	2c f4       	brge	.+10     	; 0x3012 <LCD_DisplayCharacter+0x732>
		__ticks = 1;
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	9c 8b       	std	Y+20, r25	; 0x14
    300e:	8b 8b       	std	Y+19, r24	; 0x13
    3010:	3f c0       	rjmp	.+126    	; 0x3090 <LCD_DisplayCharacter+0x7b0>
	else if (__tmp > 65535)
    3012:	6d 89       	ldd	r22, Y+21	; 0x15
    3014:	7e 89       	ldd	r23, Y+22	; 0x16
    3016:	8f 89       	ldd	r24, Y+23	; 0x17
    3018:	98 8d       	ldd	r25, Y+24	; 0x18
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	3f ef       	ldi	r19, 0xFF	; 255
    301e:	4f e7       	ldi	r20, 0x7F	; 127
    3020:	57 e4       	ldi	r21, 0x47	; 71
    3022:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    3026:	18 16       	cp	r1, r24
    3028:	4c f5       	brge	.+82     	; 0x307c <LCD_DisplayCharacter+0x79c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    302a:	69 8d       	ldd	r22, Y+25	; 0x19
    302c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    302e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3030:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	40 e2       	ldi	r20, 0x20	; 32
    3038:	51 e4       	ldi	r21, 0x41	; 65
    303a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	bc 01       	movw	r22, r24
    3044:	cd 01       	movw	r24, r26
    3046:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	9c 8b       	std	Y+20, r25	; 0x14
    3050:	8b 8b       	std	Y+19, r24	; 0x13
    3052:	0f c0       	rjmp	.+30     	; 0x3072 <LCD_DisplayCharacter+0x792>
    3054:	80 e9       	ldi	r24, 0x90	; 144
    3056:	91 e0       	ldi	r25, 0x01	; 1
    3058:	9a 8b       	std	Y+18, r25	; 0x12
    305a:	89 8b       	std	Y+17, r24	; 0x11
    305c:	89 89       	ldd	r24, Y+17	; 0x11
    305e:	9a 89       	ldd	r25, Y+18	; 0x12
    3060:	01 97       	sbiw	r24, 0x01	; 1
    3062:	f1 f7       	brne	.-4      	; 0x3060 <LCD_DisplayCharacter+0x780>
    3064:	9a 8b       	std	Y+18, r25	; 0x12
    3066:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3068:	8b 89       	ldd	r24, Y+19	; 0x13
    306a:	9c 89       	ldd	r25, Y+20	; 0x14
    306c:	01 97       	sbiw	r24, 0x01	; 1
    306e:	9c 8b       	std	Y+20, r25	; 0x14
    3070:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3072:	8b 89       	ldd	r24, Y+19	; 0x13
    3074:	9c 89       	ldd	r25, Y+20	; 0x14
    3076:	00 97       	sbiw	r24, 0x00	; 0
    3078:	69 f7       	brne	.-38     	; 0x3054 <LCD_DisplayCharacter+0x774>
    307a:	14 c0       	rjmp	.+40     	; 0x30a4 <LCD_DisplayCharacter+0x7c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    307c:	6d 89       	ldd	r22, Y+21	; 0x15
    307e:	7e 89       	ldd	r23, Y+22	; 0x16
    3080:	8f 89       	ldd	r24, Y+23	; 0x17
    3082:	98 8d       	ldd	r25, Y+24	; 0x18
    3084:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	9c 8b       	std	Y+20, r25	; 0x14
    308e:	8b 8b       	std	Y+19, r24	; 0x13
    3090:	8b 89       	ldd	r24, Y+19	; 0x13
    3092:	9c 89       	ldd	r25, Y+20	; 0x14
    3094:	98 8b       	std	Y+16, r25	; 0x10
    3096:	8f 87       	std	Y+15, r24	; 0x0f
    3098:	8f 85       	ldd	r24, Y+15	; 0x0f
    309a:	98 89       	ldd	r25, Y+16	; 0x10
    309c:	01 97       	sbiw	r24, 0x01	; 1
    309e:	f1 f7       	brne	.-4      	; 0x309c <LCD_DisplayCharacter+0x7bc>
    30a0:	98 8b       	std	Y+16, r25	; 0x10
    30a2:	8f 87       	std	Y+15, r24	; 0x0f
        #endif
        _delay_ms(1); /* delay for processing Tdsw = 100ns */
    #endif
    /*  Write Low to E pin in LCD to there is data in pins I wnat to read  */
    GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    30a4:	82 e0       	ldi	r24, 0x02	; 2
    30a6:	62 e0       	ldi	r22, 0x02	; 2
    30a8:	40 e0       	ldi	r20, 0x00	; 0
    30aa:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    30ae:	80 e0       	ldi	r24, 0x00	; 0
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	a0 e8       	ldi	r26, 0x80	; 128
    30b4:	bf e3       	ldi	r27, 0x3F	; 63
    30b6:	8b 87       	std	Y+11, r24	; 0x0b
    30b8:	9c 87       	std	Y+12, r25	; 0x0c
    30ba:	ad 87       	std	Y+13, r26	; 0x0d
    30bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30be:	6b 85       	ldd	r22, Y+11	; 0x0b
    30c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	4a e7       	ldi	r20, 0x7A	; 122
    30cc:	55 e4       	ldi	r21, 0x45	; 69
    30ce:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	8f 83       	std	Y+7, r24	; 0x07
    30d8:	98 87       	std	Y+8, r25	; 0x08
    30da:	a9 87       	std	Y+9, r26	; 0x09
    30dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30de:	6f 81       	ldd	r22, Y+7	; 0x07
    30e0:	78 85       	ldd	r23, Y+8	; 0x08
    30e2:	89 85       	ldd	r24, Y+9	; 0x09
    30e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	40 e8       	ldi	r20, 0x80	; 128
    30ec:	5f e3       	ldi	r21, 0x3F	; 63
    30ee:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    30f2:	88 23       	and	r24, r24
    30f4:	2c f4       	brge	.+10     	; 0x3100 <LCD_DisplayCharacter+0x820>
		__ticks = 1;
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	9e 83       	std	Y+6, r25	; 0x06
    30fc:	8d 83       	std	Y+5, r24	; 0x05
    30fe:	3f c0       	rjmp	.+126    	; 0x317e <LCD_DisplayCharacter+0x89e>
	else if (__tmp > 65535)
    3100:	6f 81       	ldd	r22, Y+7	; 0x07
    3102:	78 85       	ldd	r23, Y+8	; 0x08
    3104:	89 85       	ldd	r24, Y+9	; 0x09
    3106:	9a 85       	ldd	r25, Y+10	; 0x0a
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	3f ef       	ldi	r19, 0xFF	; 255
    310c:	4f e7       	ldi	r20, 0x7F	; 127
    310e:	57 e4       	ldi	r21, 0x47	; 71
    3110:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    3114:	18 16       	cp	r1, r24
    3116:	4c f5       	brge	.+82     	; 0x316a <LCD_DisplayCharacter+0x88a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3118:	6b 85       	ldd	r22, Y+11	; 0x0b
    311a:	7c 85       	ldd	r23, Y+12	; 0x0c
    311c:	8d 85       	ldd	r24, Y+13	; 0x0d
    311e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	40 e2       	ldi	r20, 0x20	; 32
    3126:	51 e4       	ldi	r21, 0x41	; 65
    3128:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__mulsf3>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	bc 01       	movw	r22, r24
    3132:	cd 01       	movw	r24, r26
    3134:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	9e 83       	std	Y+6, r25	; 0x06
    313e:	8d 83       	std	Y+5, r24	; 0x05
    3140:	0f c0       	rjmp	.+30     	; 0x3160 <LCD_DisplayCharacter+0x880>
    3142:	80 e9       	ldi	r24, 0x90	; 144
    3144:	91 e0       	ldi	r25, 0x01	; 1
    3146:	9c 83       	std	Y+4, r25	; 0x04
    3148:	8b 83       	std	Y+3, r24	; 0x03
    314a:	8b 81       	ldd	r24, Y+3	; 0x03
    314c:	9c 81       	ldd	r25, Y+4	; 0x04
    314e:	01 97       	sbiw	r24, 0x01	; 1
    3150:	f1 f7       	brne	.-4      	; 0x314e <LCD_DisplayCharacter+0x86e>
    3152:	9c 83       	std	Y+4, r25	; 0x04
    3154:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3156:	8d 81       	ldd	r24, Y+5	; 0x05
    3158:	9e 81       	ldd	r25, Y+6	; 0x06
    315a:	01 97       	sbiw	r24, 0x01	; 1
    315c:	9e 83       	std	Y+6, r25	; 0x06
    315e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3160:	8d 81       	ldd	r24, Y+5	; 0x05
    3162:	9e 81       	ldd	r25, Y+6	; 0x06
    3164:	00 97       	sbiw	r24, 0x00	; 0
    3166:	69 f7       	brne	.-38     	; 0x3142 <LCD_DisplayCharacter+0x862>
    3168:	14 c0       	rjmp	.+40     	; 0x3192 <LCD_DisplayCharacter+0x8b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    316a:	6f 81       	ldd	r22, Y+7	; 0x07
    316c:	78 85       	ldd	r23, Y+8	; 0x08
    316e:	89 85       	ldd	r24, Y+9	; 0x09
    3170:	9a 85       	ldd	r25, Y+10	; 0x0a
    3172:	0e 94 9a 01 	call	0x334	; 0x334 <__fixunssfsi>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	9e 83       	std	Y+6, r25	; 0x06
    317c:	8d 83       	std	Y+5, r24	; 0x05
    317e:	8d 81       	ldd	r24, Y+5	; 0x05
    3180:	9e 81       	ldd	r25, Y+6	; 0x06
    3182:	9a 83       	std	Y+2, r25	; 0x02
    3184:	89 83       	std	Y+1, r24	; 0x01
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	9a 81       	ldd	r25, Y+2	; 0x02
    318a:	01 97       	sbiw	r24, 0x01	; 1
    318c:	f1 f7       	brne	.-4      	; 0x318a <LCD_DisplayCharacter+0x8aa>
    318e:	9a 83       	std	Y+2, r25	; 0x02
    3190:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1); /* delay for processing Th = 13ns */

    col_global++;
    3192:	80 91 7d 00 	lds	r24, 0x007D
    3196:	8f 5f       	subi	r24, 0xFF	; 255
    3198:	80 93 7d 00 	sts	0x007D, r24
    if(col_global == MAX_NUM_COL_LCD)
    319c:	80 91 7d 00 	lds	r24, 0x007D
    31a0:	80 31       	cpi	r24, 0x10	; 16
    31a2:	69 f4       	brne	.+26     	; 0x31be <LCD_DisplayCharacter+0x8de>
    {
        row_global += 1 ;
    31a4:	80 91 7c 00 	lds	r24, 0x007C
    31a8:	8f 5f       	subi	r24, 0xFF	; 255
    31aa:	80 93 7c 00 	sts	0x007C, r24
        col_global = 0 ;
    31ae:	10 92 7d 00 	sts	0x007D, r1
        if(row_global == MAX_NUM_COL_LCD)
    31b2:	80 91 7c 00 	lds	r24, 0x007C
    31b6:	80 31       	cpi	r24, 0x10	; 16
    31b8:	11 f4       	brne	.+4      	; 0x31be <LCD_DisplayCharacter+0x8de>
            row_global = 0;
    31ba:	10 92 7c 00 	sts	0x007C, r1
    }
}
    31be:	cc 59       	subi	r28, 0x9C	; 156
    31c0:	df 4f       	sbci	r29, 0xFF	; 255
    31c2:	0f b6       	in	r0, 0x3f	; 63
    31c4:	f8 94       	cli
    31c6:	de bf       	out	0x3e, r29	; 62
    31c8:	0f be       	out	0x3f, r0	; 63
    31ca:	cd bf       	out	0x3d, r28	; 61
    31cc:	cf 91       	pop	r28
    31ce:	df 91       	pop	r29
    31d0:	1f 91       	pop	r17
    31d2:	0f 91       	pop	r16
    31d4:	08 95       	ret

000031d6 <LCD_DisplayString>:



void LCD_DisplayString(const uint8 * str_content)
{
    31d6:	df 93       	push	r29
    31d8:	cf 93       	push	r28
    31da:	00 d0       	rcall	.+0      	; 0x31dc <LCD_DisplayString+0x6>
    31dc:	0f 92       	push	r0
    31de:	cd b7       	in	r28, 0x3d	; 61
    31e0:	de b7       	in	r29, 0x3e	; 62
    31e2:	9b 83       	std	Y+3, r25	; 0x03
    31e4:	8a 83       	std	Y+2, r24	; 0x02
    uint8 it = 0 ;
    31e6:	19 82       	std	Y+1, r1	; 0x01
    31e8:	0e c0       	rjmp	.+28     	; 0x3206 <LCD_DisplayString+0x30>
    while(str_content[it] != '\0')
    {
        LCD_DisplayCharacter(str_content[it]);
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	28 2f       	mov	r18, r24
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	8a 81       	ldd	r24, Y+2	; 0x02
    31f2:	9b 81       	ldd	r25, Y+3	; 0x03
    31f4:	fc 01       	movw	r30, r24
    31f6:	e2 0f       	add	r30, r18
    31f8:	f3 1f       	adc	r31, r19
    31fa:	80 81       	ld	r24, Z
    31fc:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_DisplayCharacter>
        it++;
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	8f 5f       	subi	r24, 0xFF	; 255
    3204:	89 83       	std	Y+1, r24	; 0x01


void LCD_DisplayString(const uint8 * str_content)
{
    uint8 it = 0 ;
    while(str_content[it] != '\0')
    3206:	89 81       	ldd	r24, Y+1	; 0x01
    3208:	28 2f       	mov	r18, r24
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	8a 81       	ldd	r24, Y+2	; 0x02
    320e:	9b 81       	ldd	r25, Y+3	; 0x03
    3210:	fc 01       	movw	r30, r24
    3212:	e2 0f       	add	r30, r18
    3214:	f3 1f       	adc	r31, r19
    3216:	80 81       	ld	r24, Z
    3218:	88 23       	and	r24, r24
    321a:	39 f7       	brne	.-50     	; 0x31ea <LCD_DisplayString+0x14>
    {
        LCD_DisplayCharacter(str_content[it]);
        it++;
    }
}
    321c:	0f 90       	pop	r0
    321e:	0f 90       	pop	r0
    3220:	0f 90       	pop	r0
    3222:	cf 91       	pop	r28
    3224:	df 91       	pop	r29
    3226:	08 95       	ret

00003228 <LCD_MoveCursor>:


void LCD_MoveCursor(uint8 row , uint8 col)
{
    3228:	df 93       	push	r29
    322a:	cf 93       	push	r28
    322c:	00 d0       	rcall	.+0      	; 0x322e <LCD_MoveCursor+0x6>
    322e:	00 d0       	rcall	.+0      	; 0x3230 <LCD_MoveCursor+0x8>
    3230:	0f 92       	push	r0
    3232:	cd b7       	in	r28, 0x3d	; 61
    3234:	de b7       	in	r29, 0x3e	; 62
    3236:	8a 83       	std	Y+2, r24	; 0x02
    3238:	6b 83       	std	Y+3, r22	; 0x03
    uint8 New_Location ;
    /*  calculate location that cursor will move to     */
    switch(row)
    323a:	8a 81       	ldd	r24, Y+2	; 0x02
    323c:	28 2f       	mov	r18, r24
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	3d 83       	std	Y+5, r19	; 0x05
    3242:	2c 83       	std	Y+4, r18	; 0x04
    3244:	8c 81       	ldd	r24, Y+4	; 0x04
    3246:	9d 81       	ldd	r25, Y+5	; 0x05
    3248:	00 97       	sbiw	r24, 0x00	; 0
    324a:	31 f0       	breq	.+12     	; 0x3258 <LCD_MoveCursor+0x30>
    324c:	2c 81       	ldd	r18, Y+4	; 0x04
    324e:	3d 81       	ldd	r19, Y+5	; 0x05
    3250:	21 30       	cpi	r18, 0x01	; 1
    3252:	31 05       	cpc	r19, r1
    3254:	49 f0       	breq	.+18     	; 0x3268 <LCD_MoveCursor+0x40>
    3256:	11 c0       	rjmp	.+34     	; 0x327a <LCD_MoveCursor+0x52>
    {
        case 0 : 
            New_Location = col ;
    3258:	8b 81       	ldd	r24, Y+3	; 0x03
    325a:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    325c:	8b 81       	ldd	r24, Y+3	; 0x03
    325e:	80 93 7d 00 	sts	0x007D, r24
            row_global = 0 ;
    3262:	10 92 7c 00 	sts	0x007C, r1
    3266:	09 c0       	rjmp	.+18     	; 0x327a <LCD_MoveCursor+0x52>
            break ;
        
        case 1 :
            New_Location = col + 0x40 ;
    3268:	8b 81       	ldd	r24, Y+3	; 0x03
    326a:	80 5c       	subi	r24, 0xC0	; 192
    326c:	89 83       	std	Y+1, r24	; 0x01
            col_global = col ;
    326e:	8b 81       	ldd	r24, Y+3	; 0x03
    3270:	80 93 7d 00 	sts	0x007D, r24
            row_global = 1 ;
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	80 93 7c 00 	sts	0x007C, r24
    #endif
        default :
            break ;
    }
    /*  Call function to take palce of this command     */
    LCD_SendCommand(LCD_SET_CURSOR_LOCATION | New_Location);
    327a:	89 81       	ldd	r24, Y+1	; 0x01
    327c:	80 68       	ori	r24, 0x80	; 128
    327e:	0e 94 0b 10 	call	0x2016	; 0x2016 <LCD_SendCommand>
}
    3282:	0f 90       	pop	r0
    3284:	0f 90       	pop	r0
    3286:	0f 90       	pop	r0
    3288:	0f 90       	pop	r0
    328a:	0f 90       	pop	r0
    328c:	cf 91       	pop	r28
    328e:	df 91       	pop	r29
    3290:	08 95       	ret

00003292 <LCD_DisplayStringRowCol>:


void LCD_DisplayStringRowCol(const uint8 * str_content , uint8 row , uint8 col)
{
    3292:	df 93       	push	r29
    3294:	cf 93       	push	r28
    3296:	00 d0       	rcall	.+0      	; 0x3298 <LCD_DisplayStringRowCol+0x6>
    3298:	00 d0       	rcall	.+0      	; 0x329a <LCD_DisplayStringRowCol+0x8>
    329a:	cd b7       	in	r28, 0x3d	; 61
    329c:	de b7       	in	r29, 0x3e	; 62
    329e:	9a 83       	std	Y+2, r25	; 0x02
    32a0:	89 83       	std	Y+1, r24	; 0x01
    32a2:	6b 83       	std	Y+3, r22	; 0x03
    32a4:	4c 83       	std	Y+4, r20	; 0x04
    LCD_MoveCursor(row,col);
    32a6:	8b 81       	ldd	r24, Y+3	; 0x03
    32a8:	6c 81       	ldd	r22, Y+4	; 0x04
    32aa:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_MoveCursor>
    LCD_DisplayString(str_content);
    32ae:	89 81       	ldd	r24, Y+1	; 0x01
    32b0:	9a 81       	ldd	r25, Y+2	; 0x02
    32b2:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <LCD_DisplayString>
}
    32b6:	0f 90       	pop	r0
    32b8:	0f 90       	pop	r0
    32ba:	0f 90       	pop	r0
    32bc:	0f 90       	pop	r0
    32be:	cf 91       	pop	r28
    32c0:	df 91       	pop	r29
    32c2:	08 95       	ret

000032c4 <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    32c4:	df 93       	push	r29
    32c6:	cf 93       	push	r28
    32c8:	cd b7       	in	r28, 0x3d	; 61
    32ca:	de b7       	in	r29, 0x3e	; 62
    col_global = 0 , row_global = 0;
    32cc:	10 92 7d 00 	sts	0x007D, r1
    32d0:	10 92 7c 00 	sts	0x007C, r1
    LCD_SendCommand(LCD_CLEAR_DISPLAY);
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	0e 94 0b 10 	call	0x2016	; 0x2016 <LCD_SendCommand>
}
    32da:	cf 91       	pop	r28
    32dc:	df 91       	pop	r29
    32de:	08 95       	ret

000032e0 <LCD_MoveCursorRight>:



void LCD_MoveCursorRight(void)
{
    32e0:	df 93       	push	r29
    32e2:	cf 93       	push	r28
    32e4:	cd b7       	in	r28, 0x3d	; 61
    32e6:	de b7       	in	r29, 0x3e	; 62
#if(MAX_NUM_ROW_LCD == 2)
    if(col_global == (MAX_NUM_COL_LCD -1) && row_global == 0 )
    32e8:	80 91 7d 00 	lds	r24, 0x007D
    32ec:	8f 30       	cpi	r24, 0x0F	; 15
    32ee:	89 f4       	brne	.+34     	; 0x3312 <LCD_MoveCursorRight+0x32>
    32f0:	80 91 7c 00 	lds	r24, 0x007C
    32f4:	88 23       	and	r24, r24
    32f6:	69 f4       	brne	.+26     	; 0x3312 <LCD_MoveCursorRight+0x32>
    {
        col_global = 0 , row_global = 1 ;
    32f8:	10 92 7d 00 	sts	0x007D, r1
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	80 93 7c 00 	sts	0x007C, r24
        LCD_MoveCursor(row_global,col_global);
    3302:	80 91 7c 00 	lds	r24, 0x007C
    3306:	90 91 7d 00 	lds	r25, 0x007D
    330a:	69 2f       	mov	r22, r25
    330c:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_MoveCursor>
    3310:	1c c0       	rjmp	.+56     	; 0x334a <LCD_MoveCursorRight+0x6a>
    }
    else if (col_global == (MAX_NUM_COL_LCD -1) && row_global == 1 )
    3312:	80 91 7d 00 	lds	r24, 0x007D
    3316:	8f 30       	cpi	r24, 0x0F	; 15
    3318:	81 f4       	brne	.+32     	; 0x333a <LCD_MoveCursorRight+0x5a>
    331a:	80 91 7c 00 	lds	r24, 0x007C
    331e:	81 30       	cpi	r24, 0x01	; 1
    3320:	61 f4       	brne	.+24     	; 0x333a <LCD_MoveCursorRight+0x5a>
    {
        col_global = 0 , row_global = 0 ;
    3322:	10 92 7d 00 	sts	0x007D, r1
    3326:	10 92 7c 00 	sts	0x007C, r1
        LCD_MoveCursor(row_global,col_global);
    332a:	80 91 7c 00 	lds	r24, 0x007C
    332e:	90 91 7d 00 	lds	r25, 0x007D
    3332:	69 2f       	mov	r22, r25
    3334:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_MoveCursor>
    3338:	08 c0       	rjmp	.+16     	; 0x334a <LCD_MoveCursorRight+0x6a>
        col_global = 0 , row_global = 0 ;
        LCD_MoveCursor(row_global,col_global);
    }
#endif
    else{ // safe shift right no problem
        LCD_SendCommand(LCD_CURSOR_MOVE_RIGHT);
    333a:	84 e1       	ldi	r24, 0x14	; 20
    333c:	0e 94 0b 10 	call	0x2016	; 0x2016 <LCD_SendCommand>
        col_global++;
    3340:	80 91 7d 00 	lds	r24, 0x007D
    3344:	8f 5f       	subi	r24, 0xFF	; 255
    3346:	80 93 7d 00 	sts	0x007D, r24
    }
}
    334a:	cf 91       	pop	r28
    334c:	df 91       	pop	r29
    334e:	08 95       	ret

00003350 <LCD_MoveCursorLeft>:


void LCD_MoveCursorLeft(void)
{
    3350:	df 93       	push	r29
    3352:	cf 93       	push	r28
    3354:	cd b7       	in	r28, 0x3d	; 61
    3356:	de b7       	in	r29, 0x3e	; 62
#if(MAX_NUM_ROW_LCD == 2)
    if(col_global == 0 && row_global == 0)
    3358:	80 91 7d 00 	lds	r24, 0x007D
    335c:	88 23       	and	r24, r24
    335e:	91 f4       	brne	.+36     	; 0x3384 <LCD_MoveCursorLeft+0x34>
    3360:	80 91 7c 00 	lds	r24, 0x007C
    3364:	88 23       	and	r24, r24
    3366:	71 f4       	brne	.+28     	; 0x3384 <LCD_MoveCursorLeft+0x34>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 1 ;
    3368:	8f e0       	ldi	r24, 0x0F	; 15
    336a:	80 93 7d 00 	sts	0x007D, r24
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	80 93 7c 00 	sts	0x007C, r24
        LCD_MoveCursor(row_global,col_global);
    3374:	80 91 7c 00 	lds	r24, 0x007C
    3378:	90 91 7d 00 	lds	r25, 0x007D
    337c:	69 2f       	mov	r22, r25
    337e:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_MoveCursor>
    3382:	1d c0       	rjmp	.+58     	; 0x33be <LCD_MoveCursorLeft+0x6e>
    }
    else if (col_global == 0 && row_global == 1)
    3384:	80 91 7d 00 	lds	r24, 0x007D
    3388:	88 23       	and	r24, r24
    338a:	89 f4       	brne	.+34     	; 0x33ae <LCD_MoveCursorLeft+0x5e>
    338c:	80 91 7c 00 	lds	r24, 0x007C
    3390:	81 30       	cpi	r24, 0x01	; 1
    3392:	69 f4       	brne	.+26     	; 0x33ae <LCD_MoveCursorLeft+0x5e>
    {
        col_global = (MAX_NUM_COL_LCD -1) , row_global = 0 ;
    3394:	8f e0       	ldi	r24, 0x0F	; 15
    3396:	80 93 7d 00 	sts	0x007D, r24
    339a:	10 92 7c 00 	sts	0x007C, r1
        LCD_MoveCursor(row_global,col_global);
    339e:	80 91 7c 00 	lds	r24, 0x007C
    33a2:	90 91 7d 00 	lds	r25, 0x007D
    33a6:	69 2f       	mov	r22, r25
    33a8:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_MoveCursor>
    33ac:	08 c0       	rjmp	.+16     	; 0x33be <LCD_MoveCursorLeft+0x6e>
        LCD_MoveCursor(row_global,col_global);
    }
#endif
    else
    {
        LCD_SendCommand(LCD_CURSOR_MOVE_LEFT);
    33ae:	80 e1       	ldi	r24, 0x10	; 16
    33b0:	0e 94 0b 10 	call	0x2016	; 0x2016 <LCD_SendCommand>
        col_global--;
    33b4:	80 91 7d 00 	lds	r24, 0x007D
    33b8:	81 50       	subi	r24, 0x01	; 1
    33ba:	80 93 7d 00 	sts	0x007D, r24
    }
    
}
    33be:	cf 91       	pop	r28
    33c0:	df 91       	pop	r29
    33c2:	08 95       	ret

000033c4 <LCD_ShitEntireDisplayRight>:


void LCD_ShitEntireDisplayRight(void)
{
    33c4:	df 93       	push	r29
    33c6:	cf 93       	push	r28
    33c8:	cd b7       	in	r28, 0x3d	; 61
    33ca:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_RIGHT);
    33cc:	8c e1       	ldi	r24, 0x1C	; 28
    33ce:	0e 94 0b 10 	call	0x2016	; 0x2016 <LCD_SendCommand>
}
    33d2:	cf 91       	pop	r28
    33d4:	df 91       	pop	r29
    33d6:	08 95       	ret

000033d8 <LCD_ShitEntireDisplayLeft>:

void LCD_ShitEntireDisplayLeft(void)
{
    33d8:	df 93       	push	r29
    33da:	cf 93       	push	r28
    33dc:	cd b7       	in	r28, 0x3d	; 61
    33de:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_ENTIRE_DISPLAY_LEFT);
    33e0:	88 e1       	ldi	r24, 0x18	; 24
    33e2:	0e 94 0b 10 	call	0x2016	; 0x2016 <LCD_SendCommand>
}
    33e6:	cf 91       	pop	r28
    33e8:	df 91       	pop	r29
    33ea:	08 95       	ret

000033ec <LCD_GenerateCharacterCGRAM>:


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    33ec:	df 93       	push	r29
    33ee:	cf 93       	push	r28
    33f0:	00 d0       	rcall	.+0      	; 0x33f2 <LCD_GenerateCharacterCGRAM+0x6>
    33f2:	00 d0       	rcall	.+0      	; 0x33f4 <LCD_GenerateCharacterCGRAM+0x8>
    33f4:	cd b7       	in	r28, 0x3d	; 61
    33f6:	de b7       	in	r29, 0x3e	; 62
    33f8:	9b 83       	std	Y+3, r25	; 0x03
    33fa:	8a 83       	std	Y+2, r24	; 0x02
    33fc:	6c 83       	std	Y+4, r22	; 0x04
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    33fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3400:	88 2f       	mov	r24, r24
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	08 96       	adiw	r24, 0x08	; 8
    3406:	88 0f       	add	r24, r24
    3408:	99 1f       	adc	r25, r25
    340a:	88 0f       	add	r24, r24
    340c:	99 1f       	adc	r25, r25
    340e:	88 0f       	add	r24, r24
    3410:	99 1f       	adc	r25, r25
    3412:	0e 94 0b 10 	call	0x2016	; 0x2016 <LCD_SendCommand>
    for(uint8 it = 0 ; it < 8 ;it++)
    3416:	19 82       	std	Y+1, r1	; 0x01
    3418:	0e c0       	rjmp	.+28     	; 0x3436 <LCD_GenerateCharacterCGRAM+0x4a>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    341a:	89 81       	ldd	r24, Y+1	; 0x01
    341c:	28 2f       	mov	r18, r24
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	8a 81       	ldd	r24, Y+2	; 0x02
    3422:	9b 81       	ldd	r25, Y+3	; 0x03
    3424:	fc 01       	movw	r30, r24
    3426:	e2 0f       	add	r30, r18
    3428:	f3 1f       	adc	r31, r19
    342a:	80 81       	ld	r24, Z
    342c:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_DisplayCharacter>


void LCD_GenerateCharacterCGRAM(const uint8 * Custom_character , uint8 location)
{
    LCD_SendCommand(LCD_CGRAM_LOCATION + (location * 8) );
    for(uint8 it = 0 ; it < 8 ;it++)
    3430:	89 81       	ldd	r24, Y+1	; 0x01
    3432:	8f 5f       	subi	r24, 0xFF	; 255
    3434:	89 83       	std	Y+1, r24	; 0x01
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	88 30       	cpi	r24, 0x08	; 8
    343a:	78 f3       	brcs	.-34     	; 0x341a <LCD_GenerateCharacterCGRAM+0x2e>
    {
        LCD_DisplayCharacter(Custom_character[it]);
    }
}
    343c:	0f 90       	pop	r0
    343e:	0f 90       	pop	r0
    3440:	0f 90       	pop	r0
    3442:	0f 90       	pop	r0
    3444:	cf 91       	pop	r28
    3446:	df 91       	pop	r29
    3448:	08 95       	ret

0000344a <LCD_DisplayCustomCharacter>:


void LCD_DisplayCustomCharacter(uint8 location)
{
    344a:	df 93       	push	r29
    344c:	cf 93       	push	r28
    344e:	0f 92       	push	r0
    3450:	cd b7       	in	r28, 0x3d	; 61
    3452:	de b7       	in	r29, 0x3e	; 62
    3454:	89 83       	std	Y+1, r24	; 0x01
    LCD_DisplayCharacter(location);
    3456:	89 81       	ldd	r24, Y+1	; 0x01
    3458:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_DisplayCharacter>
}
    345c:	0f 90       	pop	r0
    345e:	cf 91       	pop	r28
    3460:	df 91       	pop	r29
    3462:	08 95       	ret

00003464 <LCD_DisplayCustomCharacterRowCol>:

void LCD_DisplayCustomCharacterRowCol(uint8 location , uint8 row ,uint8 col)
{
    3464:	df 93       	push	r29
    3466:	cf 93       	push	r28
    3468:	00 d0       	rcall	.+0      	; 0x346a <LCD_DisplayCustomCharacterRowCol+0x6>
    346a:	0f 92       	push	r0
    346c:	cd b7       	in	r28, 0x3d	; 61
    346e:	de b7       	in	r29, 0x3e	; 62
    3470:	89 83       	std	Y+1, r24	; 0x01
    3472:	6a 83       	std	Y+2, r22	; 0x02
    3474:	4b 83       	std	Y+3, r20	; 0x03
    LCD_MoveCursor(row,col);
    3476:	8a 81       	ldd	r24, Y+2	; 0x02
    3478:	6b 81       	ldd	r22, Y+3	; 0x03
    347a:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_MoveCursor>
    LCD_DisplayCharacter(location);
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LCD_DisplayCharacter>
}
    3484:	0f 90       	pop	r0
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	cf 91       	pop	r28
    348c:	df 91       	pop	r29
    348e:	08 95       	ret

00003490 <LCD_intToString>:




void LCD_intToString(uint32 data)
{
    3490:	df 93       	push	r29
    3492:	cf 93       	push	r28
    3494:	cd b7       	in	r28, 0x3d	; 61
    3496:	de b7       	in	r29, 0x3e	; 62
    3498:	65 97       	sbiw	r28, 0x15	; 21
    349a:	0f b6       	in	r0, 0x3f	; 63
    349c:	f8 94       	cli
    349e:	de bf       	out	0x3e, r29	; 62
    34a0:	0f be       	out	0x3f, r0	; 63
    34a2:	cd bf       	out	0x3d, r28	; 61
    34a4:	6a 8b       	std	Y+18, r22	; 0x12
    34a6:	7b 8b       	std	Y+19, r23	; 0x13
    34a8:	8c 8b       	std	Y+20, r24	; 0x14
    34aa:	9d 8b       	std	Y+21, r25	; 0x15
	 uint8 string_buff[17];// I write char not sint8_t(signed char ) to avoid warning
	 itoa(data , string_buff , 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    34ac:	8a 89       	ldd	r24, Y+18	; 0x12
    34ae:	9b 89       	ldd	r25, Y+19	; 0x13
    34b0:	9e 01       	movw	r18, r28
    34b2:	2f 5f       	subi	r18, 0xFF	; 255
    34b4:	3f 4f       	sbci	r19, 0xFF	; 255
    34b6:	b9 01       	movw	r22, r18
    34b8:	4a e0       	ldi	r20, 0x0A	; 10
    34ba:	50 e0       	ldi	r21, 0x00	; 0
    34bc:	0e 94 80 25 	call	0x4b00	; 0x4b00 <itoa>
	 LCD_DisplayString( (uint8_t *)string_buff);
    34c0:	ce 01       	movw	r24, r28
    34c2:	01 96       	adiw	r24, 0x01	; 1
    34c4:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <LCD_DisplayString>
}
    34c8:	65 96       	adiw	r28, 0x15	; 21
    34ca:	0f b6       	in	r0, 0x3f	; 63
    34cc:	f8 94       	cli
    34ce:	de bf       	out	0x3e, r29	; 62
    34d0:	0f be       	out	0x3f, r0	; 63
    34d2:	cd bf       	out	0x3d, r28	; 61
    34d4:	cf 91       	pop	r28
    34d6:	df 91       	pop	r29
    34d8:	08 95       	ret

000034da <IR_Remote_Analysis>:
uint64 last_Code_Value = 0 ;



void IR_Remote_Analysis(uint16 * arr)
{
    34da:	df 93       	push	r29
    34dc:	cf 93       	push	r28
    34de:	00 d0       	rcall	.+0      	; 0x34e0 <IR_Remote_Analysis+0x6>
    34e0:	00 d0       	rcall	.+0      	; 0x34e2 <IR_Remote_Analysis+0x8>
    34e2:	cd b7       	in	r28, 0x3d	; 61
    34e4:	de b7       	in	r29, 0x3e	; 62
    34e6:	9c 83       	std	Y+4, r25	; 0x04
    34e8:	8b 83       	std	Y+3, r24	; 0x03

    uint16 i = 0 ;
    34ea:	1a 82       	std	Y+2, r1	; 0x02
    34ec:	19 82       	std	Y+1, r1	; 0x01

    #if(WayDealingWithRemotePress_IR == NoResponseTakenUntilPressCatched_IR)

        /*  ⚠️⚠️⚠️⚠️🙆‍♂️🙆‍♂️🙆‍♂️  You are Stuck here until catch low in this pin  */
        /* As start of NEC remote frame is logic 1 and when I receive it , it will be logic 0  so will wait until catch 0  */
        while(GPIO_ReadPin(Infrared_Remote_PORT,Infrared_Remote_PIN) == LOGIC_HIGH);
    34ee:	83 e0       	ldi	r24, 0x03	; 3
    34f0:	67 e0       	ldi	r22, 0x07	; 7
    34f2:	0e 94 3a 0c 	call	0x1874	; 0x1874 <GPIO_ReadPin>
    34f6:	81 30       	cpi	r24, 0x01	; 1
    34f8:	d1 f3       	breq	.-12     	; 0x34ee <IR_Remote_Analysis+0x14>
    #endif

    do
    {
        /*  Intialize timer with value = 3 as I take some time in before while */
        Timer1_UpdateValue(3);
    34fa:	83 e0       	ldi	r24, 0x03	; 3
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	0e 94 99 09 	call	0x1332	; 0x1332 <Timer1_UpdateValue>
        do 
        {
            Timer1_Read_Timer_16bitValue(arr[i]);
    3502:	89 81       	ldd	r24, Y+1	; 0x01
    3504:	9a 81       	ldd	r25, Y+2	; 0x02
    3506:	9c 01       	movw	r18, r24
    3508:	22 0f       	add	r18, r18
    350a:	33 1f       	adc	r19, r19
    350c:	8b 81       	ldd	r24, Y+3	; 0x03
    350e:	9c 81       	ldd	r25, Y+4	; 0x04
    3510:	dc 01       	movw	r26, r24
    3512:	a2 0f       	add	r26, r18
    3514:	b3 1f       	adc	r27, r19
    3516:	ec e4       	ldi	r30, 0x4C	; 76
    3518:	f0 e0       	ldi	r31, 0x00	; 0
    351a:	80 81       	ld	r24, Z
    351c:	91 81       	ldd	r25, Z+1	; 0x01
    351e:	8d 93       	st	X+, r24
    3520:	9c 93       	st	X, r25
        }
        /*  purpose of this check that make me stop when I wait time >= 20ms or >= 20000 , as I told you need to make timer tick = 1us*/
        while((GPIO_ReadPin(Infrared_Remote_PORT,Infrared_Remote_PIN) == LOGIC_LOW)  && (arr[i] < 20000) );
    3522:	83 e0       	ldi	r24, 0x03	; 3
    3524:	67 e0       	ldi	r22, 0x07	; 7
    3526:	0e 94 3a 0c 	call	0x1874	; 0x1874 <GPIO_ReadPin>
    352a:	88 23       	and	r24, r24
    352c:	81 f4       	brne	.+32     	; 0x354e <IR_Remote_Analysis+0x74>
    352e:	89 81       	ldd	r24, Y+1	; 0x01
    3530:	9a 81       	ldd	r25, Y+2	; 0x02
    3532:	9c 01       	movw	r18, r24
    3534:	22 0f       	add	r18, r18
    3536:	33 1f       	adc	r19, r19
    3538:	8b 81       	ldd	r24, Y+3	; 0x03
    353a:	9c 81       	ldd	r25, Y+4	; 0x04
    353c:	fc 01       	movw	r30, r24
    353e:	e2 0f       	add	r30, r18
    3540:	f3 1f       	adc	r31, r19
    3542:	80 81       	ld	r24, Z
    3544:	91 81       	ldd	r25, Z+1	; 0x01
    3546:	2e e4       	ldi	r18, 0x4E	; 78
    3548:	80 32       	cpi	r24, 0x20	; 32
    354a:	92 07       	cpc	r25, r18
    354c:	d0 f2       	brcs	.-76     	; 0x3502 <IR_Remote_Analysis+0x28>

        /*  Intialize timer with value = 3 as I take some time in before while */
        Timer1_UpdateValue(3);
    354e:	83 e0       	ldi	r24, 0x03	; 3
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	0e 94 99 09 	call	0x1332	; 0x1332 <Timer1_UpdateValue>
        do
        {
            Timer1_Read_Timer_16bitValue(arr[i + 1]);
    3556:	89 81       	ldd	r24, Y+1	; 0x01
    3558:	9a 81       	ldd	r25, Y+2	; 0x02
    355a:	01 96       	adiw	r24, 0x01	; 1
    355c:	9c 01       	movw	r18, r24
    355e:	22 0f       	add	r18, r18
    3560:	33 1f       	adc	r19, r19
    3562:	8b 81       	ldd	r24, Y+3	; 0x03
    3564:	9c 81       	ldd	r25, Y+4	; 0x04
    3566:	dc 01       	movw	r26, r24
    3568:	a2 0f       	add	r26, r18
    356a:	b3 1f       	adc	r27, r19
    356c:	ec e4       	ldi	r30, 0x4C	; 76
    356e:	f0 e0       	ldi	r31, 0x00	; 0
    3570:	80 81       	ld	r24, Z
    3572:	91 81       	ldd	r25, Z+1	; 0x01
    3574:	8d 93       	st	X+, r24
    3576:	9c 93       	st	X, r25
        }
        while((GPIO_ReadPin(Infrared_Remote_PORT,Infrared_Remote_PIN) == LOGIC_HIGH)  && (arr[i+1] < 20000) );
    3578:	83 e0       	ldi	r24, 0x03	; 3
    357a:	67 e0       	ldi	r22, 0x07	; 7
    357c:	0e 94 3a 0c 	call	0x1874	; 0x1874 <GPIO_ReadPin>
    3580:	81 30       	cpi	r24, 0x01	; 1
    3582:	89 f4       	brne	.+34     	; 0x35a6 <IR_Remote_Analysis+0xcc>
    3584:	89 81       	ldd	r24, Y+1	; 0x01
    3586:	9a 81       	ldd	r25, Y+2	; 0x02
    3588:	01 96       	adiw	r24, 0x01	; 1
    358a:	9c 01       	movw	r18, r24
    358c:	22 0f       	add	r18, r18
    358e:	33 1f       	adc	r19, r19
    3590:	8b 81       	ldd	r24, Y+3	; 0x03
    3592:	9c 81       	ldd	r25, Y+4	; 0x04
    3594:	fc 01       	movw	r30, r24
    3596:	e2 0f       	add	r30, r18
    3598:	f3 1f       	adc	r31, r19
    359a:	80 81       	ld	r24, Z
    359c:	91 81       	ldd	r25, Z+1	; 0x01
    359e:	4e e4       	ldi	r20, 0x4E	; 78
    35a0:	80 32       	cpi	r24, 0x20	; 32
    35a2:	94 07       	cpc	r25, r20
    35a4:	c0 f2       	brcs	.-80     	; 0x3556 <IR_Remote_Analysis+0x7c>

        i += 2;
    35a6:	89 81       	ldd	r24, Y+1	; 0x01
    35a8:	9a 81       	ldd	r25, Y+2	; 0x02
    35aa:	02 96       	adiw	r24, 0x02	; 2
    35ac:	9a 83       	std	Y+2, r25	; 0x02
    35ae:	89 83       	std	Y+1, r24	; 0x01
    }
    while((arr[i-1] < 20000) && (arr[i-2] < 20000) );
    35b0:	21 e0       	ldi	r18, 0x01	; 1
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	89 81       	ldd	r24, Y+1	; 0x01
    35b6:	9a 81       	ldd	r25, Y+2	; 0x02
    35b8:	a9 01       	movw	r20, r18
    35ba:	48 1b       	sub	r20, r24
    35bc:	59 0b       	sbc	r21, r25
    35be:	ca 01       	movw	r24, r20
    35c0:	88 0f       	add	r24, r24
    35c2:	99 1f       	adc	r25, r25
    35c4:	22 27       	eor	r18, r18
    35c6:	33 27       	eor	r19, r19
    35c8:	28 1b       	sub	r18, r24
    35ca:	39 0b       	sbc	r19, r25
    35cc:	8b 81       	ldd	r24, Y+3	; 0x03
    35ce:	9c 81       	ldd	r25, Y+4	; 0x04
    35d0:	fc 01       	movw	r30, r24
    35d2:	e2 0f       	add	r30, r18
    35d4:	f3 1f       	adc	r31, r19
    35d6:	80 81       	ld	r24, Z
    35d8:	91 81       	ldd	r25, Z+1	; 0x01
    35da:	5e e4       	ldi	r21, 0x4E	; 78
    35dc:	80 32       	cpi	r24, 0x20	; 32
    35de:	95 07       	cpc	r25, r21
    35e0:	90 f4       	brcc	.+36     	; 0x3606 <IR_Remote_Analysis+0x12c>
    35e2:	89 81       	ldd	r24, Y+1	; 0x01
    35e4:	9a 81       	ldd	r25, Y+2	; 0x02
    35e6:	02 97       	sbiw	r24, 0x02	; 2
    35e8:	9c 01       	movw	r18, r24
    35ea:	22 0f       	add	r18, r18
    35ec:	33 1f       	adc	r19, r19
    35ee:	8b 81       	ldd	r24, Y+3	; 0x03
    35f0:	9c 81       	ldd	r25, Y+4	; 0x04
    35f2:	fc 01       	movw	r30, r24
    35f4:	e2 0f       	add	r30, r18
    35f6:	f3 1f       	adc	r31, r19
    35f8:	80 81       	ld	r24, Z
    35fa:	91 81       	ldd	r25, Z+1	; 0x01
    35fc:	2e e4       	ldi	r18, 0x4E	; 78
    35fe:	80 32       	cpi	r24, 0x20	; 32
    3600:	92 07       	cpc	r25, r18
    3602:	08 f4       	brcc	.+2      	; 0x3606 <IR_Remote_Analysis+0x12c>
    3604:	7a cf       	rjmp	.-268    	; 0x34fa <IR_Remote_Analysis+0x20>


}
    3606:	0f 90       	pop	r0
    3608:	0f 90       	pop	r0
    360a:	0f 90       	pop	r0
    360c:	0f 90       	pop	r0
    360e:	cf 91       	pop	r28
    3610:	df 91       	pop	r29
    3612:	08 95       	ret

00003614 <IR_Remote_Init>:


/**************************                   Functions Definition                   **************************/

void IR_Remote_Init(void)
{
    3614:	df 93       	push	r29
    3616:	cf 93       	push	r28
    3618:	cd b7       	in	r28, 0x3d	; 61
    361a:	de b7       	in	r29, 0x3e	; 62
    #if(IR_STATE == IR_Transmitter_State)
        /*  Set pin as output pin to send data as there writing logic 1 or 0 to IR transmitter*/
        GPIO_SetPinDirection(Infrared_Remote_PORT,Infrared_Remote_PIN,OUTPUT_PIN);
    #elif(IR_STATE == IR_Receiver_State)
        /*  Set pin as input pin to receive signal from remote and give to MCU  */
        GPIO_SetPinDirection(Infrared_Remote_PORT,Infrared_Remote_PIN,INPUT_PIN);
    361c:	83 e0       	ldi	r24, 0x03	; 3
    361e:	67 e0       	ldi	r22, 0x07	; 7
    3620:	40 e0       	ldi	r20, 0x00	; 0
    3622:	0e 94 4c 0a 	call	0x1498	; 0x1498 <GPIO_SetPinDirection>
    /*  🔔🔔🔔🔔🔔👀👀👀Set timer 1 in normal mode to work as timer to tell me time for each bit  So go to driver and 
    do this configuration in Config.h and config.c and close interrupt  
    don't forget to make 1 tick count for timer = 1us to make calculation easy */
    
    /*  this only apply configuation that setted  in config.h and config.c*/
    Timer1_Init();
    3626:	0e 94 5d 09 	call	0x12ba	; 0x12ba <Timer1_Init>

    /*  Provide clock for timer 1 peripheral as y default I don't provide clock in initialization  */
    Timer1_ProvideClock();
    362a:	0e 94 b9 09 	call	0x1372	; 0x1372 <Timer1_ProvideClock>

}
    362e:	cf 91       	pop	r28
    3630:	df 91       	pop	r29
    3632:	08 95       	ret

00003634 <IR_Remote_Receive>:



uint64 IR_Remote_Receive(uint8 * ProtocalType , uint8 * pressState)
{
    3634:	af 92       	push	r10
    3636:	bf 92       	push	r11
    3638:	cf 92       	push	r12
    363a:	df 92       	push	r13
    363c:	ef 92       	push	r14
    363e:	ff 92       	push	r15
    3640:	0f 93       	push	r16
    3642:	1f 93       	push	r17
    3644:	df 93       	push	r29
    3646:	cf 93       	push	r28
    3648:	cd b7       	in	r28, 0x3d	; 61
    364a:	de b7       	in	r29, 0x3e	; 62
    364c:	ce 50       	subi	r28, 0x0E	; 14
    364e:	d1 40       	sbci	r29, 0x01	; 1
    3650:	0f b6       	in	r0, 0x3f	; 63
    3652:	f8 94       	cli
    3654:	de bf       	out	0x3e, r29	; 62
    3656:	0f be       	out	0x3f, r0	; 63
    3658:	cd bf       	out	0x3d, r28	; 61
    365a:	fe 01       	movw	r30, r28
    365c:	e5 5f       	subi	r30, 0xF5	; 245
    365e:	fe 4f       	sbci	r31, 0xFE	; 254
    3660:	91 83       	std	Z+1, r25	; 0x01
    3662:	80 83       	st	Z, r24
    3664:	fe 01       	movw	r30, r28
    3666:	e3 5f       	subi	r30, 0xF3	; 243
    3668:	fe 4f       	sbci	r31, 0xFE	; 254
    366a:	71 83       	std	Z+1, r23	; 0x01
    366c:	60 83       	st	Z, r22
    uint16 Array_bits [128];
    /*  Create variable to work as index  */
    uint16 i = 3; /*    [i=0] -> this for time of logic high  , [i=1] -> this for time of logic low , [i=2] -> this has constant time for logic 1 or 0 for sended signal 
    366e:	83 e0       	ldi	r24, 0x03	; 3
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	9a 83       	std	Y+2, r25	; 0x02
    3674:	89 83       	std	Y+1, r24	; 0x01
    [i=3] -> this carry time that tell me if this signal 1 (take time 2.25ms) or  0(take time 1.125ms)  */
    volatile uint64 Code_Variale = 0; 
    3676:	fe 01       	movw	r30, r28
    3678:	ed 5f       	subi	r30, 0xFD	; 253
    367a:	fe 4f       	sbci	r31, 0xFE	; 254
    367c:	10 82       	st	Z, r1
    367e:	11 82       	std	Z+1, r1	; 0x01
    3680:	12 82       	std	Z+2, r1	; 0x02
    3682:	13 82       	std	Z+3, r1	; 0x03
    3684:	14 82       	std	Z+4, r1	; 0x04
    3686:	15 82       	std	Z+5, r1	; 0x05
    3688:	16 82       	std	Z+6, r1	; 0x06
    368a:	17 82       	std	Z+7, r1	; 0x07

    IR_Remote_Analysis(Array_bits);
    368c:	ce 01       	movw	r24, r28
    368e:	03 96       	adiw	r24, 0x03	; 3
    3690:	0e 94 6d 1a 	call	0x34da	; 0x34da <IR_Remote_Analysis>

    /*  This check that if signal is NEC protoccol and user curently pressed on button*/
    if( ((Array_bits[0] < 10000) && (Array_bits[0] > 8400)) && ((Array_bits[1] < 4700) && (Array_bits[1] > 3800)) )
    3694:	8b 81       	ldd	r24, Y+3	; 0x03
    3696:	9c 81       	ldd	r25, Y+4	; 0x04
    3698:	27 e2       	ldi	r18, 0x27	; 39
    369a:	80 31       	cpi	r24, 0x10	; 16
    369c:	92 07       	cpc	r25, r18
    369e:	08 f0       	brcs	.+2      	; 0x36a2 <IR_Remote_Receive+0x6e>
    36a0:	52 c1       	rjmp	.+676    	; 0x3946 <IR_Remote_Receive+0x312>
    36a2:	8b 81       	ldd	r24, Y+3	; 0x03
    36a4:	9c 81       	ldd	r25, Y+4	; 0x04
    36a6:	20 e2       	ldi	r18, 0x20	; 32
    36a8:	81 3d       	cpi	r24, 0xD1	; 209
    36aa:	92 07       	cpc	r25, r18
    36ac:	08 f4       	brcc	.+2      	; 0x36b0 <IR_Remote_Receive+0x7c>
    36ae:	4b c1       	rjmp	.+662    	; 0x3946 <IR_Remote_Receive+0x312>
    36b0:	8d 81       	ldd	r24, Y+5	; 0x05
    36b2:	9e 81       	ldd	r25, Y+6	; 0x06
    36b4:	22 e1       	ldi	r18, 0x12	; 18
    36b6:	8c 35       	cpi	r24, 0x5C	; 92
    36b8:	92 07       	cpc	r25, r18
    36ba:	08 f0       	brcs	.+2      	; 0x36be <IR_Remote_Receive+0x8a>
    36bc:	44 c1       	rjmp	.+648    	; 0x3946 <IR_Remote_Receive+0x312>
    36be:	8d 81       	ldd	r24, Y+5	; 0x05
    36c0:	9e 81       	ldd	r25, Y+6	; 0x06
    36c2:	2e e0       	ldi	r18, 0x0E	; 14
    36c4:	89 3d       	cpi	r24, 0xD9	; 217
    36c6:	92 07       	cpc	r25, r18
    36c8:	08 f4       	brcc	.+2      	; 0x36cc <IR_Remote_Receive+0x98>
    36ca:	3d c1       	rjmp	.+634    	; 0x3946 <IR_Remote_Receive+0x312>
    {
        /*  so this is NEC protocol as start with 9ms high then 4.5ms low   */
        ProtocalType[0]= 'N' ;
    36cc:	fe 01       	movw	r30, r28
    36ce:	e5 5f       	subi	r30, 0xF5	; 245
    36d0:	fe 4f       	sbci	r31, 0xFE	; 254
    36d2:	01 90       	ld	r0, Z+
    36d4:	f0 81       	ld	r31, Z
    36d6:	e0 2d       	mov	r30, r0
    36d8:	8e e4       	ldi	r24, 0x4E	; 78
    36da:	80 83       	st	Z, r24
        ProtocalType[1]= 'E' ;
    36dc:	fe 01       	movw	r30, r28
    36de:	e5 5f       	subi	r30, 0xF5	; 245
    36e0:	fe 4f       	sbci	r31, 0xFE	; 254
    36e2:	80 81       	ld	r24, Z
    36e4:	91 81       	ldd	r25, Z+1	; 0x01
    36e6:	fc 01       	movw	r30, r24
    36e8:	31 96       	adiw	r30, 0x01	; 1
    36ea:	85 e4       	ldi	r24, 0x45	; 69
    36ec:	80 83       	st	Z, r24
        ProtocalType[2]= 'C' ;
    36ee:	fe 01       	movw	r30, r28
    36f0:	e5 5f       	subi	r30, 0xF5	; 245
    36f2:	fe 4f       	sbci	r31, 0xFE	; 254
    36f4:	80 81       	ld	r24, Z
    36f6:	91 81       	ldd	r25, Z+1	; 0x01
    36f8:	fc 01       	movw	r30, r24
    36fa:	32 96       	adiw	r30, 0x02	; 2
    36fc:	83 e4       	ldi	r24, 0x43	; 67
    36fe:	80 83       	st	Z, r24
        ProtocalType[3]= '\0' ;
    3700:	fe 01       	movw	r30, r28
    3702:	e5 5f       	subi	r30, 0xF5	; 245
    3704:	fe 4f       	sbci	r31, 0xFE	; 254
    3706:	80 81       	ld	r24, Z
    3708:	91 81       	ldd	r25, Z+1	; 0x01
    370a:	fc 01       	movw	r30, r24
    370c:	33 96       	adiw	r30, 0x03	; 3
    370e:	10 82       	st	Z, r1
    3710:	bf c0       	rjmp	.+382    	; 0x3890 <IR_Remote_Receive+0x25c>

        while(i <= 128)
        {
            if( (Array_bits[i] > 100) && (Array_bits[i] < 700) )
    3712:	89 81       	ldd	r24, Y+1	; 0x01
    3714:	9a 81       	ldd	r25, Y+2	; 0x02
    3716:	9c 01       	movw	r18, r24
    3718:	22 0f       	add	r18, r18
    371a:	33 1f       	adc	r19, r19
    371c:	ce 01       	movw	r24, r28
    371e:	01 96       	adiw	r24, 0x01	; 1
    3720:	82 0f       	add	r24, r18
    3722:	93 1f       	adc	r25, r19
    3724:	fc 01       	movw	r30, r24
    3726:	32 96       	adiw	r30, 0x02	; 2
    3728:	80 81       	ld	r24, Z
    372a:	91 81       	ldd	r25, Z+1	; 0x01
    372c:	85 36       	cpi	r24, 0x65	; 101
    372e:	91 05       	cpc	r25, r1
    3730:	08 f4       	brcc	.+2      	; 0x3734 <IR_Remote_Receive+0x100>
    3732:	43 c0       	rjmp	.+134    	; 0x37ba <IR_Remote_Receive+0x186>
    3734:	89 81       	ldd	r24, Y+1	; 0x01
    3736:	9a 81       	ldd	r25, Y+2	; 0x02
    3738:	9c 01       	movw	r18, r24
    373a:	22 0f       	add	r18, r18
    373c:	33 1f       	adc	r19, r19
    373e:	ce 01       	movw	r24, r28
    3740:	01 96       	adiw	r24, 0x01	; 1
    3742:	82 0f       	add	r24, r18
    3744:	93 1f       	adc	r25, r19
    3746:	fc 01       	movw	r30, r24
    3748:	32 96       	adiw	r30, 0x02	; 2
    374a:	80 81       	ld	r24, Z
    374c:	91 81       	ldd	r25, Z+1	; 0x01
    374e:	22 e0       	ldi	r18, 0x02	; 2
    3750:	8c 3b       	cpi	r24, 0xBC	; 188
    3752:	92 07       	cpc	r25, r18
    3754:	90 f5       	brcc	.+100    	; 0x37ba <IR_Remote_Receive+0x186>
            {
                Code_Variale = (Code_Variale << 1);
    3756:	fe 01       	movw	r30, r28
    3758:	ed 5f       	subi	r30, 0xFD	; 253
    375a:	fe 4f       	sbci	r31, 0xFE	; 254
    375c:	a0 80       	ld	r10, Z
    375e:	b1 80       	ldd	r11, Z+1	; 0x01
    3760:	c2 80       	ldd	r12, Z+2	; 0x02
    3762:	d3 80       	ldd	r13, Z+3	; 0x03
    3764:	e4 80       	ldd	r14, Z+4	; 0x04
    3766:	f5 80       	ldd	r15, Z+5	; 0x05
    3768:	06 81       	ldd	r16, Z+6	; 0x06
    376a:	17 81       	ldd	r17, Z+7	; 0x07
    376c:	2a 2d       	mov	r18, r10
    376e:	3b 2d       	mov	r19, r11
    3770:	4c 2d       	mov	r20, r12
    3772:	5d 2d       	mov	r21, r13
    3774:	6e 2d       	mov	r22, r14
    3776:	7f 2d       	mov	r23, r15
    3778:	80 2f       	mov	r24, r16
    377a:	91 2f       	mov	r25, r17
    377c:	01 e0       	ldi	r16, 0x01	; 1
    377e:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    3782:	a2 2e       	mov	r10, r18
    3784:	b3 2e       	mov	r11, r19
    3786:	c4 2e       	mov	r12, r20
    3788:	d5 2e       	mov	r13, r21
    378a:	e6 2e       	mov	r14, r22
    378c:	f7 2e       	mov	r15, r23
    378e:	08 2f       	mov	r16, r24
    3790:	19 2f       	mov	r17, r25
    3792:	2a 2d       	mov	r18, r10
    3794:	3b 2d       	mov	r19, r11
    3796:	4c 2d       	mov	r20, r12
    3798:	5d 2d       	mov	r21, r13
    379a:	6e 2d       	mov	r22, r14
    379c:	7f 2d       	mov	r23, r15
    379e:	80 2f       	mov	r24, r16
    37a0:	91 2f       	mov	r25, r17
    37a2:	fe 01       	movw	r30, r28
    37a4:	ed 5f       	subi	r30, 0xFD	; 253
    37a6:	fe 4f       	sbci	r31, 0xFE	; 254
    37a8:	20 83       	st	Z, r18
    37aa:	31 83       	std	Z+1, r19	; 0x01
    37ac:	42 83       	std	Z+2, r20	; 0x02
    37ae:	53 83       	std	Z+3, r21	; 0x03
    37b0:	64 83       	std	Z+4, r22	; 0x04
    37b2:	75 83       	std	Z+5, r23	; 0x05
    37b4:	86 83       	std	Z+6, r24	; 0x06
    37b6:	97 83       	std	Z+7, r25	; 0x07
    37b8:	66 c0       	rjmp	.+204    	; 0x3886 <IR_Remote_Receive+0x252>
            }
            else if ( (Array_bits[i] > 1200) && (Array_bits[i] < 1800) )
    37ba:	89 81       	ldd	r24, Y+1	; 0x01
    37bc:	9a 81       	ldd	r25, Y+2	; 0x02
    37be:	9c 01       	movw	r18, r24
    37c0:	22 0f       	add	r18, r18
    37c2:	33 1f       	adc	r19, r19
    37c4:	ce 01       	movw	r24, r28
    37c6:	01 96       	adiw	r24, 0x01	; 1
    37c8:	82 0f       	add	r24, r18
    37ca:	93 1f       	adc	r25, r19
    37cc:	fc 01       	movw	r30, r24
    37ce:	32 96       	adiw	r30, 0x02	; 2
    37d0:	80 81       	ld	r24, Z
    37d2:	91 81       	ldd	r25, Z+1	; 0x01
    37d4:	24 e0       	ldi	r18, 0x04	; 4
    37d6:	81 3b       	cpi	r24, 0xB1	; 177
    37d8:	92 07       	cpc	r25, r18
    37da:	08 f4       	brcc	.+2      	; 0x37de <IR_Remote_Receive+0x1aa>
    37dc:	5f c0       	rjmp	.+190    	; 0x389c <IR_Remote_Receive+0x268>
    37de:	89 81       	ldd	r24, Y+1	; 0x01
    37e0:	9a 81       	ldd	r25, Y+2	; 0x02
    37e2:	9c 01       	movw	r18, r24
    37e4:	22 0f       	add	r18, r18
    37e6:	33 1f       	adc	r19, r19
    37e8:	ce 01       	movw	r24, r28
    37ea:	01 96       	adiw	r24, 0x01	; 1
    37ec:	82 0f       	add	r24, r18
    37ee:	93 1f       	adc	r25, r19
    37f0:	fc 01       	movw	r30, r24
    37f2:	32 96       	adiw	r30, 0x02	; 2
    37f4:	80 81       	ld	r24, Z
    37f6:	91 81       	ldd	r25, Z+1	; 0x01
    37f8:	27 e0       	ldi	r18, 0x07	; 7
    37fa:	88 30       	cpi	r24, 0x08	; 8
    37fc:	92 07       	cpc	r25, r18
    37fe:	08 f0       	brcs	.+2      	; 0x3802 <IR_Remote_Receive+0x1ce>
    3800:	4d c0       	rjmp	.+154    	; 0x389c <IR_Remote_Receive+0x268>
            {
                Code_Variale = ( (Code_Variale << 1) | (1) );
    3802:	fe 01       	movw	r30, r28
    3804:	ed 5f       	subi	r30, 0xFD	; 253
    3806:	fe 4f       	sbci	r31, 0xFE	; 254
    3808:	a0 80       	ld	r10, Z
    380a:	b1 80       	ldd	r11, Z+1	; 0x01
    380c:	c2 80       	ldd	r12, Z+2	; 0x02
    380e:	d3 80       	ldd	r13, Z+3	; 0x03
    3810:	e4 80       	ldd	r14, Z+4	; 0x04
    3812:	f5 80       	ldd	r15, Z+5	; 0x05
    3814:	06 81       	ldd	r16, Z+6	; 0x06
    3816:	17 81       	ldd	r17, Z+7	; 0x07
    3818:	2a 2d       	mov	r18, r10
    381a:	3b 2d       	mov	r19, r11
    381c:	4c 2d       	mov	r20, r12
    381e:	5d 2d       	mov	r21, r13
    3820:	6e 2d       	mov	r22, r14
    3822:	7f 2d       	mov	r23, r15
    3824:	80 2f       	mov	r24, r16
    3826:	91 2f       	mov	r25, r17
    3828:	01 e0       	ldi	r16, 0x01	; 1
    382a:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    382e:	a2 2e       	mov	r10, r18
    3830:	b3 2e       	mov	r11, r19
    3832:	c4 2e       	mov	r12, r20
    3834:	d5 2e       	mov	r13, r21
    3836:	e6 2e       	mov	r14, r22
    3838:	f7 2e       	mov	r15, r23
    383a:	08 2f       	mov	r16, r24
    383c:	19 2f       	mov	r17, r25
    383e:	2a 2d       	mov	r18, r10
    3840:	3b 2d       	mov	r19, r11
    3842:	4c 2d       	mov	r20, r12
    3844:	5d 2d       	mov	r21, r13
    3846:	6e 2d       	mov	r22, r14
    3848:	7f 2d       	mov	r23, r15
    384a:	80 2f       	mov	r24, r16
    384c:	91 2f       	mov	r25, r17
    384e:	aa 24       	eor	r10, r10
    3850:	a3 94       	inc	r10
    3852:	a2 2a       	or	r10, r18
    3854:	bb 24       	eor	r11, r11
    3856:	b3 2a       	or	r11, r19
    3858:	cc 24       	eor	r12, r12
    385a:	c4 2a       	or	r12, r20
    385c:	dd 24       	eor	r13, r13
    385e:	d5 2a       	or	r13, r21
    3860:	ee 24       	eor	r14, r14
    3862:	e6 2a       	or	r14, r22
    3864:	ff 24       	eor	r15, r15
    3866:	f7 2a       	or	r15, r23
    3868:	08 2f       	mov	r16, r24
    386a:	00 60       	ori	r16, 0x00	; 0
    386c:	19 2f       	mov	r17, r25
    386e:	10 60       	ori	r17, 0x00	; 0
    3870:	fe 01       	movw	r30, r28
    3872:	ed 5f       	subi	r30, 0xFD	; 253
    3874:	fe 4f       	sbci	r31, 0xFE	; 254
    3876:	a0 82       	st	Z, r10
    3878:	b1 82       	std	Z+1, r11	; 0x01
    387a:	c2 82       	std	Z+2, r12	; 0x02
    387c:	d3 82       	std	Z+3, r13	; 0x03
    387e:	e4 82       	std	Z+4, r14	; 0x04
    3880:	f5 82       	std	Z+5, r15	; 0x05
    3882:	06 83       	std	Z+6, r16	; 0x06
    3884:	17 83       	std	Z+7, r17	; 0x07
            else 
            {
                break;
            }

            i += 2 ;
    3886:	89 81       	ldd	r24, Y+1	; 0x01
    3888:	9a 81       	ldd	r25, Y+2	; 0x02
    388a:	02 96       	adiw	r24, 0x02	; 2
    388c:	9a 83       	std	Y+2, r25	; 0x02
    388e:	89 83       	std	Y+1, r24	; 0x01
        ProtocalType[0]= 'N' ;
        ProtocalType[1]= 'E' ;
        ProtocalType[2]= 'C' ;
        ProtocalType[3]= '\0' ;

        while(i <= 128)
    3890:	89 81       	ldd	r24, Y+1	; 0x01
    3892:	9a 81       	ldd	r25, Y+2	; 0x02
    3894:	81 38       	cpi	r24, 0x81	; 129
    3896:	91 05       	cpc	r25, r1
    3898:	08 f4       	brcc	.+2      	; 0x389c <IR_Remote_Receive+0x268>
    389a:	3b cf       	rjmp	.-394    	; 0x3712 <IR_Remote_Receive+0xde>
            }

            i += 2 ;
        }

		if(Code_Variale==0)
    389c:	fe 01       	movw	r30, r28
    389e:	ed 5f       	subi	r30, 0xFD	; 253
    38a0:	fe 4f       	sbci	r31, 0xFE	; 254
    38a2:	20 81       	ld	r18, Z
    38a4:	31 81       	ldd	r19, Z+1	; 0x01
    38a6:	42 81       	ldd	r20, Z+2	; 0x02
    38a8:	53 81       	ldd	r21, Z+3	; 0x03
    38aa:	64 81       	ldd	r22, Z+4	; 0x04
    38ac:	75 81       	ldd	r23, Z+5	; 0x05
    38ae:	86 81       	ldd	r24, Z+6	; 0x06
    38b0:	97 81       	ldd	r25, Z+7	; 0x07
    38b2:	e2 2f       	mov	r30, r18
    38b4:	e3 2b       	or	r30, r19
    38b6:	e4 2b       	or	r30, r20
    38b8:	e5 2b       	or	r30, r21
    38ba:	e6 2b       	or	r30, r22
    38bc:	e7 2b       	or	r30, r23
    38be:	e8 2b       	or	r30, r24
    38c0:	e9 2b       	or	r30, r25
    38c2:	ee 23       	and	r30, r30
    38c4:	e1 f4       	brne	.+56     	; 0x38fe <IR_Remote_Receive+0x2ca>
		{
			Code_Variale = last_Code_Value;
    38c6:	20 91 7e 00 	lds	r18, 0x007E
    38ca:	30 91 7f 00 	lds	r19, 0x007F
    38ce:	40 91 80 00 	lds	r20, 0x0080
    38d2:	50 91 81 00 	lds	r21, 0x0081
    38d6:	60 91 82 00 	lds	r22, 0x0082
    38da:	70 91 83 00 	lds	r23, 0x0083
    38de:	80 91 84 00 	lds	r24, 0x0084
    38e2:	90 91 85 00 	lds	r25, 0x0085
    38e6:	fe 01       	movw	r30, r28
    38e8:	ed 5f       	subi	r30, 0xFD	; 253
    38ea:	fe 4f       	sbci	r31, 0xFE	; 254
    38ec:	20 83       	st	Z, r18
    38ee:	31 83       	std	Z+1, r19	; 0x01
    38f0:	42 83       	std	Z+2, r20	; 0x02
    38f2:	53 83       	std	Z+3, r21	; 0x03
    38f4:	64 83       	std	Z+4, r22	; 0x04
    38f6:	75 83       	std	Z+5, r23	; 0x05
    38f8:	86 83       	std	Z+6, r24	; 0x06
    38fa:	97 83       	std	Z+7, r25	; 0x07
    38fc:	a6 c1       	rjmp	.+844    	; 0x3c4a <IR_Remote_Receive+0x616>
		}
		else
		{
			last_Code_Value = Code_Variale;
    38fe:	fe 01       	movw	r30, r28
    3900:	ed 5f       	subi	r30, 0xFD	; 253
    3902:	fe 4f       	sbci	r31, 0xFE	; 254
    3904:	20 81       	ld	r18, Z
    3906:	31 81       	ldd	r19, Z+1	; 0x01
    3908:	42 81       	ldd	r20, Z+2	; 0x02
    390a:	53 81       	ldd	r21, Z+3	; 0x03
    390c:	64 81       	ldd	r22, Z+4	; 0x04
    390e:	75 81       	ldd	r23, Z+5	; 0x05
    3910:	86 81       	ldd	r24, Z+6	; 0x06
    3912:	97 81       	ldd	r25, Z+7	; 0x07
    3914:	20 93 7e 00 	sts	0x007E, r18
    3918:	30 93 7f 00 	sts	0x007F, r19
    391c:	40 93 80 00 	sts	0x0080, r20
    3920:	50 93 81 00 	sts	0x0081, r21
    3924:	60 93 82 00 	sts	0x0082, r22
    3928:	70 93 83 00 	sts	0x0083, r23
    392c:	80 93 84 00 	sts	0x0084, r24
    3930:	90 93 85 00 	sts	0x0085, r25
            *pressState = NewPress_IR ;
    3934:	fe 01       	movw	r30, r28
    3936:	e3 5f       	subi	r30, 0xF3	; 243
    3938:	fe 4f       	sbci	r31, 0xFE	; 254
    393a:	01 90       	ld	r0, Z+
    393c:	f0 81       	ld	r31, Z
    393e:	e0 2d       	mov	r30, r0
    3940:	81 e0       	ldi	r24, 0x01	; 1
    3942:	80 83       	st	Z, r24
    3944:	82 c1       	rjmp	.+772    	; 0x3c4a <IR_Remote_Receive+0x616>
		}

    }

    /*  This check that if signal is NEC protoccol and user still pressed on button  so return last press value  */
    else if( ((Array_bits[0] < 10000) && (Array_bits[0] > 8400)) && ((Array_bits[1] < 2600) && (Array_bits[1] > 1600)) )
    3946:	8b 81       	ldd	r24, Y+3	; 0x03
    3948:	9c 81       	ldd	r25, Y+4	; 0x04
    394a:	27 e2       	ldi	r18, 0x27	; 39
    394c:	80 31       	cpi	r24, 0x10	; 16
    394e:	92 07       	cpc	r25, r18
    3950:	b0 f5       	brcc	.+108    	; 0x39be <IR_Remote_Receive+0x38a>
    3952:	8b 81       	ldd	r24, Y+3	; 0x03
    3954:	9c 81       	ldd	r25, Y+4	; 0x04
    3956:	20 e2       	ldi	r18, 0x20	; 32
    3958:	81 3d       	cpi	r24, 0xD1	; 209
    395a:	92 07       	cpc	r25, r18
    395c:	80 f1       	brcs	.+96     	; 0x39be <IR_Remote_Receive+0x38a>
    395e:	8d 81       	ldd	r24, Y+5	; 0x05
    3960:	9e 81       	ldd	r25, Y+6	; 0x06
    3962:	2a e0       	ldi	r18, 0x0A	; 10
    3964:	88 32       	cpi	r24, 0x28	; 40
    3966:	92 07       	cpc	r25, r18
    3968:	50 f5       	brcc	.+84     	; 0x39be <IR_Remote_Receive+0x38a>
    396a:	8d 81       	ldd	r24, Y+5	; 0x05
    396c:	9e 81       	ldd	r25, Y+6	; 0x06
    396e:	26 e0       	ldi	r18, 0x06	; 6
    3970:	81 34       	cpi	r24, 0x41	; 65
    3972:	92 07       	cpc	r25, r18
    3974:	20 f1       	brcs	.+72     	; 0x39be <IR_Remote_Receive+0x38a>
    {
        Code_Variale = last_Code_Value;
    3976:	20 91 7e 00 	lds	r18, 0x007E
    397a:	30 91 7f 00 	lds	r19, 0x007F
    397e:	40 91 80 00 	lds	r20, 0x0080
    3982:	50 91 81 00 	lds	r21, 0x0081
    3986:	60 91 82 00 	lds	r22, 0x0082
    398a:	70 91 83 00 	lds	r23, 0x0083
    398e:	80 91 84 00 	lds	r24, 0x0084
    3992:	90 91 85 00 	lds	r25, 0x0085
    3996:	fe 01       	movw	r30, r28
    3998:	ed 5f       	subi	r30, 0xFD	; 253
    399a:	fe 4f       	sbci	r31, 0xFE	; 254
    399c:	20 83       	st	Z, r18
    399e:	31 83       	std	Z+1, r19	; 0x01
    39a0:	42 83       	std	Z+2, r20	; 0x02
    39a2:	53 83       	std	Z+3, r21	; 0x03
    39a4:	64 83       	std	Z+4, r22	; 0x04
    39a6:	75 83       	std	Z+5, r23	; 0x05
    39a8:	86 83       	std	Z+6, r24	; 0x06
    39aa:	97 83       	std	Z+7, r25	; 0x07
        *pressState = StillPress_IR ;
    39ac:	fe 01       	movw	r30, r28
    39ae:	e3 5f       	subi	r30, 0xF3	; 243
    39b0:	fe 4f       	sbci	r31, 0xFE	; 254
    39b2:	01 90       	ld	r0, Z+
    39b4:	f0 81       	ld	r31, Z
    39b6:	e0 2d       	mov	r30, r0
    39b8:	82 e0       	ldi	r24, 0x02	; 2
    39ba:	80 83       	st	Z, r24
    39bc:	46 c1       	rjmp	.+652    	; 0x3c4a <IR_Remote_Receive+0x616>

    }

    else if(((Array_bits[0]<4000)&&(Array_bits[0]>3000))&&((Array_bits[1]<2000)&&(Array_bits[1]>1000)))
    39be:	8b 81       	ldd	r24, Y+3	; 0x03
    39c0:	9c 81       	ldd	r25, Y+4	; 0x04
    39c2:	2f e0       	ldi	r18, 0x0F	; 15
    39c4:	80 3a       	cpi	r24, 0xA0	; 160
    39c6:	92 07       	cpc	r25, r18
    39c8:	08 f0       	brcs	.+2      	; 0x39cc <IR_Remote_Receive+0x398>
    39ca:	34 c1       	rjmp	.+616    	; 0x3c34 <IR_Remote_Receive+0x600>
    39cc:	8b 81       	ldd	r24, Y+3	; 0x03
    39ce:	9c 81       	ldd	r25, Y+4	; 0x04
    39d0:	2b e0       	ldi	r18, 0x0B	; 11
    39d2:	89 3b       	cpi	r24, 0xB9	; 185
    39d4:	92 07       	cpc	r25, r18
    39d6:	08 f4       	brcc	.+2      	; 0x39da <IR_Remote_Receive+0x3a6>
    39d8:	2d c1       	rjmp	.+602    	; 0x3c34 <IR_Remote_Receive+0x600>
    39da:	8d 81       	ldd	r24, Y+5	; 0x05
    39dc:	9e 81       	ldd	r25, Y+6	; 0x06
    39de:	27 e0       	ldi	r18, 0x07	; 7
    39e0:	80 3d       	cpi	r24, 0xD0	; 208
    39e2:	92 07       	cpc	r25, r18
    39e4:	08 f0       	brcs	.+2      	; 0x39e8 <IR_Remote_Receive+0x3b4>
    39e6:	26 c1       	rjmp	.+588    	; 0x3c34 <IR_Remote_Receive+0x600>
    39e8:	8d 81       	ldd	r24, Y+5	; 0x05
    39ea:	9e 81       	ldd	r25, Y+6	; 0x06
    39ec:	23 e0       	ldi	r18, 0x03	; 3
    39ee:	89 3e       	cpi	r24, 0xE9	; 233
    39f0:	92 07       	cpc	r25, r18
    39f2:	08 f4       	brcc	.+2      	; 0x39f6 <IR_Remote_Receive+0x3c2>
    39f4:	1f c1       	rjmp	.+574    	; 0x3c34 <IR_Remote_Receive+0x600>
	{
		ProtocalType[0]='P';
    39f6:	fe 01       	movw	r30, r28
    39f8:	e5 5f       	subi	r30, 0xF5	; 245
    39fa:	fe 4f       	sbci	r31, 0xFE	; 254
    39fc:	01 90       	ld	r0, Z+
    39fe:	f0 81       	ld	r31, Z
    3a00:	e0 2d       	mov	r30, r0
    3a02:	80 e5       	ldi	r24, 0x50	; 80
    3a04:	80 83       	st	Z, r24
		ProtocalType[1]='A';
    3a06:	fe 01       	movw	r30, r28
    3a08:	e5 5f       	subi	r30, 0xF5	; 245
    3a0a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a0c:	80 81       	ld	r24, Z
    3a0e:	91 81       	ldd	r25, Z+1	; 0x01
    3a10:	fc 01       	movw	r30, r24
    3a12:	31 96       	adiw	r30, 0x01	; 1
    3a14:	81 e4       	ldi	r24, 0x41	; 65
    3a16:	80 83       	st	Z, r24
		ProtocalType[2]='N';
    3a18:	fe 01       	movw	r30, r28
    3a1a:	e5 5f       	subi	r30, 0xF5	; 245
    3a1c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a1e:	80 81       	ld	r24, Z
    3a20:	91 81       	ldd	r25, Z+1	; 0x01
    3a22:	fc 01       	movw	r30, r24
    3a24:	32 96       	adiw	r30, 0x02	; 2
    3a26:	8e e4       	ldi	r24, 0x4E	; 78
    3a28:	80 83       	st	Z, r24
		ProtocalType[3]='A';
    3a2a:	fe 01       	movw	r30, r28
    3a2c:	e5 5f       	subi	r30, 0xF5	; 245
    3a2e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a30:	80 81       	ld	r24, Z
    3a32:	91 81       	ldd	r25, Z+1	; 0x01
    3a34:	fc 01       	movw	r30, r24
    3a36:	33 96       	adiw	r30, 0x03	; 3
    3a38:	81 e4       	ldi	r24, 0x41	; 65
    3a3a:	80 83       	st	Z, r24
		ProtocalType[4]='S';
    3a3c:	fe 01       	movw	r30, r28
    3a3e:	e5 5f       	subi	r30, 0xF5	; 245
    3a40:	fe 4f       	sbci	r31, 0xFE	; 254
    3a42:	80 81       	ld	r24, Z
    3a44:	91 81       	ldd	r25, Z+1	; 0x01
    3a46:	fc 01       	movw	r30, r24
    3a48:	34 96       	adiw	r30, 0x04	; 4
    3a4a:	83 e5       	ldi	r24, 0x53	; 83
    3a4c:	80 83       	st	Z, r24
		ProtocalType[5]='O';
    3a4e:	fe 01       	movw	r30, r28
    3a50:	e5 5f       	subi	r30, 0xF5	; 245
    3a52:	fe 4f       	sbci	r31, 0xFE	; 254
    3a54:	80 81       	ld	r24, Z
    3a56:	91 81       	ldd	r25, Z+1	; 0x01
    3a58:	fc 01       	movw	r30, r24
    3a5a:	35 96       	adiw	r30, 0x05	; 5
    3a5c:	8f e4       	ldi	r24, 0x4F	; 79
    3a5e:	80 83       	st	Z, r24
		ProtocalType[6]='N';
    3a60:	fe 01       	movw	r30, r28
    3a62:	e5 5f       	subi	r30, 0xF5	; 245
    3a64:	fe 4f       	sbci	r31, 0xFE	; 254
    3a66:	80 81       	ld	r24, Z
    3a68:	91 81       	ldd	r25, Z+1	; 0x01
    3a6a:	fc 01       	movw	r30, r24
    3a6c:	36 96       	adiw	r30, 0x06	; 6
    3a6e:	8e e4       	ldi	r24, 0x4E	; 78
    3a70:	80 83       	st	Z, r24
		ProtocalType[7]='I';
    3a72:	fe 01       	movw	r30, r28
    3a74:	e5 5f       	subi	r30, 0xF5	; 245
    3a76:	fe 4f       	sbci	r31, 0xFE	; 254
    3a78:	80 81       	ld	r24, Z
    3a7a:	91 81       	ldd	r25, Z+1	; 0x01
    3a7c:	fc 01       	movw	r30, r24
    3a7e:	37 96       	adiw	r30, 0x07	; 7
    3a80:	89 e4       	ldi	r24, 0x49	; 73
    3a82:	80 83       	st	Z, r24
		ProtocalType[8]='C';
    3a84:	fe 01       	movw	r30, r28
    3a86:	e5 5f       	subi	r30, 0xF5	; 245
    3a88:	fe 4f       	sbci	r31, 0xFE	; 254
    3a8a:	80 81       	ld	r24, Z
    3a8c:	91 81       	ldd	r25, Z+1	; 0x01
    3a8e:	fc 01       	movw	r30, r24
    3a90:	38 96       	adiw	r30, 0x08	; 8
    3a92:	83 e4       	ldi	r24, 0x43	; 67
    3a94:	80 83       	st	Z, r24
		ProtocalType[9]='\0';
    3a96:	fe 01       	movw	r30, r28
    3a98:	e5 5f       	subi	r30, 0xF5	; 245
    3a9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a9c:	80 81       	ld	r24, Z
    3a9e:	91 81       	ldd	r25, Z+1	; 0x01
    3aa0:	fc 01       	movw	r30, r24
    3aa2:	39 96       	adiw	r30, 0x09	; 9
    3aa4:	10 82       	st	Z, r1
    3aa6:	bf c0       	rjmp	.+382    	; 0x3c26 <IR_Remote_Receive+0x5f2>
		while (i<=128)
		{
			
			if ((Array_bits[i]>30)&&(Array_bits[i]<630))
    3aa8:	89 81       	ldd	r24, Y+1	; 0x01
    3aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    3aac:	9c 01       	movw	r18, r24
    3aae:	22 0f       	add	r18, r18
    3ab0:	33 1f       	adc	r19, r19
    3ab2:	ce 01       	movw	r24, r28
    3ab4:	01 96       	adiw	r24, 0x01	; 1
    3ab6:	82 0f       	add	r24, r18
    3ab8:	93 1f       	adc	r25, r19
    3aba:	fc 01       	movw	r30, r24
    3abc:	32 96       	adiw	r30, 0x02	; 2
    3abe:	80 81       	ld	r24, Z
    3ac0:	91 81       	ldd	r25, Z+1	; 0x01
    3ac2:	8f 31       	cpi	r24, 0x1F	; 31
    3ac4:	91 05       	cpc	r25, r1
    3ac6:	08 f4       	brcc	.+2      	; 0x3aca <IR_Remote_Receive+0x496>
    3ac8:	43 c0       	rjmp	.+134    	; 0x3b50 <IR_Remote_Receive+0x51c>
    3aca:	89 81       	ldd	r24, Y+1	; 0x01
    3acc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ace:	9c 01       	movw	r18, r24
    3ad0:	22 0f       	add	r18, r18
    3ad2:	33 1f       	adc	r19, r19
    3ad4:	ce 01       	movw	r24, r28
    3ad6:	01 96       	adiw	r24, 0x01	; 1
    3ad8:	82 0f       	add	r24, r18
    3ada:	93 1f       	adc	r25, r19
    3adc:	fc 01       	movw	r30, r24
    3ade:	32 96       	adiw	r30, 0x02	; 2
    3ae0:	80 81       	ld	r24, Z
    3ae2:	91 81       	ldd	r25, Z+1	; 0x01
    3ae4:	22 e0       	ldi	r18, 0x02	; 2
    3ae6:	86 37       	cpi	r24, 0x76	; 118
    3ae8:	92 07       	cpc	r25, r18
    3aea:	90 f5       	brcc	.+100    	; 0x3b50 <IR_Remote_Receive+0x51c>
			{
				Code_Variale=(Code_Variale<<1);
    3aec:	fe 01       	movw	r30, r28
    3aee:	ed 5f       	subi	r30, 0xFD	; 253
    3af0:	fe 4f       	sbci	r31, 0xFE	; 254
    3af2:	a0 80       	ld	r10, Z
    3af4:	b1 80       	ldd	r11, Z+1	; 0x01
    3af6:	c2 80       	ldd	r12, Z+2	; 0x02
    3af8:	d3 80       	ldd	r13, Z+3	; 0x03
    3afa:	e4 80       	ldd	r14, Z+4	; 0x04
    3afc:	f5 80       	ldd	r15, Z+5	; 0x05
    3afe:	06 81       	ldd	r16, Z+6	; 0x06
    3b00:	17 81       	ldd	r17, Z+7	; 0x07
    3b02:	2a 2d       	mov	r18, r10
    3b04:	3b 2d       	mov	r19, r11
    3b06:	4c 2d       	mov	r20, r12
    3b08:	5d 2d       	mov	r21, r13
    3b0a:	6e 2d       	mov	r22, r14
    3b0c:	7f 2d       	mov	r23, r15
    3b0e:	80 2f       	mov	r24, r16
    3b10:	91 2f       	mov	r25, r17
    3b12:	01 e0       	ldi	r16, 0x01	; 1
    3b14:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    3b18:	a2 2e       	mov	r10, r18
    3b1a:	b3 2e       	mov	r11, r19
    3b1c:	c4 2e       	mov	r12, r20
    3b1e:	d5 2e       	mov	r13, r21
    3b20:	e6 2e       	mov	r14, r22
    3b22:	f7 2e       	mov	r15, r23
    3b24:	08 2f       	mov	r16, r24
    3b26:	19 2f       	mov	r17, r25
    3b28:	2a 2d       	mov	r18, r10
    3b2a:	3b 2d       	mov	r19, r11
    3b2c:	4c 2d       	mov	r20, r12
    3b2e:	5d 2d       	mov	r21, r13
    3b30:	6e 2d       	mov	r22, r14
    3b32:	7f 2d       	mov	r23, r15
    3b34:	80 2f       	mov	r24, r16
    3b36:	91 2f       	mov	r25, r17
    3b38:	fe 01       	movw	r30, r28
    3b3a:	ed 5f       	subi	r30, 0xFD	; 253
    3b3c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b3e:	20 83       	st	Z, r18
    3b40:	31 83       	std	Z+1, r19	; 0x01
    3b42:	42 83       	std	Z+2, r20	; 0x02
    3b44:	53 83       	std	Z+3, r21	; 0x03
    3b46:	64 83       	std	Z+4, r22	; 0x04
    3b48:	75 83       	std	Z+5, r23	; 0x05
    3b4a:	86 83       	std	Z+6, r24	; 0x06
    3b4c:	97 83       	std	Z+7, r25	; 0x07
    3b4e:	66 c0       	rjmp	.+204    	; 0x3c1c <IR_Remote_Receive+0x5e8>
				
			}
			else if ((Array_bits[i]>900)&&(Array_bits[i]<1500))
    3b50:	89 81       	ldd	r24, Y+1	; 0x01
    3b52:	9a 81       	ldd	r25, Y+2	; 0x02
    3b54:	9c 01       	movw	r18, r24
    3b56:	22 0f       	add	r18, r18
    3b58:	33 1f       	adc	r19, r19
    3b5a:	ce 01       	movw	r24, r28
    3b5c:	01 96       	adiw	r24, 0x01	; 1
    3b5e:	82 0f       	add	r24, r18
    3b60:	93 1f       	adc	r25, r19
    3b62:	fc 01       	movw	r30, r24
    3b64:	32 96       	adiw	r30, 0x02	; 2
    3b66:	80 81       	ld	r24, Z
    3b68:	91 81       	ldd	r25, Z+1	; 0x01
    3b6a:	23 e0       	ldi	r18, 0x03	; 3
    3b6c:	85 38       	cpi	r24, 0x85	; 133
    3b6e:	92 07       	cpc	r25, r18
    3b70:	08 f4       	brcc	.+2      	; 0x3b74 <IR_Remote_Receive+0x540>
    3b72:	6b c0       	rjmp	.+214    	; 0x3c4a <IR_Remote_Receive+0x616>
    3b74:	89 81       	ldd	r24, Y+1	; 0x01
    3b76:	9a 81       	ldd	r25, Y+2	; 0x02
    3b78:	9c 01       	movw	r18, r24
    3b7a:	22 0f       	add	r18, r18
    3b7c:	33 1f       	adc	r19, r19
    3b7e:	ce 01       	movw	r24, r28
    3b80:	01 96       	adiw	r24, 0x01	; 1
    3b82:	82 0f       	add	r24, r18
    3b84:	93 1f       	adc	r25, r19
    3b86:	fc 01       	movw	r30, r24
    3b88:	32 96       	adiw	r30, 0x02	; 2
    3b8a:	80 81       	ld	r24, Z
    3b8c:	91 81       	ldd	r25, Z+1	; 0x01
    3b8e:	25 e0       	ldi	r18, 0x05	; 5
    3b90:	8c 3d       	cpi	r24, 0xDC	; 220
    3b92:	92 07       	cpc	r25, r18
    3b94:	08 f0       	brcs	.+2      	; 0x3b98 <IR_Remote_Receive+0x564>
    3b96:	59 c0       	rjmp	.+178    	; 0x3c4a <IR_Remote_Receive+0x616>
			{
				Code_Variale=((Code_Variale<<1)|(1));
    3b98:	fe 01       	movw	r30, r28
    3b9a:	ed 5f       	subi	r30, 0xFD	; 253
    3b9c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b9e:	a0 80       	ld	r10, Z
    3ba0:	b1 80       	ldd	r11, Z+1	; 0x01
    3ba2:	c2 80       	ldd	r12, Z+2	; 0x02
    3ba4:	d3 80       	ldd	r13, Z+3	; 0x03
    3ba6:	e4 80       	ldd	r14, Z+4	; 0x04
    3ba8:	f5 80       	ldd	r15, Z+5	; 0x05
    3baa:	06 81       	ldd	r16, Z+6	; 0x06
    3bac:	17 81       	ldd	r17, Z+7	; 0x07
    3bae:	2a 2d       	mov	r18, r10
    3bb0:	3b 2d       	mov	r19, r11
    3bb2:	4c 2d       	mov	r20, r12
    3bb4:	5d 2d       	mov	r21, r13
    3bb6:	6e 2d       	mov	r22, r14
    3bb8:	7f 2d       	mov	r23, r15
    3bba:	80 2f       	mov	r24, r16
    3bbc:	91 2f       	mov	r25, r17
    3bbe:	01 e0       	ldi	r16, 0x01	; 1
    3bc0:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    3bc4:	a2 2e       	mov	r10, r18
    3bc6:	b3 2e       	mov	r11, r19
    3bc8:	c4 2e       	mov	r12, r20
    3bca:	d5 2e       	mov	r13, r21
    3bcc:	e6 2e       	mov	r14, r22
    3bce:	f7 2e       	mov	r15, r23
    3bd0:	08 2f       	mov	r16, r24
    3bd2:	19 2f       	mov	r17, r25
    3bd4:	2a 2d       	mov	r18, r10
    3bd6:	3b 2d       	mov	r19, r11
    3bd8:	4c 2d       	mov	r20, r12
    3bda:	5d 2d       	mov	r21, r13
    3bdc:	6e 2d       	mov	r22, r14
    3bde:	7f 2d       	mov	r23, r15
    3be0:	80 2f       	mov	r24, r16
    3be2:	91 2f       	mov	r25, r17
    3be4:	aa 24       	eor	r10, r10
    3be6:	a3 94       	inc	r10
    3be8:	a2 2a       	or	r10, r18
    3bea:	bb 24       	eor	r11, r11
    3bec:	b3 2a       	or	r11, r19
    3bee:	cc 24       	eor	r12, r12
    3bf0:	c4 2a       	or	r12, r20
    3bf2:	dd 24       	eor	r13, r13
    3bf4:	d5 2a       	or	r13, r21
    3bf6:	ee 24       	eor	r14, r14
    3bf8:	e6 2a       	or	r14, r22
    3bfa:	ff 24       	eor	r15, r15
    3bfc:	f7 2a       	or	r15, r23
    3bfe:	08 2f       	mov	r16, r24
    3c00:	00 60       	ori	r16, 0x00	; 0
    3c02:	19 2f       	mov	r17, r25
    3c04:	10 60       	ori	r17, 0x00	; 0
    3c06:	fe 01       	movw	r30, r28
    3c08:	ed 5f       	subi	r30, 0xFD	; 253
    3c0a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c0c:	a0 82       	st	Z, r10
    3c0e:	b1 82       	std	Z+1, r11	; 0x01
    3c10:	c2 82       	std	Z+2, r12	; 0x02
    3c12:	d3 82       	std	Z+3, r13	; 0x03
    3c14:	e4 82       	std	Z+4, r14	; 0x04
    3c16:	f5 82       	std	Z+5, r15	; 0x05
    3c18:	06 83       	std	Z+6, r16	; 0x06
    3c1a:	17 83       	std	Z+7, r17	; 0x07
			else
			{
				break;
			}
			
			i=i+2;
    3c1c:	89 81       	ldd	r24, Y+1	; 0x01
    3c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c20:	02 96       	adiw	r24, 0x02	; 2
    3c22:	9a 83       	std	Y+2, r25	; 0x02
    3c24:	89 83       	std	Y+1, r24	; 0x01
		ProtocalType[5]='O';
		ProtocalType[6]='N';
		ProtocalType[7]='I';
		ProtocalType[8]='C';
		ProtocalType[9]='\0';
		while (i<=128)
    3c26:	89 81       	ldd	r24, Y+1	; 0x01
    3c28:	9a 81       	ldd	r25, Y+2	; 0x02
    3c2a:	81 38       	cpi	r24, 0x81	; 129
    3c2c:	91 05       	cpc	r25, r1
    3c2e:	08 f4       	brcc	.+2      	; 0x3c32 <IR_Remote_Receive+0x5fe>
    3c30:	3b cf       	rjmp	.-394    	; 0x3aa8 <IR_Remote_Receive+0x474>
    3c32:	0b c0       	rjmp	.+22     	; 0x3c4a <IR_Remote_Receive+0x616>
		}
		
	}
	else
	{
		Code_Variale = 0;
    3c34:	fe 01       	movw	r30, r28
    3c36:	ed 5f       	subi	r30, 0xFD	; 253
    3c38:	fe 4f       	sbci	r31, 0xFE	; 254
    3c3a:	10 82       	st	Z, r1
    3c3c:	11 82       	std	Z+1, r1	; 0x01
    3c3e:	12 82       	std	Z+2, r1	; 0x02
    3c40:	13 82       	std	Z+3, r1	; 0x03
    3c42:	14 82       	std	Z+4, r1	; 0x04
    3c44:	15 82       	std	Z+5, r1	; 0x05
    3c46:	16 82       	std	Z+6, r1	; 0x06
    3c48:	17 82       	std	Z+7, r1	; 0x07
            *pressState = NOPress_IR ;
        #endif
	}
	

    return Code_Variale ;
    3c4a:	fe 01       	movw	r30, r28
    3c4c:	ed 5f       	subi	r30, 0xFD	; 253
    3c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c50:	20 81       	ld	r18, Z
    3c52:	31 81       	ldd	r19, Z+1	; 0x01
    3c54:	42 81       	ldd	r20, Z+2	; 0x02
    3c56:	53 81       	ldd	r21, Z+3	; 0x03
    3c58:	64 81       	ldd	r22, Z+4	; 0x04
    3c5a:	75 81       	ldd	r23, Z+5	; 0x05
    3c5c:	86 81       	ldd	r24, Z+6	; 0x06
    3c5e:	97 81       	ldd	r25, Z+7	; 0x07
    3c60:	a2 2e       	mov	r10, r18
    3c62:	b3 2e       	mov	r11, r19
    3c64:	c4 2e       	mov	r12, r20
    3c66:	d5 2e       	mov	r13, r21
    3c68:	e6 2e       	mov	r14, r22
    3c6a:	f7 2e       	mov	r15, r23
    3c6c:	08 2f       	mov	r16, r24
    3c6e:	19 2f       	mov	r17, r25
}
    3c70:	2a 2d       	mov	r18, r10
    3c72:	3b 2d       	mov	r19, r11
    3c74:	4c 2d       	mov	r20, r12
    3c76:	5d 2d       	mov	r21, r13
    3c78:	6e 2d       	mov	r22, r14
    3c7a:	7f 2d       	mov	r23, r15
    3c7c:	80 2f       	mov	r24, r16
    3c7e:	91 2f       	mov	r25, r17
    3c80:	c2 5f       	subi	r28, 0xF2	; 242
    3c82:	de 4f       	sbci	r29, 0xFE	; 254
    3c84:	0f b6       	in	r0, 0x3f	; 63
    3c86:	f8 94       	cli
    3c88:	de bf       	out	0x3e, r29	; 62
    3c8a:	0f be       	out	0x3f, r0	; 63
    3c8c:	cd bf       	out	0x3d, r28	; 61
    3c8e:	cf 91       	pop	r28
    3c90:	df 91       	pop	r29
    3c92:	1f 91       	pop	r17
    3c94:	0f 91       	pop	r16
    3c96:	ff 90       	pop	r15
    3c98:	ef 90       	pop	r14
    3c9a:	df 90       	pop	r13
    3c9c:	cf 90       	pop	r12
    3c9e:	bf 90       	pop	r11
    3ca0:	af 90       	pop	r10
    3ca2:	08 95       	ret

00003ca4 <main>:

#define F_CPU 8000000UL
#include "util/delay.h"

int main(void)
{
    3ca4:	af 92       	push	r10
    3ca6:	bf 92       	push	r11
    3ca8:	cf 92       	push	r12
    3caa:	df 92       	push	r13
    3cac:	ef 92       	push	r14
    3cae:	ff 92       	push	r15
    3cb0:	0f 93       	push	r16
    3cb2:	1f 93       	push	r17
    3cb4:	df 93       	push	r29
    3cb6:	cf 93       	push	r28
    3cb8:	cd b7       	in	r28, 0x3d	; 61
    3cba:	de b7       	in	r29, 0x3e	; 62
    3cbc:	c0 5a       	subi	r28, 0xA0	; 160
    3cbe:	d0 40       	sbci	r29, 0x00	; 0
    3cc0:	0f b6       	in	r0, 0x3f	; 63
    3cc2:	f8 94       	cli
    3cc4:	de bf       	out	0x3e, r29	; 62
    3cc6:	0f be       	out	0x3f, r0	; 63
    3cc8:	cd bf       	out	0x3d, r28	; 61
    LCD_init();
    3cca:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_init>
    IR_Remote_Init();
    3cce:	0e 94 0a 1b 	call	0x3614	; 0x3614 <IR_Remote_Init>
    GPIO_init();
    3cd2:	0e 94 e6 09 	call	0x13cc	; 0x13cc <GPIO_init>

    while(1)
    {
        IR_signal_buffer = IR_Remote_Receive(the_protocol_type , &IR_press_state);
    3cd6:	8f e8       	ldi	r24, 0x8F	; 143
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	2e e8       	ldi	r18, 0x8E	; 142
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	b9 01       	movw	r22, r18
    3ce0:	0e 94 1a 1b 	call	0x3634	; 0x3634 <IR_Remote_Receive>
    3ce4:	a2 2e       	mov	r10, r18
    3ce6:	b3 2e       	mov	r11, r19
    3ce8:	c4 2e       	mov	r12, r20
    3cea:	d5 2e       	mov	r13, r21
    3cec:	e6 2e       	mov	r14, r22
    3cee:	f7 2e       	mov	r15, r23
    3cf0:	08 2f       	mov	r16, r24
    3cf2:	19 2f       	mov	r17, r25
    3cf4:	a0 92 86 00 	sts	0x0086, r10
    3cf8:	b0 92 87 00 	sts	0x0087, r11
    3cfc:	c0 92 88 00 	sts	0x0088, r12
    3d00:	d0 92 89 00 	sts	0x0089, r13
    3d04:	e0 92 8a 00 	sts	0x008A, r14
    3d08:	f0 92 8b 00 	sts	0x008B, r15
    3d0c:	00 93 8c 00 	sts	0x008C, r16
    3d10:	10 93 8d 00 	sts	0x008D, r17
        Convert_uint64_to_String(IR_signal_buffer,the_code);
    3d14:	a0 90 86 00 	lds	r10, 0x0086
    3d18:	b0 90 87 00 	lds	r11, 0x0087
    3d1c:	c0 90 88 00 	lds	r12, 0x0088
    3d20:	d0 90 89 00 	lds	r13, 0x0089
    3d24:	e0 90 8a 00 	lds	r14, 0x008A
    3d28:	f0 90 8b 00 	lds	r15, 0x008B
    3d2c:	00 91 8c 00 	lds	r16, 0x008C
    3d30:	10 91 8d 00 	lds	r17, 0x008D
    3d34:	ed ea       	ldi	r30, 0xAD	; 173
    3d36:	f0 e0       	ldi	r31, 0x00	; 0
    3d38:	2a 2d       	mov	r18, r10
    3d3a:	3b 2d       	mov	r19, r11
    3d3c:	4c 2d       	mov	r20, r12
    3d3e:	5d 2d       	mov	r21, r13
    3d40:	6e 2d       	mov	r22, r14
    3d42:	7f 2d       	mov	r23, r15
    3d44:	80 2f       	mov	r24, r16
    3d46:	91 2f       	mov	r25, r17
    3d48:	8f 01       	movw	r16, r30
    3d4a:	0e 94 f4 06 	call	0xde8	; 0xde8 <Convert_uint64_to_String>
		
        LCD_MoveCursor(0,0);
    3d4e:	80 e0       	ldi	r24, 0x00	; 0
    3d50:	60 e0       	ldi	r22, 0x00	; 0
    3d52:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_MoveCursor>
        LCD_DisplayString(the_code);
    3d56:	8d ea       	ldi	r24, 0xAD	; 173
    3d58:	90 e0       	ldi	r25, 0x00	; 0
    3d5a:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <LCD_DisplayString>


        LCD_MoveCursor(1,0);
    3d5e:	81 e0       	ldi	r24, 0x01	; 1
    3d60:	60 e0       	ldi	r22, 0x00	; 0
    3d62:	0e 94 14 19 	call	0x3228	; 0x3228 <LCD_MoveCursor>
        LCD_DisplayString(the_protocol_type);
    3d66:	8f e8       	ldi	r24, 0x8F	; 143
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <LCD_DisplayString>

       if( (IR_signal_buffer == IR_CMD_1) && (IR_press_state == NewPress_IR) )
    3d6e:	80 91 86 00 	lds	r24, 0x0086
    3d72:	c7 56       	subi	r28, 0x67	; 103
    3d74:	df 4f       	sbci	r29, 0xFF	; 255
    3d76:	88 83       	st	Y, r24
    3d78:	c9 59       	subi	r28, 0x99	; 153
    3d7a:	d0 40       	sbci	r29, 0x00	; 0
    3d7c:	80 91 87 00 	lds	r24, 0x0087
    3d80:	c6 56       	subi	r28, 0x66	; 102
    3d82:	df 4f       	sbci	r29, 0xFF	; 255
    3d84:	88 83       	st	Y, r24
    3d86:	ca 59       	subi	r28, 0x9A	; 154
    3d88:	d0 40       	sbci	r29, 0x00	; 0
    3d8a:	80 91 88 00 	lds	r24, 0x0088
    3d8e:	c5 56       	subi	r28, 0x65	; 101
    3d90:	df 4f       	sbci	r29, 0xFF	; 255
    3d92:	88 83       	st	Y, r24
    3d94:	cb 59       	subi	r28, 0x9B	; 155
    3d96:	d0 40       	sbci	r29, 0x00	; 0
    3d98:	80 91 89 00 	lds	r24, 0x0089
    3d9c:	c4 56       	subi	r28, 0x64	; 100
    3d9e:	df 4f       	sbci	r29, 0xFF	; 255
    3da0:	88 83       	st	Y, r24
    3da2:	cc 59       	subi	r28, 0x9C	; 156
    3da4:	d0 40       	sbci	r29, 0x00	; 0
    3da6:	80 91 8a 00 	lds	r24, 0x008A
    3daa:	c3 56       	subi	r28, 0x63	; 99
    3dac:	df 4f       	sbci	r29, 0xFF	; 255
    3dae:	88 83       	st	Y, r24
    3db0:	cd 59       	subi	r28, 0x9D	; 157
    3db2:	d0 40       	sbci	r29, 0x00	; 0
    3db4:	80 91 8b 00 	lds	r24, 0x008B
    3db8:	c2 56       	subi	r28, 0x62	; 98
    3dba:	df 4f       	sbci	r29, 0xFF	; 255
    3dbc:	88 83       	st	Y, r24
    3dbe:	ce 59       	subi	r28, 0x9E	; 158
    3dc0:	d0 40       	sbci	r29, 0x00	; 0
    3dc2:	80 91 8c 00 	lds	r24, 0x008C
    3dc6:	c1 56       	subi	r28, 0x61	; 97
    3dc8:	df 4f       	sbci	r29, 0xFF	; 255
    3dca:	88 83       	st	Y, r24
    3dcc:	cf 59       	subi	r28, 0x9F	; 159
    3dce:	d0 40       	sbci	r29, 0x00	; 0
    3dd0:	80 91 8d 00 	lds	r24, 0x008D
    3dd4:	c0 56       	subi	r28, 0x60	; 96
    3dd6:	df 4f       	sbci	r29, 0xFF	; 255
    3dd8:	88 83       	st	Y, r24
    3dda:	c0 5a       	subi	r28, 0xA0	; 160
    3ddc:	d0 40       	sbci	r29, 0x00	; 0
    3dde:	c7 56       	subi	r28, 0x67	; 103
    3de0:	df 4f       	sbci	r29, 0xFF	; 255
    3de2:	88 81       	ld	r24, Y
    3de4:	c9 59       	subi	r28, 0x99	; 153
    3de6:	d0 40       	sbci	r29, 0x00	; 0
    3de8:	8d 35       	cpi	r24, 0x5D	; 93
    3dea:	d9 f5       	brne	.+118    	; 0x3e62 <main+0x1be>
    3dec:	c6 56       	subi	r28, 0x66	; 102
    3dee:	df 4f       	sbci	r29, 0xFF	; 255
    3df0:	88 81       	ld	r24, Y
    3df2:	ca 59       	subi	r28, 0x9A	; 154
    3df4:	d0 40       	sbci	r29, 0x00	; 0
    3df6:	82 3a       	cpi	r24, 0xA2	; 162
    3df8:	a1 f5       	brne	.+104    	; 0x3e62 <main+0x1be>
    3dfa:	c5 56       	subi	r28, 0x65	; 101
    3dfc:	df 4f       	sbci	r29, 0xFF	; 255
    3dfe:	88 81       	ld	r24, Y
    3e00:	cb 59       	subi	r28, 0x9B	; 155
    3e02:	d0 40       	sbci	r29, 0x00	; 0
    3e04:	8f 3f       	cpi	r24, 0xFF	; 255
    3e06:	69 f5       	brne	.+90     	; 0x3e62 <main+0x1be>
    3e08:	c4 56       	subi	r28, 0x64	; 100
    3e0a:	df 4f       	sbci	r29, 0xFF	; 255
    3e0c:	88 81       	ld	r24, Y
    3e0e:	cc 59       	subi	r28, 0x9C	; 156
    3e10:	d0 40       	sbci	r29, 0x00	; 0
    3e12:	88 23       	and	r24, r24
    3e14:	31 f5       	brne	.+76     	; 0x3e62 <main+0x1be>
    3e16:	c3 56       	subi	r28, 0x63	; 99
    3e18:	df 4f       	sbci	r29, 0xFF	; 255
    3e1a:	88 81       	ld	r24, Y
    3e1c:	cd 59       	subi	r28, 0x9D	; 157
    3e1e:	d0 40       	sbci	r29, 0x00	; 0
    3e20:	88 23       	and	r24, r24
    3e22:	f9 f4       	brne	.+62     	; 0x3e62 <main+0x1be>
    3e24:	c2 56       	subi	r28, 0x62	; 98
    3e26:	df 4f       	sbci	r29, 0xFF	; 255
    3e28:	88 81       	ld	r24, Y
    3e2a:	ce 59       	subi	r28, 0x9E	; 158
    3e2c:	d0 40       	sbci	r29, 0x00	; 0
    3e2e:	88 23       	and	r24, r24
    3e30:	c1 f4       	brne	.+48     	; 0x3e62 <main+0x1be>
    3e32:	c1 56       	subi	r28, 0x61	; 97
    3e34:	df 4f       	sbci	r29, 0xFF	; 255
    3e36:	88 81       	ld	r24, Y
    3e38:	cf 59       	subi	r28, 0x9F	; 159
    3e3a:	d0 40       	sbci	r29, 0x00	; 0
    3e3c:	88 23       	and	r24, r24
    3e3e:	89 f4       	brne	.+34     	; 0x3e62 <main+0x1be>
    3e40:	c0 56       	subi	r28, 0x60	; 96
    3e42:	df 4f       	sbci	r29, 0xFF	; 255
    3e44:	88 81       	ld	r24, Y
    3e46:	c0 5a       	subi	r28, 0xA0	; 160
    3e48:	d0 40       	sbci	r29, 0x00	; 0
    3e4a:	88 23       	and	r24, r24
    3e4c:	51 f4       	brne	.+20     	; 0x3e62 <main+0x1be>
    3e4e:	80 91 8e 00 	lds	r24, 0x008E
    3e52:	81 30       	cpi	r24, 0x01	; 1
    3e54:	31 f4       	brne	.+12     	; 0x3e62 <main+0x1be>
       {
           GPIO_WritePin(PORTA_ID,PIN0_ID,LOGIC_HIGH);
    3e56:	80 e0       	ldi	r24, 0x00	; 0
    3e58:	60 e0       	ldi	r22, 0x00	; 0
    3e5a:	41 e0       	ldi	r20, 0x01	; 1
    3e5c:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    3e60:	79 c0       	rjmp	.+242    	; 0x3f54 <main+0x2b0>
       }
       else if( (IR_signal_buffer == IR_CMD_1) && (IR_press_state == StillPress_IR) )
    3e62:	80 91 86 00 	lds	r24, 0x0086
    3e66:	cf 56       	subi	r28, 0x6F	; 111
    3e68:	df 4f       	sbci	r29, 0xFF	; 255
    3e6a:	88 83       	st	Y, r24
    3e6c:	c1 59       	subi	r28, 0x91	; 145
    3e6e:	d0 40       	sbci	r29, 0x00	; 0
    3e70:	80 91 87 00 	lds	r24, 0x0087
    3e74:	ce 56       	subi	r28, 0x6E	; 110
    3e76:	df 4f       	sbci	r29, 0xFF	; 255
    3e78:	88 83       	st	Y, r24
    3e7a:	c2 59       	subi	r28, 0x92	; 146
    3e7c:	d0 40       	sbci	r29, 0x00	; 0
    3e7e:	80 91 88 00 	lds	r24, 0x0088
    3e82:	cd 56       	subi	r28, 0x6D	; 109
    3e84:	df 4f       	sbci	r29, 0xFF	; 255
    3e86:	88 83       	st	Y, r24
    3e88:	c3 59       	subi	r28, 0x93	; 147
    3e8a:	d0 40       	sbci	r29, 0x00	; 0
    3e8c:	80 91 89 00 	lds	r24, 0x0089
    3e90:	cc 56       	subi	r28, 0x6C	; 108
    3e92:	df 4f       	sbci	r29, 0xFF	; 255
    3e94:	88 83       	st	Y, r24
    3e96:	c4 59       	subi	r28, 0x94	; 148
    3e98:	d0 40       	sbci	r29, 0x00	; 0
    3e9a:	80 91 8a 00 	lds	r24, 0x008A
    3e9e:	cb 56       	subi	r28, 0x6B	; 107
    3ea0:	df 4f       	sbci	r29, 0xFF	; 255
    3ea2:	88 83       	st	Y, r24
    3ea4:	c5 59       	subi	r28, 0x95	; 149
    3ea6:	d0 40       	sbci	r29, 0x00	; 0
    3ea8:	80 91 8b 00 	lds	r24, 0x008B
    3eac:	ca 56       	subi	r28, 0x6A	; 106
    3eae:	df 4f       	sbci	r29, 0xFF	; 255
    3eb0:	88 83       	st	Y, r24
    3eb2:	c6 59       	subi	r28, 0x96	; 150
    3eb4:	d0 40       	sbci	r29, 0x00	; 0
    3eb6:	80 91 8c 00 	lds	r24, 0x008C
    3eba:	c9 56       	subi	r28, 0x69	; 105
    3ebc:	df 4f       	sbci	r29, 0xFF	; 255
    3ebe:	88 83       	st	Y, r24
    3ec0:	c7 59       	subi	r28, 0x97	; 151
    3ec2:	d0 40       	sbci	r29, 0x00	; 0
    3ec4:	80 91 8d 00 	lds	r24, 0x008D
    3ec8:	c8 56       	subi	r28, 0x68	; 104
    3eca:	df 4f       	sbci	r29, 0xFF	; 255
    3ecc:	88 83       	st	Y, r24
    3ece:	c8 59       	subi	r28, 0x98	; 152
    3ed0:	d0 40       	sbci	r29, 0x00	; 0
    3ed2:	cf 56       	subi	r28, 0x6F	; 111
    3ed4:	df 4f       	sbci	r29, 0xFF	; 255
    3ed6:	88 81       	ld	r24, Y
    3ed8:	c1 59       	subi	r28, 0x91	; 145
    3eda:	d0 40       	sbci	r29, 0x00	; 0
    3edc:	8d 35       	cpi	r24, 0x5D	; 93
    3ede:	d1 f5       	brne	.+116    	; 0x3f54 <main+0x2b0>
    3ee0:	ce 56       	subi	r28, 0x6E	; 110
    3ee2:	df 4f       	sbci	r29, 0xFF	; 255
    3ee4:	88 81       	ld	r24, Y
    3ee6:	c2 59       	subi	r28, 0x92	; 146
    3ee8:	d0 40       	sbci	r29, 0x00	; 0
    3eea:	82 3a       	cpi	r24, 0xA2	; 162
    3eec:	99 f5       	brne	.+102    	; 0x3f54 <main+0x2b0>
    3eee:	cd 56       	subi	r28, 0x6D	; 109
    3ef0:	df 4f       	sbci	r29, 0xFF	; 255
    3ef2:	88 81       	ld	r24, Y
    3ef4:	c3 59       	subi	r28, 0x93	; 147
    3ef6:	d0 40       	sbci	r29, 0x00	; 0
    3ef8:	8f 3f       	cpi	r24, 0xFF	; 255
    3efa:	61 f5       	brne	.+88     	; 0x3f54 <main+0x2b0>
    3efc:	cc 56       	subi	r28, 0x6C	; 108
    3efe:	df 4f       	sbci	r29, 0xFF	; 255
    3f00:	88 81       	ld	r24, Y
    3f02:	c4 59       	subi	r28, 0x94	; 148
    3f04:	d0 40       	sbci	r29, 0x00	; 0
    3f06:	88 23       	and	r24, r24
    3f08:	29 f5       	brne	.+74     	; 0x3f54 <main+0x2b0>
    3f0a:	cb 56       	subi	r28, 0x6B	; 107
    3f0c:	df 4f       	sbci	r29, 0xFF	; 255
    3f0e:	88 81       	ld	r24, Y
    3f10:	c5 59       	subi	r28, 0x95	; 149
    3f12:	d0 40       	sbci	r29, 0x00	; 0
    3f14:	88 23       	and	r24, r24
    3f16:	f1 f4       	brne	.+60     	; 0x3f54 <main+0x2b0>
    3f18:	ca 56       	subi	r28, 0x6A	; 106
    3f1a:	df 4f       	sbci	r29, 0xFF	; 255
    3f1c:	88 81       	ld	r24, Y
    3f1e:	c6 59       	subi	r28, 0x96	; 150
    3f20:	d0 40       	sbci	r29, 0x00	; 0
    3f22:	88 23       	and	r24, r24
    3f24:	b9 f4       	brne	.+46     	; 0x3f54 <main+0x2b0>
    3f26:	c9 56       	subi	r28, 0x69	; 105
    3f28:	df 4f       	sbci	r29, 0xFF	; 255
    3f2a:	88 81       	ld	r24, Y
    3f2c:	c7 59       	subi	r28, 0x97	; 151
    3f2e:	d0 40       	sbci	r29, 0x00	; 0
    3f30:	88 23       	and	r24, r24
    3f32:	81 f4       	brne	.+32     	; 0x3f54 <main+0x2b0>
    3f34:	c8 56       	subi	r28, 0x68	; 104
    3f36:	df 4f       	sbci	r29, 0xFF	; 255
    3f38:	88 81       	ld	r24, Y
    3f3a:	c8 59       	subi	r28, 0x98	; 152
    3f3c:	d0 40       	sbci	r29, 0x00	; 0
    3f3e:	88 23       	and	r24, r24
    3f40:	49 f4       	brne	.+18     	; 0x3f54 <main+0x2b0>
    3f42:	80 91 8e 00 	lds	r24, 0x008E
    3f46:	82 30       	cpi	r24, 0x02	; 2
    3f48:	29 f4       	brne	.+10     	; 0x3f54 <main+0x2b0>
       {
           GPIO_WritePin(PORTA_ID,PIN0_ID,LOGIC_LOW);
    3f4a:	80 e0       	ldi	r24, 0x00	; 0
    3f4c:	60 e0       	ldi	r22, 0x00	; 0
    3f4e:	40 e0       	ldi	r20, 0x00	; 0
    3f50:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
       }

       if( (IR_signal_buffer == IR_CMD_2) && (IR_press_state == NewPress_IR) )
    3f54:	80 91 86 00 	lds	r24, 0x0086
    3f58:	c7 57       	subi	r28, 0x77	; 119
    3f5a:	df 4f       	sbci	r29, 0xFF	; 255
    3f5c:	88 83       	st	Y, r24
    3f5e:	c9 58       	subi	r28, 0x89	; 137
    3f60:	d0 40       	sbci	r29, 0x00	; 0
    3f62:	80 91 87 00 	lds	r24, 0x0087
    3f66:	c6 57       	subi	r28, 0x76	; 118
    3f68:	df 4f       	sbci	r29, 0xFF	; 255
    3f6a:	88 83       	st	Y, r24
    3f6c:	ca 58       	subi	r28, 0x8A	; 138
    3f6e:	d0 40       	sbci	r29, 0x00	; 0
    3f70:	80 91 88 00 	lds	r24, 0x0088
    3f74:	c5 57       	subi	r28, 0x75	; 117
    3f76:	df 4f       	sbci	r29, 0xFF	; 255
    3f78:	88 83       	st	Y, r24
    3f7a:	cb 58       	subi	r28, 0x8B	; 139
    3f7c:	d0 40       	sbci	r29, 0x00	; 0
    3f7e:	80 91 89 00 	lds	r24, 0x0089
    3f82:	c4 57       	subi	r28, 0x74	; 116
    3f84:	df 4f       	sbci	r29, 0xFF	; 255
    3f86:	88 83       	st	Y, r24
    3f88:	cc 58       	subi	r28, 0x8C	; 140
    3f8a:	d0 40       	sbci	r29, 0x00	; 0
    3f8c:	80 91 8a 00 	lds	r24, 0x008A
    3f90:	c3 57       	subi	r28, 0x73	; 115
    3f92:	df 4f       	sbci	r29, 0xFF	; 255
    3f94:	88 83       	st	Y, r24
    3f96:	cd 58       	subi	r28, 0x8D	; 141
    3f98:	d0 40       	sbci	r29, 0x00	; 0
    3f9a:	80 91 8b 00 	lds	r24, 0x008B
    3f9e:	c2 57       	subi	r28, 0x72	; 114
    3fa0:	df 4f       	sbci	r29, 0xFF	; 255
    3fa2:	88 83       	st	Y, r24
    3fa4:	ce 58       	subi	r28, 0x8E	; 142
    3fa6:	d0 40       	sbci	r29, 0x00	; 0
    3fa8:	80 91 8c 00 	lds	r24, 0x008C
    3fac:	c1 57       	subi	r28, 0x71	; 113
    3fae:	df 4f       	sbci	r29, 0xFF	; 255
    3fb0:	88 83       	st	Y, r24
    3fb2:	cf 58       	subi	r28, 0x8F	; 143
    3fb4:	d0 40       	sbci	r29, 0x00	; 0
    3fb6:	80 91 8d 00 	lds	r24, 0x008D
    3fba:	c0 57       	subi	r28, 0x70	; 112
    3fbc:	df 4f       	sbci	r29, 0xFF	; 255
    3fbe:	88 83       	st	Y, r24
    3fc0:	c0 59       	subi	r28, 0x90	; 144
    3fc2:	d0 40       	sbci	r29, 0x00	; 0
    3fc4:	c7 57       	subi	r28, 0x77	; 119
    3fc6:	df 4f       	sbci	r29, 0xFF	; 255
    3fc8:	88 81       	ld	r24, Y
    3fca:	c9 58       	subi	r28, 0x89	; 137
    3fcc:	d0 40       	sbci	r29, 0x00	; 0
    3fce:	8d 39       	cpi	r24, 0x9D	; 157
    3fd0:	d9 f5       	brne	.+118    	; 0x4048 <main+0x3a4>
    3fd2:	c6 57       	subi	r28, 0x76	; 118
    3fd4:	df 4f       	sbci	r29, 0xFF	; 255
    3fd6:	88 81       	ld	r24, Y
    3fd8:	ca 58       	subi	r28, 0x8A	; 138
    3fda:	d0 40       	sbci	r29, 0x00	; 0
    3fdc:	82 36       	cpi	r24, 0x62	; 98
    3fde:	a1 f5       	brne	.+104    	; 0x4048 <main+0x3a4>
    3fe0:	c5 57       	subi	r28, 0x75	; 117
    3fe2:	df 4f       	sbci	r29, 0xFF	; 255
    3fe4:	88 81       	ld	r24, Y
    3fe6:	cb 58       	subi	r28, 0x8B	; 139
    3fe8:	d0 40       	sbci	r29, 0x00	; 0
    3fea:	8f 3f       	cpi	r24, 0xFF	; 255
    3fec:	69 f5       	brne	.+90     	; 0x4048 <main+0x3a4>
    3fee:	c4 57       	subi	r28, 0x74	; 116
    3ff0:	df 4f       	sbci	r29, 0xFF	; 255
    3ff2:	88 81       	ld	r24, Y
    3ff4:	cc 58       	subi	r28, 0x8C	; 140
    3ff6:	d0 40       	sbci	r29, 0x00	; 0
    3ff8:	88 23       	and	r24, r24
    3ffa:	31 f5       	brne	.+76     	; 0x4048 <main+0x3a4>
    3ffc:	c3 57       	subi	r28, 0x73	; 115
    3ffe:	df 4f       	sbci	r29, 0xFF	; 255
    4000:	88 81       	ld	r24, Y
    4002:	cd 58       	subi	r28, 0x8D	; 141
    4004:	d0 40       	sbci	r29, 0x00	; 0
    4006:	88 23       	and	r24, r24
    4008:	f9 f4       	brne	.+62     	; 0x4048 <main+0x3a4>
    400a:	c2 57       	subi	r28, 0x72	; 114
    400c:	df 4f       	sbci	r29, 0xFF	; 255
    400e:	88 81       	ld	r24, Y
    4010:	ce 58       	subi	r28, 0x8E	; 142
    4012:	d0 40       	sbci	r29, 0x00	; 0
    4014:	88 23       	and	r24, r24
    4016:	c1 f4       	brne	.+48     	; 0x4048 <main+0x3a4>
    4018:	c1 57       	subi	r28, 0x71	; 113
    401a:	df 4f       	sbci	r29, 0xFF	; 255
    401c:	88 81       	ld	r24, Y
    401e:	cf 58       	subi	r28, 0x8F	; 143
    4020:	d0 40       	sbci	r29, 0x00	; 0
    4022:	88 23       	and	r24, r24
    4024:	89 f4       	brne	.+34     	; 0x4048 <main+0x3a4>
    4026:	c0 57       	subi	r28, 0x70	; 112
    4028:	df 4f       	sbci	r29, 0xFF	; 255
    402a:	88 81       	ld	r24, Y
    402c:	c0 59       	subi	r28, 0x90	; 144
    402e:	d0 40       	sbci	r29, 0x00	; 0
    4030:	88 23       	and	r24, r24
    4032:	51 f4       	brne	.+20     	; 0x4048 <main+0x3a4>
    4034:	80 91 8e 00 	lds	r24, 0x008E
    4038:	81 30       	cpi	r24, 0x01	; 1
    403a:	31 f4       	brne	.+12     	; 0x4048 <main+0x3a4>
       {
           GPIO_WritePin(PORTA_ID,PIN1_ID,LOGIC_HIGH);
    403c:	80 e0       	ldi	r24, 0x00	; 0
    403e:	61 e0       	ldi	r22, 0x01	; 1
    4040:	41 e0       	ldi	r20, 0x01	; 1
    4042:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    4046:	79 c0       	rjmp	.+242    	; 0x413a <main+0x496>
       }
       else if( (IR_signal_buffer == IR_CMD_2) && (IR_press_state == StillPress_IR) )
    4048:	80 91 86 00 	lds	r24, 0x0086
    404c:	cf 57       	subi	r28, 0x7F	; 127
    404e:	df 4f       	sbci	r29, 0xFF	; 255
    4050:	88 83       	st	Y, r24
    4052:	c1 58       	subi	r28, 0x81	; 129
    4054:	d0 40       	sbci	r29, 0x00	; 0
    4056:	80 91 87 00 	lds	r24, 0x0087
    405a:	ce 57       	subi	r28, 0x7E	; 126
    405c:	df 4f       	sbci	r29, 0xFF	; 255
    405e:	88 83       	st	Y, r24
    4060:	c2 58       	subi	r28, 0x82	; 130
    4062:	d0 40       	sbci	r29, 0x00	; 0
    4064:	80 91 88 00 	lds	r24, 0x0088
    4068:	cd 57       	subi	r28, 0x7D	; 125
    406a:	df 4f       	sbci	r29, 0xFF	; 255
    406c:	88 83       	st	Y, r24
    406e:	c3 58       	subi	r28, 0x83	; 131
    4070:	d0 40       	sbci	r29, 0x00	; 0
    4072:	80 91 89 00 	lds	r24, 0x0089
    4076:	cc 57       	subi	r28, 0x7C	; 124
    4078:	df 4f       	sbci	r29, 0xFF	; 255
    407a:	88 83       	st	Y, r24
    407c:	c4 58       	subi	r28, 0x84	; 132
    407e:	d0 40       	sbci	r29, 0x00	; 0
    4080:	80 91 8a 00 	lds	r24, 0x008A
    4084:	cb 57       	subi	r28, 0x7B	; 123
    4086:	df 4f       	sbci	r29, 0xFF	; 255
    4088:	88 83       	st	Y, r24
    408a:	c5 58       	subi	r28, 0x85	; 133
    408c:	d0 40       	sbci	r29, 0x00	; 0
    408e:	80 91 8b 00 	lds	r24, 0x008B
    4092:	ca 57       	subi	r28, 0x7A	; 122
    4094:	df 4f       	sbci	r29, 0xFF	; 255
    4096:	88 83       	st	Y, r24
    4098:	c6 58       	subi	r28, 0x86	; 134
    409a:	d0 40       	sbci	r29, 0x00	; 0
    409c:	80 91 8c 00 	lds	r24, 0x008C
    40a0:	c9 57       	subi	r28, 0x79	; 121
    40a2:	df 4f       	sbci	r29, 0xFF	; 255
    40a4:	88 83       	st	Y, r24
    40a6:	c7 58       	subi	r28, 0x87	; 135
    40a8:	d0 40       	sbci	r29, 0x00	; 0
    40aa:	80 91 8d 00 	lds	r24, 0x008D
    40ae:	c8 57       	subi	r28, 0x78	; 120
    40b0:	df 4f       	sbci	r29, 0xFF	; 255
    40b2:	88 83       	st	Y, r24
    40b4:	c8 58       	subi	r28, 0x88	; 136
    40b6:	d0 40       	sbci	r29, 0x00	; 0
    40b8:	cf 57       	subi	r28, 0x7F	; 127
    40ba:	df 4f       	sbci	r29, 0xFF	; 255
    40bc:	88 81       	ld	r24, Y
    40be:	c1 58       	subi	r28, 0x81	; 129
    40c0:	d0 40       	sbci	r29, 0x00	; 0
    40c2:	8d 39       	cpi	r24, 0x9D	; 157
    40c4:	d1 f5       	brne	.+116    	; 0x413a <main+0x496>
    40c6:	ce 57       	subi	r28, 0x7E	; 126
    40c8:	df 4f       	sbci	r29, 0xFF	; 255
    40ca:	88 81       	ld	r24, Y
    40cc:	c2 58       	subi	r28, 0x82	; 130
    40ce:	d0 40       	sbci	r29, 0x00	; 0
    40d0:	82 36       	cpi	r24, 0x62	; 98
    40d2:	99 f5       	brne	.+102    	; 0x413a <main+0x496>
    40d4:	cd 57       	subi	r28, 0x7D	; 125
    40d6:	df 4f       	sbci	r29, 0xFF	; 255
    40d8:	88 81       	ld	r24, Y
    40da:	c3 58       	subi	r28, 0x83	; 131
    40dc:	d0 40       	sbci	r29, 0x00	; 0
    40de:	8f 3f       	cpi	r24, 0xFF	; 255
    40e0:	61 f5       	brne	.+88     	; 0x413a <main+0x496>
    40e2:	cc 57       	subi	r28, 0x7C	; 124
    40e4:	df 4f       	sbci	r29, 0xFF	; 255
    40e6:	88 81       	ld	r24, Y
    40e8:	c4 58       	subi	r28, 0x84	; 132
    40ea:	d0 40       	sbci	r29, 0x00	; 0
    40ec:	88 23       	and	r24, r24
    40ee:	29 f5       	brne	.+74     	; 0x413a <main+0x496>
    40f0:	cb 57       	subi	r28, 0x7B	; 123
    40f2:	df 4f       	sbci	r29, 0xFF	; 255
    40f4:	88 81       	ld	r24, Y
    40f6:	c5 58       	subi	r28, 0x85	; 133
    40f8:	d0 40       	sbci	r29, 0x00	; 0
    40fa:	88 23       	and	r24, r24
    40fc:	f1 f4       	brne	.+60     	; 0x413a <main+0x496>
    40fe:	ca 57       	subi	r28, 0x7A	; 122
    4100:	df 4f       	sbci	r29, 0xFF	; 255
    4102:	88 81       	ld	r24, Y
    4104:	c6 58       	subi	r28, 0x86	; 134
    4106:	d0 40       	sbci	r29, 0x00	; 0
    4108:	88 23       	and	r24, r24
    410a:	b9 f4       	brne	.+46     	; 0x413a <main+0x496>
    410c:	c9 57       	subi	r28, 0x79	; 121
    410e:	df 4f       	sbci	r29, 0xFF	; 255
    4110:	88 81       	ld	r24, Y
    4112:	c7 58       	subi	r28, 0x87	; 135
    4114:	d0 40       	sbci	r29, 0x00	; 0
    4116:	88 23       	and	r24, r24
    4118:	81 f4       	brne	.+32     	; 0x413a <main+0x496>
    411a:	c8 57       	subi	r28, 0x78	; 120
    411c:	df 4f       	sbci	r29, 0xFF	; 255
    411e:	88 81       	ld	r24, Y
    4120:	c8 58       	subi	r28, 0x88	; 136
    4122:	d0 40       	sbci	r29, 0x00	; 0
    4124:	88 23       	and	r24, r24
    4126:	49 f4       	brne	.+18     	; 0x413a <main+0x496>
    4128:	80 91 8e 00 	lds	r24, 0x008E
    412c:	82 30       	cpi	r24, 0x02	; 2
    412e:	29 f4       	brne	.+10     	; 0x413a <main+0x496>
       {
           GPIO_WritePin(PORTA_ID,PIN1_ID,LOGIC_LOW);
    4130:	80 e0       	ldi	r24, 0x00	; 0
    4132:	61 e0       	ldi	r22, 0x01	; 1
    4134:	40 e0       	ldi	r20, 0x00	; 0
    4136:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
       }

       if( (IR_signal_buffer == IR_CMD_3) && (IR_press_state == NewPress_IR) )
    413a:	80 91 86 00 	lds	r24, 0x0086
    413e:	ea 96       	adiw	r28, 0x3a	; 58
    4140:	8f af       	std	Y+63, r24	; 0x3f
    4142:	ea 97       	sbiw	r28, 0x3a	; 58
    4144:	80 91 87 00 	lds	r24, 0x0087
    4148:	eb 96       	adiw	r28, 0x3b	; 59
    414a:	8f af       	std	Y+63, r24	; 0x3f
    414c:	eb 97       	sbiw	r28, 0x3b	; 59
    414e:	80 91 88 00 	lds	r24, 0x0088
    4152:	ec 96       	adiw	r28, 0x3c	; 60
    4154:	8f af       	std	Y+63, r24	; 0x3f
    4156:	ec 97       	sbiw	r28, 0x3c	; 60
    4158:	80 91 89 00 	lds	r24, 0x0089
    415c:	ed 96       	adiw	r28, 0x3d	; 61
    415e:	8f af       	std	Y+63, r24	; 0x3f
    4160:	ed 97       	sbiw	r28, 0x3d	; 61
    4162:	80 91 8a 00 	lds	r24, 0x008A
    4166:	ee 96       	adiw	r28, 0x3e	; 62
    4168:	8f af       	std	Y+63, r24	; 0x3f
    416a:	ee 97       	sbiw	r28, 0x3e	; 62
    416c:	80 91 8b 00 	lds	r24, 0x008B
    4170:	ef 96       	adiw	r28, 0x3f	; 63
    4172:	8f af       	std	Y+63, r24	; 0x3f
    4174:	ef 97       	sbiw	r28, 0x3f	; 63
    4176:	80 91 8c 00 	lds	r24, 0x008C
    417a:	c1 58       	subi	r28, 0x81	; 129
    417c:	df 4f       	sbci	r29, 0xFF	; 255
    417e:	88 83       	st	Y, r24
    4180:	cf 57       	subi	r28, 0x7F	; 127
    4182:	d0 40       	sbci	r29, 0x00	; 0
    4184:	80 91 8d 00 	lds	r24, 0x008D
    4188:	c0 58       	subi	r28, 0x80	; 128
    418a:	df 4f       	sbci	r29, 0xFF	; 255
    418c:	88 83       	st	Y, r24
    418e:	c0 58       	subi	r28, 0x80	; 128
    4190:	d0 40       	sbci	r29, 0x00	; 0
    4192:	ea 96       	adiw	r28, 0x3a	; 58
    4194:	8f ad       	ldd	r24, Y+63	; 0x3f
    4196:	ea 97       	sbiw	r28, 0x3a	; 58
    4198:	8d 31       	cpi	r24, 0x1D	; 29
    419a:	89 f5       	brne	.+98     	; 0x41fe <main+0x55a>
    419c:	eb 96       	adiw	r28, 0x3b	; 59
    419e:	8f ad       	ldd	r24, Y+63	; 0x3f
    41a0:	eb 97       	sbiw	r28, 0x3b	; 59
    41a2:	82 3e       	cpi	r24, 0xE2	; 226
    41a4:	61 f5       	brne	.+88     	; 0x41fe <main+0x55a>
    41a6:	ec 96       	adiw	r28, 0x3c	; 60
    41a8:	8f ad       	ldd	r24, Y+63	; 0x3f
    41aa:	ec 97       	sbiw	r28, 0x3c	; 60
    41ac:	8f 3f       	cpi	r24, 0xFF	; 255
    41ae:	39 f5       	brne	.+78     	; 0x41fe <main+0x55a>
    41b0:	ed 96       	adiw	r28, 0x3d	; 61
    41b2:	8f ad       	ldd	r24, Y+63	; 0x3f
    41b4:	ed 97       	sbiw	r28, 0x3d	; 61
    41b6:	88 23       	and	r24, r24
    41b8:	11 f5       	brne	.+68     	; 0x41fe <main+0x55a>
    41ba:	ee 96       	adiw	r28, 0x3e	; 62
    41bc:	8f ad       	ldd	r24, Y+63	; 0x3f
    41be:	ee 97       	sbiw	r28, 0x3e	; 62
    41c0:	88 23       	and	r24, r24
    41c2:	e9 f4       	brne	.+58     	; 0x41fe <main+0x55a>
    41c4:	ef 96       	adiw	r28, 0x3f	; 63
    41c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    41c8:	ef 97       	sbiw	r28, 0x3f	; 63
    41ca:	88 23       	and	r24, r24
    41cc:	c1 f4       	brne	.+48     	; 0x41fe <main+0x55a>
    41ce:	c1 58       	subi	r28, 0x81	; 129
    41d0:	df 4f       	sbci	r29, 0xFF	; 255
    41d2:	88 81       	ld	r24, Y
    41d4:	cf 57       	subi	r28, 0x7F	; 127
    41d6:	d0 40       	sbci	r29, 0x00	; 0
    41d8:	88 23       	and	r24, r24
    41da:	89 f4       	brne	.+34     	; 0x41fe <main+0x55a>
    41dc:	c0 58       	subi	r28, 0x80	; 128
    41de:	df 4f       	sbci	r29, 0xFF	; 255
    41e0:	88 81       	ld	r24, Y
    41e2:	c0 58       	subi	r28, 0x80	; 128
    41e4:	d0 40       	sbci	r29, 0x00	; 0
    41e6:	88 23       	and	r24, r24
    41e8:	51 f4       	brne	.+20     	; 0x41fe <main+0x55a>
    41ea:	80 91 8e 00 	lds	r24, 0x008E
    41ee:	81 30       	cpi	r24, 0x01	; 1
    41f0:	31 f4       	brne	.+12     	; 0x41fe <main+0x55a>
       {
           GPIO_WritePin(PORTA_ID,PIN2_ID,LOGIC_HIGH);
    41f2:	80 e0       	ldi	r24, 0x00	; 0
    41f4:	62 e0       	ldi	r22, 0x02	; 2
    41f6:	41 e0       	ldi	r20, 0x01	; 1
    41f8:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    41fc:	59 c0       	rjmp	.+178    	; 0x42b0 <main+0x60c>
       }
       else if( (IR_signal_buffer == IR_CMD_3) && (IR_press_state == StillPress_IR) )
    41fe:	80 91 86 00 	lds	r24, 0x0086
    4202:	e2 96       	adiw	r28, 0x32	; 50
    4204:	8f af       	std	Y+63, r24	; 0x3f
    4206:	e2 97       	sbiw	r28, 0x32	; 50
    4208:	80 91 87 00 	lds	r24, 0x0087
    420c:	e3 96       	adiw	r28, 0x33	; 51
    420e:	8f af       	std	Y+63, r24	; 0x3f
    4210:	e3 97       	sbiw	r28, 0x33	; 51
    4212:	80 91 88 00 	lds	r24, 0x0088
    4216:	e4 96       	adiw	r28, 0x34	; 52
    4218:	8f af       	std	Y+63, r24	; 0x3f
    421a:	e4 97       	sbiw	r28, 0x34	; 52
    421c:	80 91 89 00 	lds	r24, 0x0089
    4220:	e5 96       	adiw	r28, 0x35	; 53
    4222:	8f af       	std	Y+63, r24	; 0x3f
    4224:	e5 97       	sbiw	r28, 0x35	; 53
    4226:	80 91 8a 00 	lds	r24, 0x008A
    422a:	e6 96       	adiw	r28, 0x36	; 54
    422c:	8f af       	std	Y+63, r24	; 0x3f
    422e:	e6 97       	sbiw	r28, 0x36	; 54
    4230:	80 91 8b 00 	lds	r24, 0x008B
    4234:	e7 96       	adiw	r28, 0x37	; 55
    4236:	8f af       	std	Y+63, r24	; 0x3f
    4238:	e7 97       	sbiw	r28, 0x37	; 55
    423a:	80 91 8c 00 	lds	r24, 0x008C
    423e:	e8 96       	adiw	r28, 0x38	; 56
    4240:	8f af       	std	Y+63, r24	; 0x3f
    4242:	e8 97       	sbiw	r28, 0x38	; 56
    4244:	80 91 8d 00 	lds	r24, 0x008D
    4248:	e9 96       	adiw	r28, 0x39	; 57
    424a:	8f af       	std	Y+63, r24	; 0x3f
    424c:	e9 97       	sbiw	r28, 0x39	; 57
    424e:	e2 96       	adiw	r28, 0x32	; 50
    4250:	8f ad       	ldd	r24, Y+63	; 0x3f
    4252:	e2 97       	sbiw	r28, 0x32	; 50
    4254:	8d 31       	cpi	r24, 0x1D	; 29
    4256:	61 f5       	brne	.+88     	; 0x42b0 <main+0x60c>
    4258:	e3 96       	adiw	r28, 0x33	; 51
    425a:	8f ad       	ldd	r24, Y+63	; 0x3f
    425c:	e3 97       	sbiw	r28, 0x33	; 51
    425e:	82 3e       	cpi	r24, 0xE2	; 226
    4260:	39 f5       	brne	.+78     	; 0x42b0 <main+0x60c>
    4262:	e4 96       	adiw	r28, 0x34	; 52
    4264:	8f ad       	ldd	r24, Y+63	; 0x3f
    4266:	e4 97       	sbiw	r28, 0x34	; 52
    4268:	8f 3f       	cpi	r24, 0xFF	; 255
    426a:	11 f5       	brne	.+68     	; 0x42b0 <main+0x60c>
    426c:	e5 96       	adiw	r28, 0x35	; 53
    426e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4270:	e5 97       	sbiw	r28, 0x35	; 53
    4272:	88 23       	and	r24, r24
    4274:	e9 f4       	brne	.+58     	; 0x42b0 <main+0x60c>
    4276:	e6 96       	adiw	r28, 0x36	; 54
    4278:	8f ad       	ldd	r24, Y+63	; 0x3f
    427a:	e6 97       	sbiw	r28, 0x36	; 54
    427c:	88 23       	and	r24, r24
    427e:	c1 f4       	brne	.+48     	; 0x42b0 <main+0x60c>
    4280:	e7 96       	adiw	r28, 0x37	; 55
    4282:	8f ad       	ldd	r24, Y+63	; 0x3f
    4284:	e7 97       	sbiw	r28, 0x37	; 55
    4286:	88 23       	and	r24, r24
    4288:	99 f4       	brne	.+38     	; 0x42b0 <main+0x60c>
    428a:	e8 96       	adiw	r28, 0x38	; 56
    428c:	8f ad       	ldd	r24, Y+63	; 0x3f
    428e:	e8 97       	sbiw	r28, 0x38	; 56
    4290:	88 23       	and	r24, r24
    4292:	71 f4       	brne	.+28     	; 0x42b0 <main+0x60c>
    4294:	e9 96       	adiw	r28, 0x39	; 57
    4296:	8f ad       	ldd	r24, Y+63	; 0x3f
    4298:	e9 97       	sbiw	r28, 0x39	; 57
    429a:	88 23       	and	r24, r24
    429c:	49 f4       	brne	.+18     	; 0x42b0 <main+0x60c>
    429e:	80 91 8e 00 	lds	r24, 0x008E
    42a2:	82 30       	cpi	r24, 0x02	; 2
    42a4:	29 f4       	brne	.+10     	; 0x42b0 <main+0x60c>
       {
           GPIO_WritePin(PORTA_ID,PIN2_ID,LOGIC_LOW);
    42a6:	80 e0       	ldi	r24, 0x00	; 0
    42a8:	62 e0       	ldi	r22, 0x02	; 2
    42aa:	40 e0       	ldi	r20, 0x00	; 0
    42ac:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
       }

       if( (IR_signal_buffer == IR_CMD_4) && (IR_press_state == NewPress_IR) )
    42b0:	80 91 86 00 	lds	r24, 0x0086
    42b4:	aa 96       	adiw	r28, 0x2a	; 42
    42b6:	8f af       	std	Y+63, r24	; 0x3f
    42b8:	aa 97       	sbiw	r28, 0x2a	; 42
    42ba:	80 91 87 00 	lds	r24, 0x0087
    42be:	ab 96       	adiw	r28, 0x2b	; 43
    42c0:	8f af       	std	Y+63, r24	; 0x3f
    42c2:	ab 97       	sbiw	r28, 0x2b	; 43
    42c4:	80 91 88 00 	lds	r24, 0x0088
    42c8:	ac 96       	adiw	r28, 0x2c	; 44
    42ca:	8f af       	std	Y+63, r24	; 0x3f
    42cc:	ac 97       	sbiw	r28, 0x2c	; 44
    42ce:	80 91 89 00 	lds	r24, 0x0089
    42d2:	ad 96       	adiw	r28, 0x2d	; 45
    42d4:	8f af       	std	Y+63, r24	; 0x3f
    42d6:	ad 97       	sbiw	r28, 0x2d	; 45
    42d8:	80 91 8a 00 	lds	r24, 0x008A
    42dc:	ae 96       	adiw	r28, 0x2e	; 46
    42de:	8f af       	std	Y+63, r24	; 0x3f
    42e0:	ae 97       	sbiw	r28, 0x2e	; 46
    42e2:	80 91 8b 00 	lds	r24, 0x008B
    42e6:	af 96       	adiw	r28, 0x2f	; 47
    42e8:	8f af       	std	Y+63, r24	; 0x3f
    42ea:	af 97       	sbiw	r28, 0x2f	; 47
    42ec:	80 91 8c 00 	lds	r24, 0x008C
    42f0:	e0 96       	adiw	r28, 0x30	; 48
    42f2:	8f af       	std	Y+63, r24	; 0x3f
    42f4:	e0 97       	sbiw	r28, 0x30	; 48
    42f6:	80 91 8d 00 	lds	r24, 0x008D
    42fa:	e1 96       	adiw	r28, 0x31	; 49
    42fc:	8f af       	std	Y+63, r24	; 0x3f
    42fe:	e1 97       	sbiw	r28, 0x31	; 49
    4300:	aa 96       	adiw	r28, 0x2a	; 42
    4302:	8f ad       	ldd	r24, Y+63	; 0x3f
    4304:	aa 97       	sbiw	r28, 0x2a	; 42
    4306:	8d 3d       	cpi	r24, 0xDD	; 221
    4308:	69 f5       	brne	.+90     	; 0x4364 <main+0x6c0>
    430a:	ab 96       	adiw	r28, 0x2b	; 43
    430c:	8f ad       	ldd	r24, Y+63	; 0x3f
    430e:	ab 97       	sbiw	r28, 0x2b	; 43
    4310:	82 32       	cpi	r24, 0x22	; 34
    4312:	41 f5       	brne	.+80     	; 0x4364 <main+0x6c0>
    4314:	ac 96       	adiw	r28, 0x2c	; 44
    4316:	8f ad       	ldd	r24, Y+63	; 0x3f
    4318:	ac 97       	sbiw	r28, 0x2c	; 44
    431a:	8f 3f       	cpi	r24, 0xFF	; 255
    431c:	19 f5       	brne	.+70     	; 0x4364 <main+0x6c0>
    431e:	ad 96       	adiw	r28, 0x2d	; 45
    4320:	8f ad       	ldd	r24, Y+63	; 0x3f
    4322:	ad 97       	sbiw	r28, 0x2d	; 45
    4324:	88 23       	and	r24, r24
    4326:	f1 f4       	brne	.+60     	; 0x4364 <main+0x6c0>
    4328:	ae 96       	adiw	r28, 0x2e	; 46
    432a:	8f ad       	ldd	r24, Y+63	; 0x3f
    432c:	ae 97       	sbiw	r28, 0x2e	; 46
    432e:	88 23       	and	r24, r24
    4330:	c9 f4       	brne	.+50     	; 0x4364 <main+0x6c0>
    4332:	af 96       	adiw	r28, 0x2f	; 47
    4334:	8f ad       	ldd	r24, Y+63	; 0x3f
    4336:	af 97       	sbiw	r28, 0x2f	; 47
    4338:	88 23       	and	r24, r24
    433a:	a1 f4       	brne	.+40     	; 0x4364 <main+0x6c0>
    433c:	e0 96       	adiw	r28, 0x30	; 48
    433e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4340:	e0 97       	sbiw	r28, 0x30	; 48
    4342:	88 23       	and	r24, r24
    4344:	79 f4       	brne	.+30     	; 0x4364 <main+0x6c0>
    4346:	e1 96       	adiw	r28, 0x31	; 49
    4348:	8f ad       	ldd	r24, Y+63	; 0x3f
    434a:	e1 97       	sbiw	r28, 0x31	; 49
    434c:	88 23       	and	r24, r24
    434e:	51 f4       	brne	.+20     	; 0x4364 <main+0x6c0>
    4350:	80 91 8e 00 	lds	r24, 0x008E
    4354:	81 30       	cpi	r24, 0x01	; 1
    4356:	31 f4       	brne	.+12     	; 0x4364 <main+0x6c0>
       {
           GPIO_WritePin(PORTA_ID,PIN3_ID,LOGIC_HIGH);
    4358:	80 e0       	ldi	r24, 0x00	; 0
    435a:	63 e0       	ldi	r22, 0x03	; 3
    435c:	41 e0       	ldi	r20, 0x01	; 1
    435e:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    4362:	59 c0       	rjmp	.+178    	; 0x4416 <main+0x772>
       }
       else if( (IR_signal_buffer == IR_CMD_4) && (IR_press_state == StillPress_IR) )
    4364:	80 91 86 00 	lds	r24, 0x0086
    4368:	a2 96       	adiw	r28, 0x22	; 34
    436a:	8f af       	std	Y+63, r24	; 0x3f
    436c:	a2 97       	sbiw	r28, 0x22	; 34
    436e:	80 91 87 00 	lds	r24, 0x0087
    4372:	a3 96       	adiw	r28, 0x23	; 35
    4374:	8f af       	std	Y+63, r24	; 0x3f
    4376:	a3 97       	sbiw	r28, 0x23	; 35
    4378:	80 91 88 00 	lds	r24, 0x0088
    437c:	a4 96       	adiw	r28, 0x24	; 36
    437e:	8f af       	std	Y+63, r24	; 0x3f
    4380:	a4 97       	sbiw	r28, 0x24	; 36
    4382:	80 91 89 00 	lds	r24, 0x0089
    4386:	a5 96       	adiw	r28, 0x25	; 37
    4388:	8f af       	std	Y+63, r24	; 0x3f
    438a:	a5 97       	sbiw	r28, 0x25	; 37
    438c:	80 91 8a 00 	lds	r24, 0x008A
    4390:	a6 96       	adiw	r28, 0x26	; 38
    4392:	8f af       	std	Y+63, r24	; 0x3f
    4394:	a6 97       	sbiw	r28, 0x26	; 38
    4396:	80 91 8b 00 	lds	r24, 0x008B
    439a:	a7 96       	adiw	r28, 0x27	; 39
    439c:	8f af       	std	Y+63, r24	; 0x3f
    439e:	a7 97       	sbiw	r28, 0x27	; 39
    43a0:	80 91 8c 00 	lds	r24, 0x008C
    43a4:	a8 96       	adiw	r28, 0x28	; 40
    43a6:	8f af       	std	Y+63, r24	; 0x3f
    43a8:	a8 97       	sbiw	r28, 0x28	; 40
    43aa:	80 91 8d 00 	lds	r24, 0x008D
    43ae:	a9 96       	adiw	r28, 0x29	; 41
    43b0:	8f af       	std	Y+63, r24	; 0x3f
    43b2:	a9 97       	sbiw	r28, 0x29	; 41
    43b4:	a2 96       	adiw	r28, 0x22	; 34
    43b6:	8f ad       	ldd	r24, Y+63	; 0x3f
    43b8:	a2 97       	sbiw	r28, 0x22	; 34
    43ba:	8d 3d       	cpi	r24, 0xDD	; 221
    43bc:	61 f5       	brne	.+88     	; 0x4416 <main+0x772>
    43be:	a3 96       	adiw	r28, 0x23	; 35
    43c0:	8f ad       	ldd	r24, Y+63	; 0x3f
    43c2:	a3 97       	sbiw	r28, 0x23	; 35
    43c4:	82 32       	cpi	r24, 0x22	; 34
    43c6:	39 f5       	brne	.+78     	; 0x4416 <main+0x772>
    43c8:	a4 96       	adiw	r28, 0x24	; 36
    43ca:	8f ad       	ldd	r24, Y+63	; 0x3f
    43cc:	a4 97       	sbiw	r28, 0x24	; 36
    43ce:	8f 3f       	cpi	r24, 0xFF	; 255
    43d0:	11 f5       	brne	.+68     	; 0x4416 <main+0x772>
    43d2:	a5 96       	adiw	r28, 0x25	; 37
    43d4:	8f ad       	ldd	r24, Y+63	; 0x3f
    43d6:	a5 97       	sbiw	r28, 0x25	; 37
    43d8:	88 23       	and	r24, r24
    43da:	e9 f4       	brne	.+58     	; 0x4416 <main+0x772>
    43dc:	a6 96       	adiw	r28, 0x26	; 38
    43de:	8f ad       	ldd	r24, Y+63	; 0x3f
    43e0:	a6 97       	sbiw	r28, 0x26	; 38
    43e2:	88 23       	and	r24, r24
    43e4:	c1 f4       	brne	.+48     	; 0x4416 <main+0x772>
    43e6:	a7 96       	adiw	r28, 0x27	; 39
    43e8:	8f ad       	ldd	r24, Y+63	; 0x3f
    43ea:	a7 97       	sbiw	r28, 0x27	; 39
    43ec:	88 23       	and	r24, r24
    43ee:	99 f4       	brne	.+38     	; 0x4416 <main+0x772>
    43f0:	a8 96       	adiw	r28, 0x28	; 40
    43f2:	8f ad       	ldd	r24, Y+63	; 0x3f
    43f4:	a8 97       	sbiw	r28, 0x28	; 40
    43f6:	88 23       	and	r24, r24
    43f8:	71 f4       	brne	.+28     	; 0x4416 <main+0x772>
    43fa:	a9 96       	adiw	r28, 0x29	; 41
    43fc:	8f ad       	ldd	r24, Y+63	; 0x3f
    43fe:	a9 97       	sbiw	r28, 0x29	; 41
    4400:	88 23       	and	r24, r24
    4402:	49 f4       	brne	.+18     	; 0x4416 <main+0x772>
    4404:	80 91 8e 00 	lds	r24, 0x008E
    4408:	82 30       	cpi	r24, 0x02	; 2
    440a:	29 f4       	brne	.+10     	; 0x4416 <main+0x772>
       {
           GPIO_WritePin(PORTA_ID,PIN3_ID,LOGIC_LOW);
    440c:	80 e0       	ldi	r24, 0x00	; 0
    440e:	63 e0       	ldi	r22, 0x03	; 3
    4410:	40 e0       	ldi	r20, 0x00	; 0
    4412:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
       }


       if( (IR_signal_buffer == IR_CMD_4) && (IR_press_state == NewPress_IR) )
    4416:	80 91 86 00 	lds	r24, 0x0086
    441a:	6a 96       	adiw	r28, 0x1a	; 26
    441c:	8f af       	std	Y+63, r24	; 0x3f
    441e:	6a 97       	sbiw	r28, 0x1a	; 26
    4420:	80 91 87 00 	lds	r24, 0x0087
    4424:	6b 96       	adiw	r28, 0x1b	; 27
    4426:	8f af       	std	Y+63, r24	; 0x3f
    4428:	6b 97       	sbiw	r28, 0x1b	; 27
    442a:	80 91 88 00 	lds	r24, 0x0088
    442e:	6c 96       	adiw	r28, 0x1c	; 28
    4430:	8f af       	std	Y+63, r24	; 0x3f
    4432:	6c 97       	sbiw	r28, 0x1c	; 28
    4434:	80 91 89 00 	lds	r24, 0x0089
    4438:	6d 96       	adiw	r28, 0x1d	; 29
    443a:	8f af       	std	Y+63, r24	; 0x3f
    443c:	6d 97       	sbiw	r28, 0x1d	; 29
    443e:	80 91 8a 00 	lds	r24, 0x008A
    4442:	6e 96       	adiw	r28, 0x1e	; 30
    4444:	8f af       	std	Y+63, r24	; 0x3f
    4446:	6e 97       	sbiw	r28, 0x1e	; 30
    4448:	80 91 8b 00 	lds	r24, 0x008B
    444c:	6f 96       	adiw	r28, 0x1f	; 31
    444e:	8f af       	std	Y+63, r24	; 0x3f
    4450:	6f 97       	sbiw	r28, 0x1f	; 31
    4452:	80 91 8c 00 	lds	r24, 0x008C
    4456:	a0 96       	adiw	r28, 0x20	; 32
    4458:	8f af       	std	Y+63, r24	; 0x3f
    445a:	a0 97       	sbiw	r28, 0x20	; 32
    445c:	80 91 8d 00 	lds	r24, 0x008D
    4460:	a1 96       	adiw	r28, 0x21	; 33
    4462:	8f af       	std	Y+63, r24	; 0x3f
    4464:	a1 97       	sbiw	r28, 0x21	; 33
    4466:	6a 96       	adiw	r28, 0x1a	; 26
    4468:	8f ad       	ldd	r24, Y+63	; 0x3f
    446a:	6a 97       	sbiw	r28, 0x1a	; 26
    446c:	8d 3d       	cpi	r24, 0xDD	; 221
    446e:	69 f5       	brne	.+90     	; 0x44ca <main+0x826>
    4470:	6b 96       	adiw	r28, 0x1b	; 27
    4472:	8f ad       	ldd	r24, Y+63	; 0x3f
    4474:	6b 97       	sbiw	r28, 0x1b	; 27
    4476:	82 32       	cpi	r24, 0x22	; 34
    4478:	41 f5       	brne	.+80     	; 0x44ca <main+0x826>
    447a:	6c 96       	adiw	r28, 0x1c	; 28
    447c:	8f ad       	ldd	r24, Y+63	; 0x3f
    447e:	6c 97       	sbiw	r28, 0x1c	; 28
    4480:	8f 3f       	cpi	r24, 0xFF	; 255
    4482:	19 f5       	brne	.+70     	; 0x44ca <main+0x826>
    4484:	6d 96       	adiw	r28, 0x1d	; 29
    4486:	8f ad       	ldd	r24, Y+63	; 0x3f
    4488:	6d 97       	sbiw	r28, 0x1d	; 29
    448a:	88 23       	and	r24, r24
    448c:	f1 f4       	brne	.+60     	; 0x44ca <main+0x826>
    448e:	6e 96       	adiw	r28, 0x1e	; 30
    4490:	8f ad       	ldd	r24, Y+63	; 0x3f
    4492:	6e 97       	sbiw	r28, 0x1e	; 30
    4494:	88 23       	and	r24, r24
    4496:	c9 f4       	brne	.+50     	; 0x44ca <main+0x826>
    4498:	6f 96       	adiw	r28, 0x1f	; 31
    449a:	8f ad       	ldd	r24, Y+63	; 0x3f
    449c:	6f 97       	sbiw	r28, 0x1f	; 31
    449e:	88 23       	and	r24, r24
    44a0:	a1 f4       	brne	.+40     	; 0x44ca <main+0x826>
    44a2:	a0 96       	adiw	r28, 0x20	; 32
    44a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    44a6:	a0 97       	sbiw	r28, 0x20	; 32
    44a8:	88 23       	and	r24, r24
    44aa:	79 f4       	brne	.+30     	; 0x44ca <main+0x826>
    44ac:	a1 96       	adiw	r28, 0x21	; 33
    44ae:	8f ad       	ldd	r24, Y+63	; 0x3f
    44b0:	a1 97       	sbiw	r28, 0x21	; 33
    44b2:	88 23       	and	r24, r24
    44b4:	51 f4       	brne	.+20     	; 0x44ca <main+0x826>
    44b6:	80 91 8e 00 	lds	r24, 0x008E
    44ba:	81 30       	cpi	r24, 0x01	; 1
    44bc:	31 f4       	brne	.+12     	; 0x44ca <main+0x826>
       {
           GPIO_WritePin(PORTA_ID,PIN3_ID,LOGIC_HIGH);
    44be:	80 e0       	ldi	r24, 0x00	; 0
    44c0:	63 e0       	ldi	r22, 0x03	; 3
    44c2:	41 e0       	ldi	r20, 0x01	; 1
    44c4:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    44c8:	59 c0       	rjmp	.+178    	; 0x457c <main+0x8d8>
       }
       else if( (IR_signal_buffer == IR_CMD_4) && (IR_press_state == StillPress_IR) )
    44ca:	80 91 86 00 	lds	r24, 0x0086
    44ce:	62 96       	adiw	r28, 0x12	; 18
    44d0:	8f af       	std	Y+63, r24	; 0x3f
    44d2:	62 97       	sbiw	r28, 0x12	; 18
    44d4:	80 91 87 00 	lds	r24, 0x0087
    44d8:	63 96       	adiw	r28, 0x13	; 19
    44da:	8f af       	std	Y+63, r24	; 0x3f
    44dc:	63 97       	sbiw	r28, 0x13	; 19
    44de:	80 91 88 00 	lds	r24, 0x0088
    44e2:	64 96       	adiw	r28, 0x14	; 20
    44e4:	8f af       	std	Y+63, r24	; 0x3f
    44e6:	64 97       	sbiw	r28, 0x14	; 20
    44e8:	80 91 89 00 	lds	r24, 0x0089
    44ec:	65 96       	adiw	r28, 0x15	; 21
    44ee:	8f af       	std	Y+63, r24	; 0x3f
    44f0:	65 97       	sbiw	r28, 0x15	; 21
    44f2:	80 91 8a 00 	lds	r24, 0x008A
    44f6:	66 96       	adiw	r28, 0x16	; 22
    44f8:	8f af       	std	Y+63, r24	; 0x3f
    44fa:	66 97       	sbiw	r28, 0x16	; 22
    44fc:	80 91 8b 00 	lds	r24, 0x008B
    4500:	67 96       	adiw	r28, 0x17	; 23
    4502:	8f af       	std	Y+63, r24	; 0x3f
    4504:	67 97       	sbiw	r28, 0x17	; 23
    4506:	80 91 8c 00 	lds	r24, 0x008C
    450a:	68 96       	adiw	r28, 0x18	; 24
    450c:	8f af       	std	Y+63, r24	; 0x3f
    450e:	68 97       	sbiw	r28, 0x18	; 24
    4510:	80 91 8d 00 	lds	r24, 0x008D
    4514:	69 96       	adiw	r28, 0x19	; 25
    4516:	8f af       	std	Y+63, r24	; 0x3f
    4518:	69 97       	sbiw	r28, 0x19	; 25
    451a:	62 96       	adiw	r28, 0x12	; 18
    451c:	8f ad       	ldd	r24, Y+63	; 0x3f
    451e:	62 97       	sbiw	r28, 0x12	; 18
    4520:	8d 3d       	cpi	r24, 0xDD	; 221
    4522:	61 f5       	brne	.+88     	; 0x457c <main+0x8d8>
    4524:	63 96       	adiw	r28, 0x13	; 19
    4526:	8f ad       	ldd	r24, Y+63	; 0x3f
    4528:	63 97       	sbiw	r28, 0x13	; 19
    452a:	82 32       	cpi	r24, 0x22	; 34
    452c:	39 f5       	brne	.+78     	; 0x457c <main+0x8d8>
    452e:	64 96       	adiw	r28, 0x14	; 20
    4530:	8f ad       	ldd	r24, Y+63	; 0x3f
    4532:	64 97       	sbiw	r28, 0x14	; 20
    4534:	8f 3f       	cpi	r24, 0xFF	; 255
    4536:	11 f5       	brne	.+68     	; 0x457c <main+0x8d8>
    4538:	65 96       	adiw	r28, 0x15	; 21
    453a:	8f ad       	ldd	r24, Y+63	; 0x3f
    453c:	65 97       	sbiw	r28, 0x15	; 21
    453e:	88 23       	and	r24, r24
    4540:	e9 f4       	brne	.+58     	; 0x457c <main+0x8d8>
    4542:	66 96       	adiw	r28, 0x16	; 22
    4544:	8f ad       	ldd	r24, Y+63	; 0x3f
    4546:	66 97       	sbiw	r28, 0x16	; 22
    4548:	88 23       	and	r24, r24
    454a:	c1 f4       	brne	.+48     	; 0x457c <main+0x8d8>
    454c:	67 96       	adiw	r28, 0x17	; 23
    454e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4550:	67 97       	sbiw	r28, 0x17	; 23
    4552:	88 23       	and	r24, r24
    4554:	99 f4       	brne	.+38     	; 0x457c <main+0x8d8>
    4556:	68 96       	adiw	r28, 0x18	; 24
    4558:	8f ad       	ldd	r24, Y+63	; 0x3f
    455a:	68 97       	sbiw	r28, 0x18	; 24
    455c:	88 23       	and	r24, r24
    455e:	71 f4       	brne	.+28     	; 0x457c <main+0x8d8>
    4560:	69 96       	adiw	r28, 0x19	; 25
    4562:	8f ad       	ldd	r24, Y+63	; 0x3f
    4564:	69 97       	sbiw	r28, 0x19	; 25
    4566:	88 23       	and	r24, r24
    4568:	49 f4       	brne	.+18     	; 0x457c <main+0x8d8>
    456a:	80 91 8e 00 	lds	r24, 0x008E
    456e:	82 30       	cpi	r24, 0x02	; 2
    4570:	29 f4       	brne	.+10     	; 0x457c <main+0x8d8>
       {
           GPIO_WritePin(PORTA_ID,PIN3_ID,LOGIC_LOW);
    4572:	80 e0       	ldi	r24, 0x00	; 0
    4574:	63 e0       	ldi	r22, 0x03	; 3
    4576:	40 e0       	ldi	r20, 0x00	; 0
    4578:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
       }

       if( (IR_signal_buffer == IR_CMD_5) && (IR_press_state == NewPress_IR) )
    457c:	80 91 86 00 	lds	r24, 0x0086
    4580:	2a 96       	adiw	r28, 0x0a	; 10
    4582:	8f af       	std	Y+63, r24	; 0x3f
    4584:	2a 97       	sbiw	r28, 0x0a	; 10
    4586:	80 91 87 00 	lds	r24, 0x0087
    458a:	2b 96       	adiw	r28, 0x0b	; 11
    458c:	8f af       	std	Y+63, r24	; 0x3f
    458e:	2b 97       	sbiw	r28, 0x0b	; 11
    4590:	80 91 88 00 	lds	r24, 0x0088
    4594:	2c 96       	adiw	r28, 0x0c	; 12
    4596:	8f af       	std	Y+63, r24	; 0x3f
    4598:	2c 97       	sbiw	r28, 0x0c	; 12
    459a:	80 91 89 00 	lds	r24, 0x0089
    459e:	2d 96       	adiw	r28, 0x0d	; 13
    45a0:	8f af       	std	Y+63, r24	; 0x3f
    45a2:	2d 97       	sbiw	r28, 0x0d	; 13
    45a4:	80 91 8a 00 	lds	r24, 0x008A
    45a8:	2e 96       	adiw	r28, 0x0e	; 14
    45aa:	8f af       	std	Y+63, r24	; 0x3f
    45ac:	2e 97       	sbiw	r28, 0x0e	; 14
    45ae:	80 91 8b 00 	lds	r24, 0x008B
    45b2:	2f 96       	adiw	r28, 0x0f	; 15
    45b4:	8f af       	std	Y+63, r24	; 0x3f
    45b6:	2f 97       	sbiw	r28, 0x0f	; 15
    45b8:	80 91 8c 00 	lds	r24, 0x008C
    45bc:	60 96       	adiw	r28, 0x10	; 16
    45be:	8f af       	std	Y+63, r24	; 0x3f
    45c0:	60 97       	sbiw	r28, 0x10	; 16
    45c2:	80 91 8d 00 	lds	r24, 0x008D
    45c6:	61 96       	adiw	r28, 0x11	; 17
    45c8:	8f af       	std	Y+63, r24	; 0x3f
    45ca:	61 97       	sbiw	r28, 0x11	; 17
    45cc:	2a 96       	adiw	r28, 0x0a	; 10
    45ce:	8f ad       	ldd	r24, Y+63	; 0x3f
    45d0:	2a 97       	sbiw	r28, 0x0a	; 10
    45d2:	8d 3f       	cpi	r24, 0xFD	; 253
    45d4:	69 f5       	brne	.+90     	; 0x4630 <main+0x98c>
    45d6:	2b 96       	adiw	r28, 0x0b	; 11
    45d8:	8f ad       	ldd	r24, Y+63	; 0x3f
    45da:	2b 97       	sbiw	r28, 0x0b	; 11
    45dc:	82 30       	cpi	r24, 0x02	; 2
    45de:	41 f5       	brne	.+80     	; 0x4630 <main+0x98c>
    45e0:	2c 96       	adiw	r28, 0x0c	; 12
    45e2:	8f ad       	ldd	r24, Y+63	; 0x3f
    45e4:	2c 97       	sbiw	r28, 0x0c	; 12
    45e6:	8f 3f       	cpi	r24, 0xFF	; 255
    45e8:	19 f5       	brne	.+70     	; 0x4630 <main+0x98c>
    45ea:	2d 96       	adiw	r28, 0x0d	; 13
    45ec:	8f ad       	ldd	r24, Y+63	; 0x3f
    45ee:	2d 97       	sbiw	r28, 0x0d	; 13
    45f0:	88 23       	and	r24, r24
    45f2:	f1 f4       	brne	.+60     	; 0x4630 <main+0x98c>
    45f4:	2e 96       	adiw	r28, 0x0e	; 14
    45f6:	8f ad       	ldd	r24, Y+63	; 0x3f
    45f8:	2e 97       	sbiw	r28, 0x0e	; 14
    45fa:	88 23       	and	r24, r24
    45fc:	c9 f4       	brne	.+50     	; 0x4630 <main+0x98c>
    45fe:	2f 96       	adiw	r28, 0x0f	; 15
    4600:	8f ad       	ldd	r24, Y+63	; 0x3f
    4602:	2f 97       	sbiw	r28, 0x0f	; 15
    4604:	88 23       	and	r24, r24
    4606:	a1 f4       	brne	.+40     	; 0x4630 <main+0x98c>
    4608:	60 96       	adiw	r28, 0x10	; 16
    460a:	8f ad       	ldd	r24, Y+63	; 0x3f
    460c:	60 97       	sbiw	r28, 0x10	; 16
    460e:	88 23       	and	r24, r24
    4610:	79 f4       	brne	.+30     	; 0x4630 <main+0x98c>
    4612:	61 96       	adiw	r28, 0x11	; 17
    4614:	8f ad       	ldd	r24, Y+63	; 0x3f
    4616:	61 97       	sbiw	r28, 0x11	; 17
    4618:	88 23       	and	r24, r24
    461a:	51 f4       	brne	.+20     	; 0x4630 <main+0x98c>
    461c:	80 91 8e 00 	lds	r24, 0x008E
    4620:	81 30       	cpi	r24, 0x01	; 1
    4622:	31 f4       	brne	.+12     	; 0x4630 <main+0x98c>
       {
           GPIO_WritePin(PORTA_ID,PIN4_ID,LOGIC_HIGH);
    4624:	80 e0       	ldi	r24, 0x00	; 0
    4626:	64 e0       	ldi	r22, 0x04	; 4
    4628:	41 e0       	ldi	r20, 0x01	; 1
    462a:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    462e:	59 c0       	rjmp	.+178    	; 0x46e2 <main+0xa3e>
       }
       else if( (IR_signal_buffer == IR_CMD_5) && (IR_press_state == StillPress_IR) )
    4630:	80 91 86 00 	lds	r24, 0x0086
    4634:	22 96       	adiw	r28, 0x02	; 2
    4636:	8f af       	std	Y+63, r24	; 0x3f
    4638:	22 97       	sbiw	r28, 0x02	; 2
    463a:	80 91 87 00 	lds	r24, 0x0087
    463e:	23 96       	adiw	r28, 0x03	; 3
    4640:	8f af       	std	Y+63, r24	; 0x3f
    4642:	23 97       	sbiw	r28, 0x03	; 3
    4644:	80 91 88 00 	lds	r24, 0x0088
    4648:	24 96       	adiw	r28, 0x04	; 4
    464a:	8f af       	std	Y+63, r24	; 0x3f
    464c:	24 97       	sbiw	r28, 0x04	; 4
    464e:	80 91 89 00 	lds	r24, 0x0089
    4652:	25 96       	adiw	r28, 0x05	; 5
    4654:	8f af       	std	Y+63, r24	; 0x3f
    4656:	25 97       	sbiw	r28, 0x05	; 5
    4658:	80 91 8a 00 	lds	r24, 0x008A
    465c:	26 96       	adiw	r28, 0x06	; 6
    465e:	8f af       	std	Y+63, r24	; 0x3f
    4660:	26 97       	sbiw	r28, 0x06	; 6
    4662:	80 91 8b 00 	lds	r24, 0x008B
    4666:	27 96       	adiw	r28, 0x07	; 7
    4668:	8f af       	std	Y+63, r24	; 0x3f
    466a:	27 97       	sbiw	r28, 0x07	; 7
    466c:	80 91 8c 00 	lds	r24, 0x008C
    4670:	28 96       	adiw	r28, 0x08	; 8
    4672:	8f af       	std	Y+63, r24	; 0x3f
    4674:	28 97       	sbiw	r28, 0x08	; 8
    4676:	80 91 8d 00 	lds	r24, 0x008D
    467a:	29 96       	adiw	r28, 0x09	; 9
    467c:	8f af       	std	Y+63, r24	; 0x3f
    467e:	29 97       	sbiw	r28, 0x09	; 9
    4680:	22 96       	adiw	r28, 0x02	; 2
    4682:	8f ad       	ldd	r24, Y+63	; 0x3f
    4684:	22 97       	sbiw	r28, 0x02	; 2
    4686:	8d 3f       	cpi	r24, 0xFD	; 253
    4688:	61 f5       	brne	.+88     	; 0x46e2 <main+0xa3e>
    468a:	23 96       	adiw	r28, 0x03	; 3
    468c:	8f ad       	ldd	r24, Y+63	; 0x3f
    468e:	23 97       	sbiw	r28, 0x03	; 3
    4690:	82 30       	cpi	r24, 0x02	; 2
    4692:	39 f5       	brne	.+78     	; 0x46e2 <main+0xa3e>
    4694:	24 96       	adiw	r28, 0x04	; 4
    4696:	8f ad       	ldd	r24, Y+63	; 0x3f
    4698:	24 97       	sbiw	r28, 0x04	; 4
    469a:	8f 3f       	cpi	r24, 0xFF	; 255
    469c:	11 f5       	brne	.+68     	; 0x46e2 <main+0xa3e>
    469e:	25 96       	adiw	r28, 0x05	; 5
    46a0:	8f ad       	ldd	r24, Y+63	; 0x3f
    46a2:	25 97       	sbiw	r28, 0x05	; 5
    46a4:	88 23       	and	r24, r24
    46a6:	e9 f4       	brne	.+58     	; 0x46e2 <main+0xa3e>
    46a8:	26 96       	adiw	r28, 0x06	; 6
    46aa:	8f ad       	ldd	r24, Y+63	; 0x3f
    46ac:	26 97       	sbiw	r28, 0x06	; 6
    46ae:	88 23       	and	r24, r24
    46b0:	c1 f4       	brne	.+48     	; 0x46e2 <main+0xa3e>
    46b2:	27 96       	adiw	r28, 0x07	; 7
    46b4:	8f ad       	ldd	r24, Y+63	; 0x3f
    46b6:	27 97       	sbiw	r28, 0x07	; 7
    46b8:	88 23       	and	r24, r24
    46ba:	99 f4       	brne	.+38     	; 0x46e2 <main+0xa3e>
    46bc:	28 96       	adiw	r28, 0x08	; 8
    46be:	8f ad       	ldd	r24, Y+63	; 0x3f
    46c0:	28 97       	sbiw	r28, 0x08	; 8
    46c2:	88 23       	and	r24, r24
    46c4:	71 f4       	brne	.+28     	; 0x46e2 <main+0xa3e>
    46c6:	29 96       	adiw	r28, 0x09	; 9
    46c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    46ca:	29 97       	sbiw	r28, 0x09	; 9
    46cc:	88 23       	and	r24, r24
    46ce:	49 f4       	brne	.+18     	; 0x46e2 <main+0xa3e>
    46d0:	80 91 8e 00 	lds	r24, 0x008E
    46d4:	82 30       	cpi	r24, 0x02	; 2
    46d6:	29 f4       	brne	.+10     	; 0x46e2 <main+0xa3e>
       {
           GPIO_WritePin(PORTA_ID,PIN4_ID,LOGIC_LOW);
    46d8:	80 e0       	ldi	r24, 0x00	; 0
    46da:	64 e0       	ldi	r22, 0x04	; 4
    46dc:	40 e0       	ldi	r20, 0x00	; 0
    46de:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
       }

       if( (IR_signal_buffer == IR_CMD_6) && (IR_press_state == NewPress_IR) )
    46e2:	80 91 86 00 	lds	r24, 0x0086
    46e6:	89 af       	std	Y+57, r24	; 0x39
    46e8:	80 91 87 00 	lds	r24, 0x0087
    46ec:	8a af       	std	Y+58, r24	; 0x3a
    46ee:	80 91 88 00 	lds	r24, 0x0088
    46f2:	8b af       	std	Y+59, r24	; 0x3b
    46f4:	80 91 89 00 	lds	r24, 0x0089
    46f8:	8c af       	std	Y+60, r24	; 0x3c
    46fa:	80 91 8a 00 	lds	r24, 0x008A
    46fe:	8d af       	std	Y+61, r24	; 0x3d
    4700:	80 91 8b 00 	lds	r24, 0x008B
    4704:	8e af       	std	Y+62, r24	; 0x3e
    4706:	80 91 8c 00 	lds	r24, 0x008C
    470a:	8f af       	std	Y+63, r24	; 0x3f
    470c:	80 91 8d 00 	lds	r24, 0x008D
    4710:	21 96       	adiw	r28, 0x01	; 1
    4712:	8f af       	std	Y+63, r24	; 0x3f
    4714:	21 97       	sbiw	r28, 0x01	; 1
    4716:	89 ad       	ldd	r24, Y+57	; 0x39
    4718:	8d 33       	cpi	r24, 0x3D	; 61
    471a:	09 f5       	brne	.+66     	; 0x475e <main+0xaba>
    471c:	8a ad       	ldd	r24, Y+58	; 0x3a
    471e:	82 3c       	cpi	r24, 0xC2	; 194
    4720:	f1 f4       	brne	.+60     	; 0x475e <main+0xaba>
    4722:	8b ad       	ldd	r24, Y+59	; 0x3b
    4724:	8f 3f       	cpi	r24, 0xFF	; 255
    4726:	d9 f4       	brne	.+54     	; 0x475e <main+0xaba>
    4728:	8c ad       	ldd	r24, Y+60	; 0x3c
    472a:	88 23       	and	r24, r24
    472c:	c1 f4       	brne	.+48     	; 0x475e <main+0xaba>
    472e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4730:	88 23       	and	r24, r24
    4732:	a9 f4       	brne	.+42     	; 0x475e <main+0xaba>
    4734:	8e ad       	ldd	r24, Y+62	; 0x3e
    4736:	88 23       	and	r24, r24
    4738:	91 f4       	brne	.+36     	; 0x475e <main+0xaba>
    473a:	8f ad       	ldd	r24, Y+63	; 0x3f
    473c:	88 23       	and	r24, r24
    473e:	79 f4       	brne	.+30     	; 0x475e <main+0xaba>
    4740:	21 96       	adiw	r28, 0x01	; 1
    4742:	8f ad       	ldd	r24, Y+63	; 0x3f
    4744:	21 97       	sbiw	r28, 0x01	; 1
    4746:	88 23       	and	r24, r24
    4748:	51 f4       	brne	.+20     	; 0x475e <main+0xaba>
    474a:	80 91 8e 00 	lds	r24, 0x008E
    474e:	81 30       	cpi	r24, 0x01	; 1
    4750:	31 f4       	brne	.+12     	; 0x475e <main+0xaba>
       {
           GPIO_WritePin(PORTA_ID,PIN5_ID,LOGIC_HIGH);
    4752:	80 e0       	ldi	r24, 0x00	; 0
    4754:	65 e0       	ldi	r22, 0x05	; 5
    4756:	41 e0       	ldi	r20, 0x01	; 1
    4758:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    475c:	39 c0       	rjmp	.+114    	; 0x47d0 <main+0xb2c>
       }
       else if( (IR_signal_buffer == IR_CMD_6) && (IR_press_state == StillPress_IR) )
    475e:	80 91 86 00 	lds	r24, 0x0086
    4762:	89 ab       	std	Y+49, r24	; 0x31
    4764:	80 91 87 00 	lds	r24, 0x0087
    4768:	8a ab       	std	Y+50, r24	; 0x32
    476a:	80 91 88 00 	lds	r24, 0x0088
    476e:	8b ab       	std	Y+51, r24	; 0x33
    4770:	80 91 89 00 	lds	r24, 0x0089
    4774:	8c ab       	std	Y+52, r24	; 0x34
    4776:	80 91 8a 00 	lds	r24, 0x008A
    477a:	8d ab       	std	Y+53, r24	; 0x35
    477c:	80 91 8b 00 	lds	r24, 0x008B
    4780:	8e ab       	std	Y+54, r24	; 0x36
    4782:	80 91 8c 00 	lds	r24, 0x008C
    4786:	8f ab       	std	Y+55, r24	; 0x37
    4788:	80 91 8d 00 	lds	r24, 0x008D
    478c:	88 af       	std	Y+56, r24	; 0x38
    478e:	89 a9       	ldd	r24, Y+49	; 0x31
    4790:	8d 33       	cpi	r24, 0x3D	; 61
    4792:	f1 f4       	brne	.+60     	; 0x47d0 <main+0xb2c>
    4794:	8a a9       	ldd	r24, Y+50	; 0x32
    4796:	82 3c       	cpi	r24, 0xC2	; 194
    4798:	d9 f4       	brne	.+54     	; 0x47d0 <main+0xb2c>
    479a:	8b a9       	ldd	r24, Y+51	; 0x33
    479c:	8f 3f       	cpi	r24, 0xFF	; 255
    479e:	c1 f4       	brne	.+48     	; 0x47d0 <main+0xb2c>
    47a0:	8c a9       	ldd	r24, Y+52	; 0x34
    47a2:	88 23       	and	r24, r24
    47a4:	a9 f4       	brne	.+42     	; 0x47d0 <main+0xb2c>
    47a6:	8d a9       	ldd	r24, Y+53	; 0x35
    47a8:	88 23       	and	r24, r24
    47aa:	91 f4       	brne	.+36     	; 0x47d0 <main+0xb2c>
    47ac:	8e a9       	ldd	r24, Y+54	; 0x36
    47ae:	88 23       	and	r24, r24
    47b0:	79 f4       	brne	.+30     	; 0x47d0 <main+0xb2c>
    47b2:	8f a9       	ldd	r24, Y+55	; 0x37
    47b4:	88 23       	and	r24, r24
    47b6:	61 f4       	brne	.+24     	; 0x47d0 <main+0xb2c>
    47b8:	88 ad       	ldd	r24, Y+56	; 0x38
    47ba:	88 23       	and	r24, r24
    47bc:	49 f4       	brne	.+18     	; 0x47d0 <main+0xb2c>
    47be:	80 91 8e 00 	lds	r24, 0x008E
    47c2:	82 30       	cpi	r24, 0x02	; 2
    47c4:	29 f4       	brne	.+10     	; 0x47d0 <main+0xb2c>
       {
           GPIO_WritePin(PORTA_ID,PIN5_ID,LOGIC_LOW);
    47c6:	80 e0       	ldi	r24, 0x00	; 0
    47c8:	65 e0       	ldi	r22, 0x05	; 5
    47ca:	40 e0       	ldi	r20, 0x00	; 0
    47cc:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
       }


       if( (IR_signal_buffer == IR_CMD_7) && (IR_press_state == NewPress_IR) )
    47d0:	80 91 86 00 	lds	r24, 0x0086
    47d4:	89 a7       	std	Y+41, r24	; 0x29
    47d6:	80 91 87 00 	lds	r24, 0x0087
    47da:	8a a7       	std	Y+42, r24	; 0x2a
    47dc:	80 91 88 00 	lds	r24, 0x0088
    47e0:	8b a7       	std	Y+43, r24	; 0x2b
    47e2:	80 91 89 00 	lds	r24, 0x0089
    47e6:	8c a7       	std	Y+44, r24	; 0x2c
    47e8:	80 91 8a 00 	lds	r24, 0x008A
    47ec:	8d a7       	std	Y+45, r24	; 0x2d
    47ee:	80 91 8b 00 	lds	r24, 0x008B
    47f2:	8e a7       	std	Y+46, r24	; 0x2e
    47f4:	80 91 8c 00 	lds	r24, 0x008C
    47f8:	8f a7       	std	Y+47, r24	; 0x2f
    47fa:	80 91 8d 00 	lds	r24, 0x008D
    47fe:	88 ab       	std	Y+48, r24	; 0x30
    4800:	89 a5       	ldd	r24, Y+41	; 0x29
    4802:	8f 31       	cpi	r24, 0x1F	; 31
    4804:	f9 f4       	brne	.+62     	; 0x4844 <main+0xba0>
    4806:	8a a5       	ldd	r24, Y+42	; 0x2a
    4808:	80 3e       	cpi	r24, 0xE0	; 224
    480a:	e1 f4       	brne	.+56     	; 0x4844 <main+0xba0>
    480c:	8b a5       	ldd	r24, Y+43	; 0x2b
    480e:	8f 3f       	cpi	r24, 0xFF	; 255
    4810:	c9 f4       	brne	.+50     	; 0x4844 <main+0xba0>
    4812:	8c a5       	ldd	r24, Y+44	; 0x2c
    4814:	88 23       	and	r24, r24
    4816:	b1 f4       	brne	.+44     	; 0x4844 <main+0xba0>
    4818:	8d a5       	ldd	r24, Y+45	; 0x2d
    481a:	88 23       	and	r24, r24
    481c:	99 f4       	brne	.+38     	; 0x4844 <main+0xba0>
    481e:	8e a5       	ldd	r24, Y+46	; 0x2e
    4820:	88 23       	and	r24, r24
    4822:	81 f4       	brne	.+32     	; 0x4844 <main+0xba0>
    4824:	8f a5       	ldd	r24, Y+47	; 0x2f
    4826:	88 23       	and	r24, r24
    4828:	69 f4       	brne	.+26     	; 0x4844 <main+0xba0>
    482a:	88 a9       	ldd	r24, Y+48	; 0x30
    482c:	88 23       	and	r24, r24
    482e:	51 f4       	brne	.+20     	; 0x4844 <main+0xba0>
    4830:	80 91 8e 00 	lds	r24, 0x008E
    4834:	81 30       	cpi	r24, 0x01	; 1
    4836:	31 f4       	brne	.+12     	; 0x4844 <main+0xba0>
       {
           GPIO_WritePin(PORTA_ID,PIN6_ID,LOGIC_HIGH);
    4838:	80 e0       	ldi	r24, 0x00	; 0
    483a:	66 e0       	ldi	r22, 0x06	; 6
    483c:	41 e0       	ldi	r20, 0x01	; 1
    483e:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    4842:	39 c0       	rjmp	.+114    	; 0x48b6 <main+0xc12>
       }
       else if( (IR_signal_buffer == IR_CMD_7) && (IR_press_state == StillPress_IR) )
    4844:	80 91 86 00 	lds	r24, 0x0086
    4848:	89 a3       	std	Y+33, r24	; 0x21
    484a:	80 91 87 00 	lds	r24, 0x0087
    484e:	8a a3       	std	Y+34, r24	; 0x22
    4850:	80 91 88 00 	lds	r24, 0x0088
    4854:	8b a3       	std	Y+35, r24	; 0x23
    4856:	80 91 89 00 	lds	r24, 0x0089
    485a:	8c a3       	std	Y+36, r24	; 0x24
    485c:	80 91 8a 00 	lds	r24, 0x008A
    4860:	8d a3       	std	Y+37, r24	; 0x25
    4862:	80 91 8b 00 	lds	r24, 0x008B
    4866:	8e a3       	std	Y+38, r24	; 0x26
    4868:	80 91 8c 00 	lds	r24, 0x008C
    486c:	8f a3       	std	Y+39, r24	; 0x27
    486e:	80 91 8d 00 	lds	r24, 0x008D
    4872:	88 a7       	std	Y+40, r24	; 0x28
    4874:	89 a1       	ldd	r24, Y+33	; 0x21
    4876:	8f 31       	cpi	r24, 0x1F	; 31
    4878:	f1 f4       	brne	.+60     	; 0x48b6 <main+0xc12>
    487a:	8a a1       	ldd	r24, Y+34	; 0x22
    487c:	80 3e       	cpi	r24, 0xE0	; 224
    487e:	d9 f4       	brne	.+54     	; 0x48b6 <main+0xc12>
    4880:	8b a1       	ldd	r24, Y+35	; 0x23
    4882:	8f 3f       	cpi	r24, 0xFF	; 255
    4884:	c1 f4       	brne	.+48     	; 0x48b6 <main+0xc12>
    4886:	8c a1       	ldd	r24, Y+36	; 0x24
    4888:	88 23       	and	r24, r24
    488a:	a9 f4       	brne	.+42     	; 0x48b6 <main+0xc12>
    488c:	8d a1       	ldd	r24, Y+37	; 0x25
    488e:	88 23       	and	r24, r24
    4890:	91 f4       	brne	.+36     	; 0x48b6 <main+0xc12>
    4892:	8e a1       	ldd	r24, Y+38	; 0x26
    4894:	88 23       	and	r24, r24
    4896:	79 f4       	brne	.+30     	; 0x48b6 <main+0xc12>
    4898:	8f a1       	ldd	r24, Y+39	; 0x27
    489a:	88 23       	and	r24, r24
    489c:	61 f4       	brne	.+24     	; 0x48b6 <main+0xc12>
    489e:	88 a5       	ldd	r24, Y+40	; 0x28
    48a0:	88 23       	and	r24, r24
    48a2:	49 f4       	brne	.+18     	; 0x48b6 <main+0xc12>
    48a4:	80 91 8e 00 	lds	r24, 0x008E
    48a8:	82 30       	cpi	r24, 0x02	; 2
    48aa:	29 f4       	brne	.+10     	; 0x48b6 <main+0xc12>
       {
           GPIO_WritePin(PORTA_ID,PIN6_ID,LOGIC_LOW);
    48ac:	80 e0       	ldi	r24, 0x00	; 0
    48ae:	66 e0       	ldi	r22, 0x06	; 6
    48b0:	40 e0       	ldi	r20, 0x00	; 0
    48b2:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
       }

       if( (IR_signal_buffer == IR_CMD_8) && (IR_press_state == NewPress_IR) )
    48b6:	80 91 86 00 	lds	r24, 0x0086
    48ba:	89 8f       	std	Y+25, r24	; 0x19
    48bc:	80 91 87 00 	lds	r24, 0x0087
    48c0:	8a 8f       	std	Y+26, r24	; 0x1a
    48c2:	80 91 88 00 	lds	r24, 0x0088
    48c6:	8b 8f       	std	Y+27, r24	; 0x1b
    48c8:	80 91 89 00 	lds	r24, 0x0089
    48cc:	8c 8f       	std	Y+28, r24	; 0x1c
    48ce:	80 91 8a 00 	lds	r24, 0x008A
    48d2:	8d 8f       	std	Y+29, r24	; 0x1d
    48d4:	80 91 8b 00 	lds	r24, 0x008B
    48d8:	8e 8f       	std	Y+30, r24	; 0x1e
    48da:	80 91 8c 00 	lds	r24, 0x008C
    48de:	8f 8f       	std	Y+31, r24	; 0x1f
    48e0:	80 91 8d 00 	lds	r24, 0x008D
    48e4:	88 a3       	std	Y+32, r24	; 0x20
    48e6:	89 8d       	ldd	r24, Y+25	; 0x19
    48e8:	87 35       	cpi	r24, 0x57	; 87
    48ea:	f9 f4       	brne	.+62     	; 0x492a <main+0xc86>
    48ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    48ee:	88 3a       	cpi	r24, 0xA8	; 168
    48f0:	e1 f4       	brne	.+56     	; 0x492a <main+0xc86>
    48f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48f4:	8f 3f       	cpi	r24, 0xFF	; 255
    48f6:	c9 f4       	brne	.+50     	; 0x492a <main+0xc86>
    48f8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    48fa:	88 23       	and	r24, r24
    48fc:	b1 f4       	brne	.+44     	; 0x492a <main+0xc86>
    48fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4900:	88 23       	and	r24, r24
    4902:	99 f4       	brne	.+38     	; 0x492a <main+0xc86>
    4904:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4906:	88 23       	and	r24, r24
    4908:	81 f4       	brne	.+32     	; 0x492a <main+0xc86>
    490a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    490c:	88 23       	and	r24, r24
    490e:	69 f4       	brne	.+26     	; 0x492a <main+0xc86>
    4910:	88 a1       	ldd	r24, Y+32	; 0x20
    4912:	88 23       	and	r24, r24
    4914:	51 f4       	brne	.+20     	; 0x492a <main+0xc86>
    4916:	80 91 8e 00 	lds	r24, 0x008E
    491a:	81 30       	cpi	r24, 0x01	; 1
    491c:	31 f4       	brne	.+12     	; 0x492a <main+0xc86>
       {
           GPIO_WritePin(PORTA_ID,PIN7_ID,LOGIC_HIGH);
    491e:	80 e0       	ldi	r24, 0x00	; 0
    4920:	67 e0       	ldi	r22, 0x07	; 7
    4922:	41 e0       	ldi	r20, 0x01	; 1
    4924:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
    4928:	39 c0       	rjmp	.+114    	; 0x499c <main+0xcf8>
       }
       else if( (IR_signal_buffer == IR_CMD_8) && (IR_press_state == StillPress_IR) )
    492a:	80 91 86 00 	lds	r24, 0x0086
    492e:	89 8b       	std	Y+17, r24	; 0x11
    4930:	80 91 87 00 	lds	r24, 0x0087
    4934:	8a 8b       	std	Y+18, r24	; 0x12
    4936:	80 91 88 00 	lds	r24, 0x0088
    493a:	8b 8b       	std	Y+19, r24	; 0x13
    493c:	80 91 89 00 	lds	r24, 0x0089
    4940:	8c 8b       	std	Y+20, r24	; 0x14
    4942:	80 91 8a 00 	lds	r24, 0x008A
    4946:	8d 8b       	std	Y+21, r24	; 0x15
    4948:	80 91 8b 00 	lds	r24, 0x008B
    494c:	8e 8b       	std	Y+22, r24	; 0x16
    494e:	80 91 8c 00 	lds	r24, 0x008C
    4952:	8f 8b       	std	Y+23, r24	; 0x17
    4954:	80 91 8d 00 	lds	r24, 0x008D
    4958:	88 8f       	std	Y+24, r24	; 0x18
    495a:	89 89       	ldd	r24, Y+17	; 0x11
    495c:	87 35       	cpi	r24, 0x57	; 87
    495e:	f1 f4       	brne	.+60     	; 0x499c <main+0xcf8>
    4960:	8a 89       	ldd	r24, Y+18	; 0x12
    4962:	88 3a       	cpi	r24, 0xA8	; 168
    4964:	d9 f4       	brne	.+54     	; 0x499c <main+0xcf8>
    4966:	8b 89       	ldd	r24, Y+19	; 0x13
    4968:	8f 3f       	cpi	r24, 0xFF	; 255
    496a:	c1 f4       	brne	.+48     	; 0x499c <main+0xcf8>
    496c:	8c 89       	ldd	r24, Y+20	; 0x14
    496e:	88 23       	and	r24, r24
    4970:	a9 f4       	brne	.+42     	; 0x499c <main+0xcf8>
    4972:	8d 89       	ldd	r24, Y+21	; 0x15
    4974:	88 23       	and	r24, r24
    4976:	91 f4       	brne	.+36     	; 0x499c <main+0xcf8>
    4978:	8e 89       	ldd	r24, Y+22	; 0x16
    497a:	88 23       	and	r24, r24
    497c:	79 f4       	brne	.+30     	; 0x499c <main+0xcf8>
    497e:	8f 89       	ldd	r24, Y+23	; 0x17
    4980:	88 23       	and	r24, r24
    4982:	61 f4       	brne	.+24     	; 0x499c <main+0xcf8>
    4984:	88 8d       	ldd	r24, Y+24	; 0x18
    4986:	88 23       	and	r24, r24
    4988:	49 f4       	brne	.+18     	; 0x499c <main+0xcf8>
    498a:	80 91 8e 00 	lds	r24, 0x008E
    498e:	82 30       	cpi	r24, 0x02	; 2
    4990:	29 f4       	brne	.+10     	; 0x499c <main+0xcf8>
       {
           GPIO_WritePin(PORTA_ID,PIN7_ID,LOGIC_LOW);
    4992:	80 e0       	ldi	r24, 0x00	; 0
    4994:	67 e0       	ldi	r22, 0x07	; 7
    4996:	40 e0       	ldi	r20, 0x00	; 0
    4998:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <GPIO_WritePin>
       }


       if( (IR_signal_buffer == IR_CMD_9) && (IR_press_state == NewPress_IR) )
    499c:	80 91 86 00 	lds	r24, 0x0086
    49a0:	89 87       	std	Y+9, r24	; 0x09
    49a2:	80 91 87 00 	lds	r24, 0x0087
    49a6:	8a 87       	std	Y+10, r24	; 0x0a
    49a8:	80 91 88 00 	lds	r24, 0x0088
    49ac:	8b 87       	std	Y+11, r24	; 0x0b
    49ae:	80 91 89 00 	lds	r24, 0x0089
    49b2:	8c 87       	std	Y+12, r24	; 0x0c
    49b4:	80 91 8a 00 	lds	r24, 0x008A
    49b8:	8d 87       	std	Y+13, r24	; 0x0d
    49ba:	80 91 8b 00 	lds	r24, 0x008B
    49be:	8e 87       	std	Y+14, r24	; 0x0e
    49c0:	80 91 8c 00 	lds	r24, 0x008C
    49c4:	8f 87       	std	Y+15, r24	; 0x0f
    49c6:	80 91 8d 00 	lds	r24, 0x008D
    49ca:	88 8b       	std	Y+16, r24	; 0x10
    49cc:	89 85       	ldd	r24, Y+9	; 0x09
    49ce:	8f 36       	cpi	r24, 0x6F	; 111
    49d0:	f1 f4       	brne	.+60     	; 0x4a0e <main+0xd6a>
    49d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    49d4:	80 39       	cpi	r24, 0x90	; 144
    49d6:	d9 f4       	brne	.+54     	; 0x4a0e <main+0xd6a>
    49d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    49da:	8f 3f       	cpi	r24, 0xFF	; 255
    49dc:	c1 f4       	brne	.+48     	; 0x4a0e <main+0xd6a>
    49de:	8c 85       	ldd	r24, Y+12	; 0x0c
    49e0:	88 23       	and	r24, r24
    49e2:	a9 f4       	brne	.+42     	; 0x4a0e <main+0xd6a>
    49e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    49e6:	88 23       	and	r24, r24
    49e8:	91 f4       	brne	.+36     	; 0x4a0e <main+0xd6a>
    49ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    49ec:	88 23       	and	r24, r24
    49ee:	79 f4       	brne	.+30     	; 0x4a0e <main+0xd6a>
    49f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    49f2:	88 23       	and	r24, r24
    49f4:	61 f4       	brne	.+24     	; 0x4a0e <main+0xd6a>
    49f6:	88 89       	ldd	r24, Y+16	; 0x10
    49f8:	88 23       	and	r24, r24
    49fa:	49 f4       	brne	.+18     	; 0x4a0e <main+0xd6a>
    49fc:	80 91 8e 00 	lds	r24, 0x008E
    4a00:	81 30       	cpi	r24, 0x01	; 1
    4a02:	29 f4       	brne	.+10     	; 0x4a0e <main+0xd6a>
       {
           GPIO_WritePort(PORTA_ID,ONES_WORD);
    4a04:	80 e0       	ldi	r24, 0x00	; 0
    4a06:	6f ef       	ldi	r22, 0xFF	; 255
    4a08:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <GPIO_WritePort>
    4a0c:	64 c9       	rjmp	.-3384   	; 0x3cd6 <main+0x32>
       }
       else if( (IR_signal_buffer == IR_CMD_9) && (IR_press_state == StillPress_IR) )
    4a0e:	80 91 86 00 	lds	r24, 0x0086
    4a12:	89 83       	std	Y+1, r24	; 0x01
    4a14:	80 91 87 00 	lds	r24, 0x0087
    4a18:	8a 83       	std	Y+2, r24	; 0x02
    4a1a:	80 91 88 00 	lds	r24, 0x0088
    4a1e:	8b 83       	std	Y+3, r24	; 0x03
    4a20:	80 91 89 00 	lds	r24, 0x0089
    4a24:	8c 83       	std	Y+4, r24	; 0x04
    4a26:	80 91 8a 00 	lds	r24, 0x008A
    4a2a:	8d 83       	std	Y+5, r24	; 0x05
    4a2c:	80 91 8b 00 	lds	r24, 0x008B
    4a30:	8e 83       	std	Y+6, r24	; 0x06
    4a32:	80 91 8c 00 	lds	r24, 0x008C
    4a36:	8f 83       	std	Y+7, r24	; 0x07
    4a38:	80 91 8d 00 	lds	r24, 0x008D
    4a3c:	88 87       	std	Y+8, r24	; 0x08
    4a3e:	89 81       	ldd	r24, Y+1	; 0x01
    4a40:	8f 36       	cpi	r24, 0x6F	; 111
    4a42:	09 f0       	breq	.+2      	; 0x4a46 <main+0xda2>
    4a44:	48 c9       	rjmp	.-3440   	; 0x3cd6 <main+0x32>
    4a46:	8a 81       	ldd	r24, Y+2	; 0x02
    4a48:	80 39       	cpi	r24, 0x90	; 144
    4a4a:	09 f0       	breq	.+2      	; 0x4a4e <main+0xdaa>
    4a4c:	44 c9       	rjmp	.-3448   	; 0x3cd6 <main+0x32>
    4a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a50:	8f 3f       	cpi	r24, 0xFF	; 255
    4a52:	09 f0       	breq	.+2      	; 0x4a56 <main+0xdb2>
    4a54:	40 c9       	rjmp	.-3456   	; 0x3cd6 <main+0x32>
    4a56:	8c 81       	ldd	r24, Y+4	; 0x04
    4a58:	88 23       	and	r24, r24
    4a5a:	09 f0       	breq	.+2      	; 0x4a5e <main+0xdba>
    4a5c:	3c c9       	rjmp	.-3464   	; 0x3cd6 <main+0x32>
    4a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    4a60:	88 23       	and	r24, r24
    4a62:	09 f0       	breq	.+2      	; 0x4a66 <main+0xdc2>
    4a64:	38 c9       	rjmp	.-3472   	; 0x3cd6 <main+0x32>
    4a66:	8e 81       	ldd	r24, Y+6	; 0x06
    4a68:	88 23       	and	r24, r24
    4a6a:	09 f0       	breq	.+2      	; 0x4a6e <main+0xdca>
    4a6c:	34 c9       	rjmp	.-3480   	; 0x3cd6 <main+0x32>
    4a6e:	8f 81       	ldd	r24, Y+7	; 0x07
    4a70:	88 23       	and	r24, r24
    4a72:	09 f0       	breq	.+2      	; 0x4a76 <main+0xdd2>
    4a74:	30 c9       	rjmp	.-3488   	; 0x3cd6 <main+0x32>
    4a76:	88 85       	ldd	r24, Y+8	; 0x08
    4a78:	88 23       	and	r24, r24
    4a7a:	09 f0       	breq	.+2      	; 0x4a7e <main+0xdda>
    4a7c:	2c c9       	rjmp	.-3496   	; 0x3cd6 <main+0x32>
    4a7e:	80 91 8e 00 	lds	r24, 0x008E
    4a82:	82 30       	cpi	r24, 0x02	; 2
    4a84:	09 f0       	breq	.+2      	; 0x4a88 <main+0xde4>
    4a86:	27 c9       	rjmp	.-3506   	; 0x3cd6 <main+0x32>
       {
           GPIO_WritePort(PORTA_ID,ZEROS_WORD);
    4a88:	80 e0       	ldi	r24, 0x00	; 0
    4a8a:	60 e0       	ldi	r22, 0x00	; 0
    4a8c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <GPIO_WritePort>
    4a90:	22 c9       	rjmp	.-3516   	; 0x3cd6 <main+0x32>

00004a92 <__prologue_saves__>:
    4a92:	2f 92       	push	r2
    4a94:	3f 92       	push	r3
    4a96:	4f 92       	push	r4
    4a98:	5f 92       	push	r5
    4a9a:	6f 92       	push	r6
    4a9c:	7f 92       	push	r7
    4a9e:	8f 92       	push	r8
    4aa0:	9f 92       	push	r9
    4aa2:	af 92       	push	r10
    4aa4:	bf 92       	push	r11
    4aa6:	cf 92       	push	r12
    4aa8:	df 92       	push	r13
    4aaa:	ef 92       	push	r14
    4aac:	ff 92       	push	r15
    4aae:	0f 93       	push	r16
    4ab0:	1f 93       	push	r17
    4ab2:	cf 93       	push	r28
    4ab4:	df 93       	push	r29
    4ab6:	cd b7       	in	r28, 0x3d	; 61
    4ab8:	de b7       	in	r29, 0x3e	; 62
    4aba:	ca 1b       	sub	r28, r26
    4abc:	db 0b       	sbc	r29, r27
    4abe:	0f b6       	in	r0, 0x3f	; 63
    4ac0:	f8 94       	cli
    4ac2:	de bf       	out	0x3e, r29	; 62
    4ac4:	0f be       	out	0x3f, r0	; 63
    4ac6:	cd bf       	out	0x3d, r28	; 61
    4ac8:	09 94       	ijmp

00004aca <__epilogue_restores__>:
    4aca:	2a 88       	ldd	r2, Y+18	; 0x12
    4acc:	39 88       	ldd	r3, Y+17	; 0x11
    4ace:	48 88       	ldd	r4, Y+16	; 0x10
    4ad0:	5f 84       	ldd	r5, Y+15	; 0x0f
    4ad2:	6e 84       	ldd	r6, Y+14	; 0x0e
    4ad4:	7d 84       	ldd	r7, Y+13	; 0x0d
    4ad6:	8c 84       	ldd	r8, Y+12	; 0x0c
    4ad8:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ada:	aa 84       	ldd	r10, Y+10	; 0x0a
    4adc:	b9 84       	ldd	r11, Y+9	; 0x09
    4ade:	c8 84       	ldd	r12, Y+8	; 0x08
    4ae0:	df 80       	ldd	r13, Y+7	; 0x07
    4ae2:	ee 80       	ldd	r14, Y+6	; 0x06
    4ae4:	fd 80       	ldd	r15, Y+5	; 0x05
    4ae6:	0c 81       	ldd	r16, Y+4	; 0x04
    4ae8:	1b 81       	ldd	r17, Y+3	; 0x03
    4aea:	aa 81       	ldd	r26, Y+2	; 0x02
    4aec:	b9 81       	ldd	r27, Y+1	; 0x01
    4aee:	ce 0f       	add	r28, r30
    4af0:	d1 1d       	adc	r29, r1
    4af2:	0f b6       	in	r0, 0x3f	; 63
    4af4:	f8 94       	cli
    4af6:	de bf       	out	0x3e, r29	; 62
    4af8:	0f be       	out	0x3f, r0	; 63
    4afa:	cd bf       	out	0x3d, r28	; 61
    4afc:	ed 01       	movw	r28, r26
    4afe:	08 95       	ret

00004b00 <itoa>:
    4b00:	fb 01       	movw	r30, r22
    4b02:	9f 01       	movw	r18, r30
    4b04:	e8 94       	clt
    4b06:	42 30       	cpi	r20, 0x02	; 2
    4b08:	c4 f0       	brlt	.+48     	; 0x4b3a <itoa+0x3a>
    4b0a:	45 32       	cpi	r20, 0x25	; 37
    4b0c:	b4 f4       	brge	.+44     	; 0x4b3a <itoa+0x3a>
    4b0e:	4a 30       	cpi	r20, 0x0A	; 10
    4b10:	29 f4       	brne	.+10     	; 0x4b1c <itoa+0x1c>
    4b12:	97 fb       	bst	r25, 7
    4b14:	1e f4       	brtc	.+6      	; 0x4b1c <itoa+0x1c>
    4b16:	90 95       	com	r25
    4b18:	81 95       	neg	r24
    4b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    4b1c:	64 2f       	mov	r22, r20
    4b1e:	77 27       	eor	r23, r23
    4b20:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <__udivmodhi4>
    4b24:	80 5d       	subi	r24, 0xD0	; 208
    4b26:	8a 33       	cpi	r24, 0x3A	; 58
    4b28:	0c f0       	brlt	.+2      	; 0x4b2c <itoa+0x2c>
    4b2a:	89 5d       	subi	r24, 0xD9	; 217
    4b2c:	81 93       	st	Z+, r24
    4b2e:	cb 01       	movw	r24, r22
    4b30:	00 97       	sbiw	r24, 0x00	; 0
    4b32:	a1 f7       	brne	.-24     	; 0x4b1c <itoa+0x1c>
    4b34:	16 f4       	brtc	.+4      	; 0x4b3a <itoa+0x3a>
    4b36:	5d e2       	ldi	r21, 0x2D	; 45
    4b38:	51 93       	st	Z+, r21
    4b3a:	10 82       	st	Z, r1
    4b3c:	c9 01       	movw	r24, r18
    4b3e:	0c 94 a1 25 	jmp	0x4b42	; 0x4b42 <strrev>

00004b42 <strrev>:
    4b42:	dc 01       	movw	r26, r24
    4b44:	fc 01       	movw	r30, r24
    4b46:	67 2f       	mov	r22, r23
    4b48:	71 91       	ld	r23, Z+
    4b4a:	77 23       	and	r23, r23
    4b4c:	e1 f7       	brne	.-8      	; 0x4b46 <strrev+0x4>
    4b4e:	32 97       	sbiw	r30, 0x02	; 2
    4b50:	04 c0       	rjmp	.+8      	; 0x4b5a <strrev+0x18>
    4b52:	7c 91       	ld	r23, X
    4b54:	6d 93       	st	X+, r22
    4b56:	70 83       	st	Z, r23
    4b58:	62 91       	ld	r22, -Z
    4b5a:	ae 17       	cp	r26, r30
    4b5c:	bf 07       	cpc	r27, r31
    4b5e:	c8 f3       	brcs	.-14     	; 0x4b52 <strrev+0x10>
    4b60:	08 95       	ret

00004b62 <__udivmodhi4>:
    4b62:	aa 1b       	sub	r26, r26
    4b64:	bb 1b       	sub	r27, r27
    4b66:	51 e1       	ldi	r21, 0x11	; 17
    4b68:	07 c0       	rjmp	.+14     	; 0x4b78 <__udivmodhi4_ep>

00004b6a <__udivmodhi4_loop>:
    4b6a:	aa 1f       	adc	r26, r26
    4b6c:	bb 1f       	adc	r27, r27
    4b6e:	a6 17       	cp	r26, r22
    4b70:	b7 07       	cpc	r27, r23
    4b72:	10 f0       	brcs	.+4      	; 0x4b78 <__udivmodhi4_ep>
    4b74:	a6 1b       	sub	r26, r22
    4b76:	b7 0b       	sbc	r27, r23

00004b78 <__udivmodhi4_ep>:
    4b78:	88 1f       	adc	r24, r24
    4b7a:	99 1f       	adc	r25, r25
    4b7c:	5a 95       	dec	r21
    4b7e:	a9 f7       	brne	.-22     	; 0x4b6a <__udivmodhi4_loop>
    4b80:	80 95       	com	r24
    4b82:	90 95       	com	r25
    4b84:	bc 01       	movw	r22, r24
    4b86:	cd 01       	movw	r24, r26
    4b88:	08 95       	ret

00004b8a <_exit>:
    4b8a:	f8 94       	cli

00004b8c <__stop_program>:
    4b8c:	ff cf       	rjmp	.-2      	; 0x4b8c <__stop_program>
